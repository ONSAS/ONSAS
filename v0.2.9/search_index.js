var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"(Bathe, 2014) Klaus-Jurgen Bathe.  Finite Element Procedures . 2014.\n(Bazzano and Pérez Zerpa, 2017) J. B. Bazzano and J. Perez Zerpa.  Introducción al Análisis No Lineal de Estructuras. 2017.\n(Battini and Pacoste, 2002) Co-rotational beam elements with warping effects in instability problems, Computer Methods in Applied Mechanics and Engineering, 191 (17-18). 2020.\n(Holzapfel, 2000) Nonlinear Solid Mechanics, A continuum approach for Engineering, 2000, Wiley.","category":"page"},{"location":"examples/springMass/#Spring-mass-damper-system-example","page":"Spring-mass system","title":"Spring-mass-damper system example","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"(Image: Octave script)","category":"page"},{"location":"examples/springMass/#ODE-System-definition","page":"Spring-mass system","title":"ODE System definition","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"In this example a simple spring-mass-damper system is considered. This simple problem is used to validate different implementations of truss and frame elements submitted to dynamic loads.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"<img src=\"../../assets/springMassSystem.svg\" alt=\"spring-mass diagram\" width=\"800\"/>","category":"page"},{"location":"examples/springMass/#Analytic-solution","page":"Spring-mass system","title":"Analytic solution","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The analytical solution is based on chapter 3 from Dynamics of Structures by Ray W. Clough and Joseph Penzien, Third Edition, 2003. The analytical solution of the problem is given by:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"  u(t) =\n     left( A_c cos( omega_D  t ) + B sin( omega_D t )  right) e^ -xi omega_N t  +\n    G_1  cos( baromega t ) + G_2 sin( baromega t )","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"where the notation and the parameters interpretation can be seen in the cited reference.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"A set of numerical parameters must be defined to compute the analytic solution.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"We start as all models, clearing the workspace and adding the ONSAS path to the work path.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"% clear workspace and add path\nclose all, if ~strcmp( getenv('TESTS_RUN'), 'yes'), clear all, end\n%\naddpath( genpath( [ pwd '/../../src'] ) );","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The following numeric parameters are considered.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"% scalar parameters for spring-mass system\nk    = 39.47 ; % spring constant\nc    = 2   ; % damping parameter\nm    = 1     ; % mass of the system\np0   = 40    ; % amplitude of applied load\nu0   = 0.1   ; % initial displacement\ndu0  = 0.0   ; % initial velocity","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"Then other parameters are computed:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"omegaN  = sqrt( k / m )           ; % the natural frequency\nxi      = c / m  / ( 2 * omegaN ) ;\nfreq    = omegaN / (2*pi)         ;\nTN      = 2*pi / omegaN           ;\ndtCrit  = TN / pi                 ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The frequency of the sinusoidal external force is set as:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"omegaBar = 4*omegaN ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The analytic solution can be computed for specific cases as follows:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"if (c == 0) && (p0 == 0) % free undamped solution\n  myAnalyticFunc = @(t)   (   u0 * cos( omegaN * t )  ) ;\nelse                     % other cases solution\n  beta   = omegaBar / omegaN ;  omegaD = omegaN * sqrt( 1-xi^2 ) ; %forced and damped\n  G1 = (p0/k) * ( -2 * xi * beta   ) / ( ( 1 - beta^2 )^2 + ( 2 * xi * beta )^2 ) ;\n  G2 = (p0/k) * (  1      - beta^2 ) / ( ( 1 - beta^2 )^2 + ( 2 * xi * beta )^2 ) ;\n  \n  Ac = u0 - G1 ;  B = (xi*omegaN*Ac - omegaBar*G2 ) / (omegaD) ;\n  \n  myAnalyticFunc = @(t) ...\n     ( Ac * cos( omegaD   * t ) + B  * sin( omegaD   * t ) ) .* exp( -xi * omegaN * t ) ...\n    + G1  * cos( omegaBar * t ) + G2 * sin( omegaBar * t ) ;\nend","category":"page"},{"location":"examples/springMass/#Numerical-solutions","page":"Spring-mass system","title":"Numerical solutions","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The analytic solution is used to validate two numerical solution approaches using different structural physical models, governed by the same ODE.","category":"page"},{"location":"examples/springMass/#Numerical-case-1:-truss-element-model-with-Newmark-method-and-lumped-masses","page":"Spring-mass system","title":"Numerical case 1: truss element model with Newmark method and lumped masses","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"In this case, a truss element is considered, as shown in the figure, with Young modulus, cross-section, area, mass, nodal damping and length corresponding to the parameters considered for the spring-mass-damper system ","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"<img src=\"../../assets/springMassTrussModel.svg\" alt=\"spring-mass diagram\" width=\"800\"/>","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The scalar parameters for the equivalent truss model are:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"l   = 10                ;\nA   = 0.2               ;\nrho = m * 2 / ( A * l ) ;\nE   = k * l /   A       ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"where the material of the truss was selected to set a mass m at the node 2.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"assert( u0 < l, 'this analytical solution is not valid for this u0 and l0');","category":"page"},{"location":"examples/springMass/#Materials","page":"Spring-mass system","title":"Materials","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"materials                    = struct() ;\nmaterials(1).modelName  = 'elastic-rotEngStr' ;\nmaterials(1).modelParams = [ E 0 ]          ;\nmaterials(1).density         = rho              ;","category":"page"},{"location":"examples/springMass/#Elements","page":"Spring-mass system","title":"Elements","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"In this case only 'node' and  'truss' elements are considered and the lumped inertial formulation is set for the truss element:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"elements             = struct() ;\nelements(1).elemType = 'node'                                 ;\nelements(2).elemType = 'truss'                                ;\nelements(2).elemCrossSecParams = {'circle', [sqrt(4*A/pi) ] } ;\nelements(2).massMatType = 'lumped'                            ;","category":"page"},{"location":"examples/springMass/#Boundary-conditions","page":"Spring-mass system","title":"Boundary conditions","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The node 1 is fixed, so the boundary condition set is:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"boundaryConds                  = struct() ;\nboundaryConds(1).imposDispDofs =  [ 1 3 5 ] ;\nboundaryConds(1).imposDispVals =  [ 0 0 0 ] ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The node 2 allows the truss to move in x so the boundary condition set is:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"boundaryConds(2).imposDispDofs =  [ 3 5 ] ;\nboundaryConds(2).imposDispVals =  [ 0 0 ] ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"ant the external load is added into the same boundary condition using:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"boundaryConds(2).loadsCoordSys = 'global'                   ;\nboundaryConds(2).loadsTimeFact = @(t) p0*sin( omegaBar*t )  ;\nboundaryConds(2).loadsBaseVals = [ 1 0 0 0 0 0 ]            ;","category":"page"},{"location":"examples/springMass/#Initial-conditions","page":"Spring-mass system","title":"Initial conditions","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"Initial displacement and velocity are set:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"aux = zeros(6*2,1) ;  aux(7) = u0 ;\ninitialConds.U = aux ;\naux(7) = du0 ;\ninitialConds.Udot = aux ; ","category":"page"},{"location":"examples/springMass/#Analysis-settings","page":"Spring-mass system","title":"Analysis settings","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The following parameters correspond to the iterative trapezoidal Newmark method with the following tolerances, time step, tolerances and final time","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"analysisSettings               = struct() ;\nanalysisSettings.methodName    = 'newmark' ;\nanalysisSettings.deltaT        =   0.005   ;\nanalysisSettings.finalTime     =   2.5*TN  ;\nanalysisSettings.stopTolDeltau =   1e-10    ;\nanalysisSettings.stopTolForces =   1e-10    ;\nanalysisSettings.stopTolIts    =   10      ;","category":"page"},{"location":"examples/springMass/#OtherParams","page":"Spring-mass system","title":"OtherParams","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The nodalDispDamping is added into the model using:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"otherParams                  = struct() ;\notherParams.nodalDispDamping = c    ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The name of the problem is:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"otherParams.problemName = 'springMass_case1'     ;","category":"page"},{"location":"examples/springMass/#mesh","page":"Spring-mass system","title":"mesh","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"Only two nodes are considered so the nodes matrix is:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"mesh             = struct() ;\nmesh.nodesCoords = [  0  0  0 ; ...\n                      l  0  0 ] ;\nmesh.conecCell = { } ;\n% The first node has no material, the first element of the _elements_ struct, which is `'node'` also the first boundary condition (fixed) and no initial condition is set.\nmesh.conecCell{ 1, 1 } = [ 0 1 1    1   ] ;\n% The second node has no material, the first element of the _elements_ struct, which is `'node'` also the second boundary condition (x disp free) and the first initial condition ($u_0$) is set.\nmesh.conecCell{ 2, 1 } = [ 0 1 2    2   ] ;\n% Only one element is considered with the first material and the second element setting\nmesh.conecCell{ 3, 1 } = [ 1 2 0    1 2   ] ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"Execute ONSAS and save the results:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"[matUsNewmark, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/springMass/#Numerical-case-2:-truss-model-with-nodal-masses,-using-\\alpha-HHT-method-and-user-loads-function","page":"Spring-mass system","title":"Numerical case 2: truss model with nodal masses, using alpha-HHT method and user loads function","text":"","category":"section"},{"location":"examples/springMass/#Material","page":"Spring-mass system","title":"Material","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The nodalMass field allows to add lumped matrices to a node, since this field is used, then the equivalent rho of the material(1) aforementioned now is set to 0. Although an equal mass m is considered for u_x u_y and u_z at the node 2, so:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"materials(1).density   = 0       ;\nmaterials(2).nodalMass = [m m m] ;","category":"page"},{"location":"examples/springMass/#Boundary-conditions-2","page":"Spring-mass system","title":"Boundary conditions","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"the boundary conditions struct is entirely re-written.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"% repeat the BCs for node 1\nboundaryConds                  = { } ;\nboundaryConds(1).imposDispDofs =  [ 1 3 5 ] ;\nboundaryConds(1).imposDispVals =  [ 0 0 0 ] ;\n% repeat the BCs for node 2\nboundaryConds(2).imposDispDofs =  [ 3 5 ] ;\nboundaryConds(2).imposDispVals =  [ 0 0 ] ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"ant the external load is added into the same boundary condition using:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"boundaryConds(3).userLoadsFilename = 'myLoadSpringMass' ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"where inside the function 'myLoadSpringMass' the external force vector of the structure with 12 = (2x6) entries is computed.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"now the initial condition is added to the node 2 with the second material:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"mesh.conecCell{ 2, 1 } = [ 2 1 2   2  ] ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The alpha_HHT method with alpha=0 is equivalent to Newmark, this is employed to validate results of both methods, then:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"analysisSettings.methodName = 'alphaHHT' ;\nanalysisSettings.alphaHHT   =   0        ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"otherParams.problemName = 'springMass_case2'     ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"Execute ONSAS and save the results:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"[matUsHHT, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/springMass/#Numerical-case-3:-beam-element-model","page":"Spring-mass system","title":"Numerical case 3: beam element model","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"d = l/10;\nA   = pi * d^2 /  4 ;\nIzz = pi * d^4 / 64 ; \nE   = k* l^3 / ( 3 * Izz ) ; % delta = P L3/(3EI)  =>  k = P/delta = 3EI/L3  => E = kL3/(3I)\nrho = 2*m/(A*l) ; ","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"materials(1).modelParams = [ E 0 ] ;\nmaterials(1).density  = rho ;\nmaterials(1).modelName  = 'elastic-linear' ; % elastic-rotEngStr should work as well","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"elements             = {} ;\nelements(1).elemType = 'node' ;\nelements(2).elemType = 'frame'; %and not truss\nelements(2).massMatType = 'lumped' ;\nelements(2).elemCrossSecParams{1,1} = 'circle' ;\nelements(2).elemCrossSecParams{2,1} = [d] ;\nelements(2).elemTypeParams = 0 ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"boundaryConds = {} ;\nboundaryConds(1).imposDispDofs =  [ 1 2 3 4 5 6] ;\nboundaryConds(1).imposDispVals =  [ 0 0 0 0 0 0] ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"boundaryConds(2).loadsCoordSys = 'global'                  ;\nboundaryConds(2).loadsTimeFact = @(t) p0*sin( omegaBar*t )        ;\nboundaryConds(2).loadsBaseVals = [0 0 1 0 0 0 ] ; %along Y axis","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"mesh.nodesCoords = [  0  0  0 ; ...\n                      l  0  0 ] ;\nmesh.conecCell = { } ;\nmesh.conecCell{ 1, 1 } = [ 0 1 1    1   ] ;\nmesh.conecCell{ 2, 1 } = [ 0 1 2    2   ] ;\nmesh.conecCell{ 3, 1 } = [ 1 2 0    1 2   ] ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"An initial displacements u_0 is set in y direction:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"aux = zeros(6*2,1) ;  aux(6+3) = u0 ;\ninitialConds.U = aux ;\naux(6+3) = du0 ;\ninitialConds.Udot = aux ; ","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"otherParams.problemName = 'springMass_case3'     ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"analysisSettings.methodName    = 'newmark' ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"[matUsBending, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\nvalsBending = matUsBending(6+3,:) ;","category":"page"},{"location":"examples/springMass/#Verification","page":"Spring-mass system","title":"Verification","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The numerical displacements of the node 2 is extracted for both study cases:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"valsNewmark = matUsNewmark(6+1,:) ;\nvalsHHT     = matUsHHT(6+1,:)     ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The analytical solution is evaluated:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"times       = linspace( 0,analysisSettings.finalTime, size(matUsHHT,2) ) ;\nvalsAnaly   = myAnalyticFunc(times)                                                          ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The boolean to validate the implementation is evaluated such as:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"analyticCheckTolerance = 5e-2 ;\nverifBooleanNewmark =  ( ( norm( valsAnaly  - valsNewmark ) / norm( valsAnaly ) ) <  analyticCheckTolerance ) ;\nverifBooleanHHT     =  ( ( norm( valsAnaly  - valsHHT     ) / norm( valsAnaly ) ) <  analyticCheckTolerance ) ;\nverifBooleanBending =  ( ( norm( valsBending- valsHHT     ) / norm( valsAnaly ) ) <  analyticCheckTolerance ) ;\nverifBoolean        = verifBooleanHHT && verifBooleanNewmark && verifBooleanBending                                   ;","category":"page"},{"location":"examples/springMass/#Plot-verification","page":"Spring-mass system","title":"Plot verification","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"The control displacement u(t) is plotted:","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"figure\nhold on, grid on, spanPlot = 8 ; lw = 2.0 ; ms = 11 ; plotfontsize = 20 ;\nplot(times, valsAnaly   ,'b-', 'linewidth', lw,'markersize',ms )\nplot(times(1:spanPlot:end), valsNewmark(1:spanPlot:end) ,'ro', 'linewidth', lw,'markersize', ms )\nplot(times(1:spanPlot:end), valsHHT(1:spanPlot:end)     ,'gs', 'linewidth', lw,'markersize', ms )\nplot(times(1:spanPlot:end), valsBending(1:spanPlot:end)     ,'yx', 'linewidth', lw,'markersize', ms )\nlabx = xlabel('t [s]');   laby = ylabel('u(t) [m]') ;\nlegend( 'analytic', 'truss-Newmark', 'nodalMass-HHT', 'Beam-model', 'location','northeast')\ntitle( sprintf('dt = %.3d, m = %d, c = %d, k = %d, p0 = %d', analysisSettings.deltaT, m, c, k, p0 ) )\nset(gca, 'linewidth', 1.0, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\nprint('output/springMassCheckU.png', '-dpng' )","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"<img src=\"../../assets/generated/springMassCheckU.png\" alt=\"plot check\" width=\"500\"/>","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#Running-ONSAS","page":"Installation","title":"Running ONSAS","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"The user should follow these steps to install and run ONSAS:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Download and install the latest version of GNU-Octave.\nDownload the zip file of the latest ONSAS release from these site.\nOpen GNU-Octave and run one of the example scripts from the examples folder (or create yours!).","category":"page"},{"location":"install/#Visualizing-results","page":"Installation","title":"Visualizing results","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"You can process the outputs using Octave, however, the open-source software ParaView can be used to visualize the results produced by ONSAS.","category":"page"},{"location":"install/#Generation-of-geometries/meshes","page":"Installation","title":"Generation of geometries/meshes","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"The user can provide the geometry of the structure using two optional formats: .msh or .dxf.  GMSH is an open-source tool that allows to generate high-quality meshes. The dxf files can be used using any CAD tool.","category":"page"},{"location":"examples/nonLinearAerodynamics/#Aerodynamic-non-linear-cantilever-beam-example","page":"Non-linear aerodynamics","title":"Aerodynamic non-linear cantilever beam example","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"(Image: Octave script)","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"In this tutorial, the aerodynamic non-linear cantilever beam example is solved using ONSAS. The aim of this problem is to validate aerodynamic steady wind loads applied to a cantilever beam undergoing small strains. The aerodynamic force modification due to the beam deformation is considered (drag reconfiguration). Given the aforementioned characteristics and under the hypothesis of small displacements regime a semi-analytic solution is available.   ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The beam is submitted to a uniform air wind velocity field V_a, at 20 degrees and atmospheric pressure, along axis y. Due to revolution symmetry of the problem lift c_l and torsional moment c_m coefficients are null. A drag coefficient c_d=12 is extracted from this reference.  The beam has a length L and a circular solid cross section with diameter d as it is shown in the following figure: ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"<img src=\"../../assets/nonLinearAerodynamics/ilusNonLinearAerodynamics.svg\" alt=\"general dimensions sketch\" width=\"700\"/>","category":"page"},{"location":"examples/nonLinearAerodynamics/#Small-displacements-2D-case","page":"Non-linear aerodynamics","title":"Small displacements 2D case","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/#Static-semi-analytic-solution","page":"Non-linear aerodynamics","title":"Static semi-analytic solution","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The wind load forces of a generic cross section can be derived within the quasi-steady-theory. Considering a cross section located at x, then the projected wind velocity into the transverse deformed plane is then  V_p=V_acos(theta_z) (the axial drag is neglected). Subsequently a drag force per unit of length F_d= frac12 rho d c_d V_p^2 with fracV_pV_p direction is applied. In order to link the force F_d with the beam deflection, the uniform distributed force along y is computed as F_y=F_dcos(theta_z). This leads to the following third order differential equation:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"EI_zz fracpartial ^3 theta_zpartial x ^3 = -q_0 c_dcos^3(theta_z)","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"in which q_0 = frac12 rho_f d V_a^2 and the air density is rho_f = 1225 kg/m^3.","category":"page"},{"location":"examples/nonLinearAerodynamics/#Numerical-solution","page":"Non-linear aerodynamics","title":"Numerical solution","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Before defining the structs, the workspace is cleaned and ONSAS directory is added:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"close all, clear all ; addpath( genpath( [ pwd '/../../src'] ) );","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"material and geometrical parameters are defined:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"E = 1e9 ;  nu = 0.3 ; rho = 1800 ; G = E / (2 * (1+nu)) ;\nl = 10 ; d = l/100 ; J = pi * d ^ 4 / 32 ; Iyy = J / 2 ; Izz = Iyy ;  ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"the fluid properties are:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"rhoA = 1.225 ; nuA = 1.6e-5;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"next the number of frame elements for all cases is set:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"numElements = 10 ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#MEB-parameters","page":"Non-linear aerodynamics","title":"MEB parameters","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/#materials","page":"Non-linear aerodynamics","title":"materials","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Since the example contains only one linear Euler Bernoulli element the fields of the materials struct will have only one entry. Although, the constitutive behavior law selected is Saint-Venant-Kirchhoff:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"materials.modelName  = 'elastic-linear' ;\nmaterials.modelParams = [ E nu ]        ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"note that the use of  this linear elastic element guarantees the left hand side of the differential equation stated above.","category":"page"},{"location":"examples/nonLinearAerodynamics/#elements","page":"Non-linear aerodynamics","title":"elements","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Two different types of elements are considered, node and frames. The nodes will be assigned in the first entry (index 1) and the beam at the index 2. The elemType field is then:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"elements(1).elemType = 'node'  ;\nelements(2).elemType = 'frame' ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The node has not cross section geometry to assign (an empty array is automatically set). The solid circular cross section is preset in ONSAS, and to load it just use:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"elements(2).elemCrossSecParams{1,1} = 'circle' ;\nelements(2).elemCrossSecParams{2,1} = d        ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Now the element aerodynamic properties are defined. First the drag coefficient function located at the folder's example is declared into userDragCoef field as:","category":"page"},{"location":"examples/nonLinearAerodynamics/#boundaryConds","page":"Non-linear aerodynamics","title":"boundaryConds","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Only one welded (6 degrees of freedom are set to zero) boundary condition (BC) is considered:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"boundaryConds(1).imposDispDofs = [ 1 2 3 4 5 6 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#mesh-parameters","page":"Non-linear aerodynamics","title":"mesh parameters","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The coordinates of the mesh nodes are given by the matrix:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"mesh.nodesCoords = [ (0:(numElements))'*l/numElements  zeros(numElements+1,2) ] ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The connectivity is introduced using the conecCell. Each entry of the cell contains a vector with the four indexes of the MEBI parameters, followed by the indexes of nodes that compose the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"mesh.conecCell = { } ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"then the first welded node is defined with material (M) zero since nodes don't have material, the first element (E) type (the first entry of the elements struct), and (B) is the first entry of the the boundaryConds struct. For (I) no non-homogeneous initial condition is considered (then zero is used) and finally the node is assigned:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"mesh.conecCell{ 1, 1 } = [ 0 1 1  1 ] ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Next the frame elements MEB parameters are set. The frame material is the first material of materials struct, then 1 is assigned. The second entry of the elements struct correspond to the frame element employed, so 2 is set. Finally no BC is required for this element, then 0 is used.  Consecutive nodes build the element so then the mesh.conecCell is:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"for i=1:numElements,\n  mesh.conecCell{ i+1,1 } = [ 1 2 0  i i+1 ] ;\nend","category":"page"},{"location":"examples/nonLinearAerodynamics/#initial-Conditions","page":"Non-linear aerodynamics","title":"initial Conditions","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Any non-homogeneous initial conditions are considered, then an empty struct is set:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"initialConds = struct() ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#analysisSettings","page":"Non-linear aerodynamics","title":"analysisSettings","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"First the wind velocity and the fluid properties are set into __ field of analysisSettings struct. This will apply a external wind loads for each element with elemTypeAero field into the elements struct. The name of the wind velocity function must located on the same example path is: ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"analysisSettings.fluidProps = {rhoA; nuA; 'windVelNonLinearStatic'} ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Inside that function a linear velocity v_a = 30*t is declared. The final time will be set to 1 in order to achieve 30 m/s.  The geometrical non-linear effects are considered in this case to compute the aerodynamic force. As consequence the wind load forces are computed on the deformed configuration. The field  geometricNonLinearAero into  analysisSettings struct is then set to:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"analysisSettings.geometricNonLinearAero = true;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"note that if this boolean is not declared ONSAS will automatically assign it as true.   since this problem is static, then a N-R method is employed. The convergence of the method is accomplish with ten equal load steps. The time variable for static cases is a load factor parameter that must be configured into the windVel.m function. A linear profile is considered for ten equal velocity load steps as:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"analysisSettings.deltaT        =   0.1           ;\nanalysisSettings.finalTime     =   1             ;\nanalysisSettings.methodName    = 'newtonRaphson' ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Next the maximum number of iterations per load(time) step, the residual force and the displacements tolerances are set to: ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"analysisSettings.stopTolDeltau =   1e-6          ;\nanalysisSettings.stopTolForces =   1e-6          ;\nanalysisSettings.stopTolIts    =   40            ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#otherParams","page":"Non-linear aerodynamics","title":"otherParams","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The name of the problem and vtk format output are selected: ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"otherParams.problemName = 'nonLinearCantileverSD2D';\notherParams.plots_format = 'vtk' ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"ONSAS software is executed for the parameters above defined and the displacement solution of each load(time) step is saved into matUsSD matrix:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"[matUsSD, ~] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#Verification","page":"Non-linear aerodynamics","title":"Verification","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/#DifferentialEquations.jl-(reconfiguration)-solution.","page":"Non-linear aerodynamics","title":"DifferentialEquations.jl (reconfiguration) solution.","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"DiffEq.jl solves the third order ordinary differential equation for this case by executing DiffEq.jl script. Then  assembleJuliaSol.m script function is executed to build the julia solution with mesh and elements struct as:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"% [dSolJulia] = assembleJuliaSol(elements,mesh) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Then the the relevance linear and angular displacements are extracted using:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"% ydefJulia = dSolJulia(3:6:end)              ;\n% thetaZdefJulia = dSolJulia(6:6:end)         ;\n% xdefJulia = linspace(0,l,length(ydefJulia)) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#Numeric-solution","page":"Non-linear aerodynamics","title":"Numeric solution","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The numerical solution is computed:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"xref    = mesh.nodesCoords(:,1)       ;\nyref    = mesh.nodesCoords(:,2)       ;\nzref    = mesh.nodesCoords(:,3)       ;\nxdefNum = xref + matUsSD(1:6:end,end) ;\nydefNum = yref + matUsSD(3:6:end,end) ;\nthetaZdefNum = matUsSD(6:6:end,end)   ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#Plot-verification","page":"Non-linear aerodynamics","title":"Plot verification","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The plot parameters are:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"lw = 2 ; ms = 12 ;\nlabelTitle = [' Validating solution with ' num2str(numElements) ' elements' ] ;\naxislw = 2 ; axisFontSize = 20 ; legendFontSize = 15 ; curveFontSize = 15 ;    \nfolderPathFigs = './output/figs/' ;\nmkdir(folderPathFigs) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The linear u_y displacements verification is plotted executing:  ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"fig1 = figure(1) ;\nhold on, grid on\nplot(xref      , ydefNum  , 'bo' , 'linewidth', lw, 'markersize', ms+5   );\n% plot(xdefJulia , ydefJulia, 'b-' , 'linewidth', lw, 'markersize', ms     );\nlegend('y numeric SD', 'y semi-analytic SD' )\nlabx=xlabel(' x[m] ');    laby=ylabel('y[m]');\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northWest' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig1 = strcat(folderPathFigs, 'linDispSD.png') ;\nprint(fig1, namefig1,'-dpng') ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"<img src=\"../../assets/nonLinearAerodynamics/linDispSD.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The angular theta_z displacements verification is plotted executing:  ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"fig2 = figure(2) ;\nhold on, grid on\nplot(xref,      thetaZdefNum,      'bo' , 'linewidth', lw,'markersize', ms+5   );\n% plot(xdefJulia, thetaZdefJulia,    'b-' , 'linewidth', lw, 'markersize', ms    );\nlegend('\\theta_z numeric SD', '\\theta_z semi-analyitc SD')\nlabx=xlabel(' x[m] ');    laby=ylabel('Angle[rad]');\n% title (labelTitle)\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northWest' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig2 = strcat(folderPathFigs, 'angDispSD.png') ;\nprint(fig2, namefig2,'-dpng')","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"<img src=\"../../assets/nonLinearAerodynamics/angDispSD.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearAerodynamics/#Large-displacements-2D-case","page":"Non-linear aerodynamics","title":"Large displacements 2D case","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Now a large displacements 2D case is solved. The solution is computed using the co-rotational beam element formulation proposed in this reference","category":"page"},{"location":"examples/nonLinearAerodynamics/#Numerical-solution-static-case","page":"Non-linear aerodynamics","title":"Numerical solution static case","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/#MEBI-parameters","page":"Non-linear aerodynamics","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/#materials-2","page":"Non-linear aerodynamics","title":"materials","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"In order to reproduce large displacements results the materials struct is then changed to: ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"materials.modelName  = 'elastic-rotEngStr' ;\nmaterials.modelParams = [ 1e6 nu ]       ;\nmaterials.density         = rho              ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#elements-2","page":"Non-linear aerodynamics","title":"elements","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The element tangent matrices of the consistent inertial force vector are taking into account by the following boolean:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"elements(2).massMatType = 'consistent' ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#otherParams-2","page":"Non-linear aerodynamics","title":"otherParams","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The name of this case problem is:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"otherParams.problemName = 'nonLinearCantileverLDStatic' ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"ONSAS software is executed for the parameters above defined and the displacement solution of each load(time) step is saved into matUsLDStatic matrix:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"[matUsLDStatic, ~] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/#Numerical-solution-dynamic-case","page":"Non-linear aerodynamics","title":"Numerical solution dynamic case","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Next a dynamic example considering large displacements motion is addressed to test the convergence of the dynamic solution disregarding any artificial damping. ","category":"page"},{"location":"examples/nonLinearAerodynamics/#analysisSettings-2","page":"Non-linear aerodynamics","title":"analysisSettings","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"For such propose the wind velocity function name is now: ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"analysisSettings.fluidProps = {rhoA; nuA; 'windVelNonLinearDynamic2D'} ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Inside that function a ramp velocity profile v_a(t) = 5*t*(t66) + 5*t*(t=66) is declared. This is an abrupt wind velocity load from 0 to 7 m/s in 10 s .","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Regarding the integration time method scheme, a classic Newmark trapezoidal is set as:  ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"analysisSettings.deltaT     =  1        ;\nanalysisSettings.finalTime  =  200      ;\nanalysisSettings.methodName = 'newmark' ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#otherParams-3","page":"Non-linear aerodynamics","title":"otherParams","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The name of this case problem is:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"otherParams.problemName = 'nonLinearCantileverLDDynamic2D' ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"ONSAS software is executed for the parameters above defined and the displacement solution for each time step is saved into matUsLDDynamic matrix:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"[matUsLDDynamic, ~] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#Verification-2","page":"Non-linear aerodynamics","title":"Verification","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The numerical dynamic convergence to the static solution is then verified . The degree of freedom selected for such task is u_y(t) of node A. ","category":"page"},{"location":"examples/nonLinearAerodynamics/#Static-solution.","page":"Non-linear aerodynamics","title":"Static solution.","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Extract static numerical time history displacements u_y of node A. First the selected degree of freedom is:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"nodeA = numElements + 1                ;\nrelativeDofUyA = 3                     ;\ndofUyA = (nodeA -1)*6 + relativeDofUyA ; ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"then node A u_y time history accessed by:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"UyAStaticSol = matUsLDStatic(dofUyA,:) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#Dynamic-solution.","page":"Non-linear aerodynamics","title":"Dynamic solution.","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Extract dynamic numerical solution as follows:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"UyADynamicSol = matUsLDDynamic(dofUyA,:) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"next, the time vector is given by:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"timVecLD = linspace(0, analysisSettings.finalTime, size(matUsLDDynamic,2) ) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#Verification-Plot","page":"Non-linear aerodynamics","title":"Verification Plot","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Create folder to save figures","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"folderFigs = strcat('./output/', 'figs/') ;\nmkdir(folderFigs) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The linear u_y displacements verification of node  A is finally plotted executing:  ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"fig3 = figure(3) ;\nhold on,  grid on\n% legend first point plot\nplot(timVecLD(1), UyADynamicSol(1),...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', 'o')\n% static solution plot\nplot(timVecLD   , UyAStaticSol(end)*ones(length(timVecLD)), 'k:' , 'linewidth', lw, 'markersize', ms     );\n% markers plot\nplot(timVecLD(1:8:end), UyADynamicSol(1:8:end),...\n     'color', 'b', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', 'o')\n% continium line plot\nplot(timVecLD, UyADynamicSol,...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\nlegend('dynamic LD', 'static LD' )\nlabx=xlabel('x[m]');    laby=ylabel('y[m]');\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northEast' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig3 = strcat(folderPathFigs, 'uyA.png') ;\nprint(fig3, namefig3,'-dpng') ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"<img src=\"../../assets/nonLinearAerodynamics/uyA.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearAerodynamics/#Large-displacements-3D-case","page":"Non-linear aerodynamics","title":"Large displacements 3D case","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"A large displacements dynamic 3D case is presented as follows. This example is inspired on Vortex shedding  exposed at (Image: Youtbue Video)","category":"page"},{"location":"examples/nonLinearAerodynamics/#MEBI-parameters-2","page":"Non-linear aerodynamics","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"","category":"page"},{"location":"examples/nonLinearAerodynamics/#materials-3","page":"Non-linear aerodynamics","title":"materials","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"In order to reproduce large displacements results the materials struct is then changed to: ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"materials.modelParams = [ 1e8 nu ]       ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#analysisSettings-3","page":"Non-linear aerodynamics","title":"analysisSettings","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Regarding the integration time method scheme, a classic alpha-HHT method is employed. This method is more stable numerically than Newmark, the keen reader is refereed to this reference:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"analysisSettings.methodName = 'alphaHHT';","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"the simulation time is defined such that:  ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"analysisSettings.deltaT     =  .2  ;\nanalysisSettings.finalTime  =  120 ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The emulation of the vortex shedding vibration is generated by a synthetic wind velocity composed by two sinusoidal velocities. A low frequency Vy_a along the mean flow direction y and then a high frequency component  Vz_a along z. The high frequency component is selected to produce resonance effects between the flow and the beam, thus the high frequency velocity is selected equal to the first mode bending:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"freqBendingFirstMode = (1.875)^2 * sqrt( materials.modelParams(1) * Iyy / (materials.density * (pi * d^4 / 4) * l^4) ) ;\nanalysisSettings.fluidProps = {rhoA; nuA; 'windVelNonLinearDynamic3D'} ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The velocity function componentes are assembled:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"timeVecLD3d = linspace(0,analysisSettings.finalTime, ceil(analysisSettings.finalTime / analysisSettings.deltaT + 1) ) ;\nwindVelY = [] ; windVelZ = [] ;\nfor timeIndex = timeVecLD3d\n    windVelVecTimeIndex = feval(analysisSettings.fluidProps{3}, 0, timeIndex) ;\n    windVelY = [windVelY windVelVecTimeIndex(2) ] ;\n    windVelZ = [windVelZ windVelVecTimeIndex(3) ] ;\nend","category":"page"},{"location":"examples/nonLinearAerodynamics/#otherParams-4","page":"Non-linear aerodynamics","title":"otherParams","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The name of this case problem is:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"otherParams.problemName = 'nonLinearCantileverLD3D' ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"ONSAS software is executed for the parameters above defined and the displacement solution for each time step is saved into matUsLD3D matrix:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"[matUsLD3D, ~] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/#Plots","page":"Non-linear aerodynamics","title":"Plots","text":"","category":"section"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"The wind velocity profile implemented is plotted executing:  ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"fig4 = figure(4) ;\nhold on,  grid on\n% legend first point plot\nplot(timeVecLD3d(1), windVelY(1),...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', 'o')\nplot(timeVecLD3d(1), windVelZ(1),...\n     'color', 'r', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', '^')\n% markers plot\nplot(timeVecLD3d(1:10:end), windVelY(1:10:end),...\n     'color', 'b', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', 'o')\nplot(timeVecLD3d(1:17:end), windVelZ(1:17:end),...\n     'color', 'r', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', '^')\n% continium line plot\nplot(timeVecLD3d, windVelY,...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\nplot(timeVecLD3d, windVelZ,...\n     'color', 'r', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\nlegend('Va_y', 'Va_z' )\nlabx=xlabel('t[s]');    laby=ylabel('V_a[m/s]');\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northEast' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig4 = strcat(folderPathFigs, 'windVel3D.png') ;\naxis([0,50])\nprint(fig4, namefig4,'-dpng') ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"<img src=\"../../assets/nonLinearAerodynamics/windVel3D.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Then u_y of node A  is computed using:  ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"UyADynamicSol3D = matUsLD3D(dofUyA,:) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"analogosuly u_z of A node is:  ","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"UzADynamicSol3D = matUsLD3D(dofUyA + 2,:) ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Open figure and plot","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"fig5 = figure(5) ;\nhold on,  grid on\n% legend first point plot uy \nplot(timeVecLD3d(1), UyADynamicSol3D(1),...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', 'o')\n% legend first point plot uz\nplot(timeVecLD3d(1), UzADynamicSol3D(1),...\n     'color', 'r', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', '^')\n% markers plot uy\nplot(timeVecLD3d(1:13:end), UyADynamicSol3D(1:13:end),...\n     'color', 'b', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', 'o')\n% continium line plot uy\nplot(timeVecLD3d, UyADynamicSol3D,...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\n% markers plot uz\nplot(timeVecLD3d(1:23:end), UzADynamicSol3D(1:23:end),...\n     'color', 'r', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', '^')\n% continium line plot uz\nplot(timeVecLD3d, UzADynamicSol3D,...\n     'color', 'r', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\nlegend('U_y node A', 'U_z node A' )\nlabx=xlabel('x[m]');    laby=ylabel('Dispalcements[m]');\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northEast' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig5 = strcat(folderPathFigs, 'uA3D.png') ;\nprint(fig5, namefig5,'-dpng') ;","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"<img src=\"../../assets/nonLinearAerodynamics/uA3D.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"Finally a GIF to illustrate the motion amplitude is subsequently presented:","category":"page"},{"location":"examples/nonLinearAerodynamics/","page":"Non-linear aerodynamics","title":"Non-linear aerodynamics","text":"<img src=\"../../assets/nonLinearAerodynamics/cyilindricalCantBeam3D.gif\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/cantileverBeam/#Uniform-curvature-cantilever-beam-example","page":"Cantilever Beam","title":"Uniform curvature cantilever beam example","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"In this tutorial, the Uniform curvature cantilever example and its resolution using ONSAS are described. The aim of this example is to validate the static co-rotational 3D beam implementation by comparing the results provided by ONSAS with the analytical solution.  The Octave script of this example is available at this url.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The problem consists in a beam, with one free end (right) submitted to a nodal moment M, and the other end (left) constrained (welded), as it is shown in the figure.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"<img src=\"../../assets/cantileverBeam_HTML.svg\" alt=\"structure diagram\" width=\"500\"/>","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"Before defining the structs, the workspace is cleaned, the ONSAS directory is added to the path and scalar geometry and material parameters are defined.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"close all, if ~strcmp( getenv('TESTS_RUN'), 'yes'), clear all, end\n% add path\naddpath( genpath( [ pwd '/../../src'] ) );\n% material scalar parameters\nE = 200e9 ;  nu = 0.3 ;\n% geometrical scalar parameters\nl = 10 ; ty = .1 ;  tz = .1 ;\n% the number of elements of the mesh\nnumElements = 10 ;","category":"page"},{"location":"examples/cantileverBeam/#Analytic-solution","page":"Cantilever Beam","title":"Analytic solution","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The rotation of the right end, for a given moment M, can be computed as:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":" M( theta ) = E I_y frac theta l   ","category":"page"},{"location":"examples/cantileverBeam/#Numerical-solution","page":"Cantilever Beam","title":"Numerical solution","text":"","category":"section"},{"location":"examples/cantileverBeam/#MEB-parameters","page":"Cantilever Beam","title":"MEB parameters","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The modelling of the structure begins with the definition of the Material-Element-BoundaryConditions (MEB) parameters.","category":"page"},{"location":"examples/cantileverBeam/#materials","page":"Cantilever Beam","title":"materials","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"Since the example contains only one rod the fields of the materials struct will have only one entry. Although, it is considered constitutive behavior according to the SaintVenantKirchhoff law:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"materials                 = struct() ;\nmaterials.modelName  = 'elastic-rotEngStr' ;\nmaterials.modelParams = [ E nu ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The density is not defined, therefore it is considered as zero (default), then no inertial effects are considered (static analysis).","category":"page"},{"location":"examples/cantileverBeam/#elements","page":"Cantilever Beam","title":"elements","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"Two different types of elements are considered, node and beam. The nodes will be assigned in the first entry (index 1) and the beam at the index 2. The elemType field is then:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"elements             = struct() ;\nelements(1).elemType = 'node'  ;\nelements(2).elemType = 'frame' ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"for the geometries, the node has not geometry to assign (empty array), and the truss elements will be set as a rectangular-cross section with t_y and t_z cross-section dimensions in y and z directions, then the elemCrossSecParams field is:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"elements(2).elemCrossSecParams{1,1} = 'rectangle' ;\nelements(2).elemCrossSecParams{2,1} = [ty tz]     ;","category":"page"},{"location":"examples/cantileverBeam/#boundaryConds","page":"Cantilever Beam","title":"boundaryConds","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The elements are submitted to two different BC settings. The first BC corresponds to a welded condition (all 6 dofs set to zero)","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"Iy = ty*tz^3/12 ;\nboundaryConds                  = struct() ;\nboundaryConds(1).imposDispDofs = [ 1 2 3 4 5 6 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"and the second corresponds to an incremental nodal moment, where the target load produces a circular form of the deformed beam.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"boundaryConds(2).loadsCoordSys = 'global'        ;\nboundaryConds(2).loadsTimeFact = @(t) E*Iy*2*pi/l *t ;\nboundaryConds(2).loadsBaseVals = [ 0 0 0 -1 0 0 ] ;","category":"page"},{"location":"examples/cantileverBeam/#initial-Conditions","page":"Cantilever Beam","title":"initial Conditions","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"homogeneous initial conditions are considered, then an empty cell is set:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"initialConds = {} ;","category":"page"},{"location":"examples/cantileverBeam/#mesh-parameters","page":"Cantilever Beam","title":"mesh parameters","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The coordinates of the nodes of the mesh are given by the matrix:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"mesh             = struct() ;\nmesh.nodesCoords = [ (0:(numElements))'*l/numElements  zeros(numElements+1,2) ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The connectivity is introduced using the conecCell. Each entry of the cell contains a vector with the four indexes of the MEBI parameters, followed by the indexes of the nodes of the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"mesh.conecCell = { } ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"then the first two nodes are defined, both with material zero (since nodes dont have material), the first element type (the first entry of the cells of the elements struct), and the first entry of the cells of the boundary conditions struct. Finally the node is included.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"mesh.conecCell{ 1, 1 } = [ 0 1 1   1   ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"the following case only differs in the boundary condition and the node number","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"mesh.conecCell{ 2, 1 } = [ 0 1 2   numElements+1 ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"the beam elements are formed by the first material, the second type of element, and no boundary conditions are applied to any element.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"for i=1:numElements,\n  mesh.conecCell{ i+2,1 } = [ 1 2 0  i i+1 ] ;\nend","category":"page"},{"location":"examples/cantileverBeam/#analysisSettings","page":"Cantilever Beam","title":"analysisSettings","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"analysisSettings               = struct() ;\nanalysisSettings.methodName    = 'newtonRaphson' ;\nanalysisSettings.deltaT        =   0.1  ;\nanalysisSettings.finalTime      =   1    ;\nanalysisSettings.stopTolDeltau =   1e-6 ;\nanalysisSettings.stopTolForces =   1e-6 ;\nanalysisSettings.stopTolIts    =   10   ;","category":"page"},{"location":"examples/cantileverBeam/#otherParams","page":"Cantilever Beam","title":"otherParams","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"otherParams             = struct();\notherParams.problemName = 'uniformCurvatureCantilever';\notherParams.controlDofs = [ numElements+1  4 ] ;\notherParams.plots_format = 'vtk' ;","category":"page"},{"location":"examples/cantileverBeam/#Analysis-case-1:-NR-with-Rotated-Eng-Strain","page":"Cantilever Beam","title":"Analysis case 1: NR with Rotated Eng Strain","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"In the first case ONSAS is run and the solution at the dof (angle of node B) of interest is stored:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"the control dof to verificate the solution is the node angle B, this corresponds to the following dof number:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"angleControlDof      = (numElements+1)*6 - 2;\ncontrolDispsNREngRot =  -matUs(angleControlDof,:) ;\nloadFactorsNREngRot  =  loadFactorsMat(:,2) ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"and the analytical value of the load factors is computed","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"analyticLoadFactorsNREngRot = @(w) E * Iy * w / l ;","category":"page"},{"location":"examples/cantileverBeam/#Verification","page":"Cantilever Beam","title":"Verification","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"verifBoolean = norm( analyticLoadFactorsNREngRot( controlDispsNREngRot) ...\n                     - loadFactorsNREngRot' )  ...\n                    < ( norm( analyticLoadFactorsNREngRot( controlDispsNREngRot) ) * 1e-4 ) ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"lw = 2.0 ; ms = 11 ; plotfontsize = 22 ;\nfigure\nplot( controlDispsNREngRot, analyticLoadFactorsNREngRot( controlDispsNREngRot) ,'b-x' , 'linewidth', lw,'markersize',ms )\nhold on, grid on\nplot( controlDispsNREngRot, loadFactorsNREngRot, 'k-o' , 'linewidth', lw,'markersize',ms )\nlabx = xlabel('Displacement');   laby = ylabel('$\\lambda$') ;\nlegend('analytic','NR-RotEng','location','North')\nset(gca, 'linewidth', 1.2, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\nprint('output/verifCantileverBeam.png','-dpng')","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"<img src=\"../../assets/verifCantileverBeam.png\" alt=\"plot check\" width=\"500\"/>","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"verifBoolean = norm( analyticLoadFactorsNREngRot( controlDispsNREngRot) - loadFactorsNREngRot' )  < ( norm( analyticLoadFactorsNREngRot( controlDispsNREngRot) ) * 1e-4 ) ;","category":"page"},{"location":"examples/simplePropeller/#Simple-Propeller-example","page":"Propeller model","title":"Simple Propeller example","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"In this example a simple propeller problem, inspired in an example this article, is considered.","category":"page"},{"location":"examples/simplePropeller/#Problem-definition","page":"Propeller model","title":"Problem definition","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The propeller has three blades with circular cross section and a uniform constant fluid flow is assumed as shown in the figure. Only lift is considered.","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"<img src=\"../../assets/diagprop.png\" alt=\"plot check\" width=\"600\"/>","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The wind velocity is assumed constant and uniform, given by the function windVel.m with one argument (time), located in the same folder. Then the fluid velocity is computed as:","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"va = feval('windVel', 0,0) ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The density and kinematic viscosity are set: ","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"rhoA = 1.225 ; nuA = 1.6e-5 ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The blades are considered to have only lift, with a lift coefficient given by the function liftCoef.m placed in the same folder.","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"c_l = feval('liftCoef', 0) ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The material parameters of the blades correspond to steel with Young modulus, Poisson coefficient and density given by:","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"E = 210e9 ;  nu = 0.3 ; rho = 6000 ; ","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"and the geometric parameters of the blades for length and diameter are set as:","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"l = 3 ; d = 0.1;","category":"page"},{"location":"examples/simplePropeller/#Analytical-solution","page":"Propeller model","title":"Analytical solution","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"Since only lift is considered, an analytical solution can be computed. The the lift load per unit of length is obtained as: ","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"fl = 1 / 2 * c_l * rhoA * norm(va)^2 * d ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"the total moment M_x in node 1 is given by the sum of the moments for the three blades: ","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"moment1x = 3 * fl * l * l / 2 ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"and then the angular moment is:","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"bladeMass = rho * l * pi * d ^2 /4 ; \nJrho =  3 * 1/3 * bladeMass  * l^2 ; ","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"Then, integrating, the angle theta_x can be obtained as a function of time.","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"angleXnode1 = @(t)  moment1x / Jrho / 2 * t .^ 2 ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"If the blades are considered stiff enough and only lift is considered, this rigid-rotation solution can be used to verify the numerical solution. ","category":"page"},{"location":"examples/simplePropeller/#Numerical-solution","page":"Propeller model","title":"Numerical solution","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"Set the material parameters:","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"materials             = struct() ;\nmaterials.modelName   = 'elastic-rotEngStr' ;\nmaterials.modelParams = [ E nu ]        ;\nmaterials.density     = rho             ;","category":"page"},{"location":"examples/simplePropeller/#elements","page":"Propeller model","title":"elements","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The elements are given by: nodes","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"elements             = struct() ;\nelements(1).elemType = 'node'  ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"frame elements for modelling the blades","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"elements(2).elemType = 'frame' ;\nelements(2).elemCrossSecParams = {'circle' ; d };\nelements(2).massMatType =  'consistent'        ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"with the definition of the aerodynamic forces","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"elements(2).aeroCoefFunctions = {@(beta,Re) 0, 'liftCoef', @(beta,Re) 0};","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"and a auxiliar truss element for the pole","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"elements(3).elemType = 'truss' ;\nelements(3).elemCrossSecParams = {'circle' ; 1.5*d };\nelements(3).massMatType =  'lumped'        ;","category":"page"},{"location":"examples/simplePropeller/#boundary-Conditions","page":"Propeller model","title":"boundary Conditions","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The only boundary condition is the one of the center node, with all the dofs fixed except for the rotation theta_x","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"boundaryConditions             = struct() ;\nboundaryConds(1).imposDispDofs = [ 1 3 4 5 6 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/simplePropeller/#mesh","page":"Propeller model","title":"mesh","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The mesh is defined","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"mesh             = struct() ;\nmesh.nodesCoords = [ 0        0              0            ; ...\n                     0  l*sin( pi )        l*cos( pi )    ; ...\n                     0  l*sin( pi/3  )     l*cos( pi/3 )  ; ... \n                     0  l*sin( 4*pi/3 )   -l*cos( 4*pi/3 ); ...\n                     -d*.75 0 d ; ...\n                     -d*.75 0 -l*1.5 ] ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"And a simple connectivity is required since only one frame element is used for each blade","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"mesh.conecCell         = { } ;\nmesh.conecCell{ 1, 1 } = [ 0 1 1   1   ] ;\nmesh.conecCell{ 2, 1 } = [ 1 2 0   1 2 ] ;\nmesh.conecCell{ 3, 1 } = [ 1 2 0   1 3 ] ;\nmesh.conecCell{ 4, 1 } = [ 1 2 0   1 4 ] ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"These are auxiliar elements (nodes and truss) used to model the pole","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"mesh.conecCell{ 5, 1 } = [ 0 1 1   5 ] ;\nmesh.conecCell{ 6, 1 } = [ 0 1 1   6 ] ;\nmesh.conecCell{ 7, 1 } = [ 1 3 0   5 6 ] ;","category":"page"},{"location":"examples/simplePropeller/#initial-Conditions","page":"Propeller model","title":"initial Conditions","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"homogeneous initial conditions are considered, then an empty struct is set:","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"initialConds = struct() ;","category":"page"},{"location":"examples/simplePropeller/#analysisSettings","page":"Propeller model","title":"analysisSettings","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The analysis settings are set","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"analysisSettings                        = struct() ;\nanalysisSettings.finalTime              =   400     ;\nanalysisSettings.deltaT                 =   5       ;\nanalysisSettings.methodName             = 'alphaHHT';\nanalysisSettings.stopTolIts             =   50      ;\nanalysisSettings.geometricNonLinearAero = true      ;\nanalysisSettings.stopTolDeltau          =   0       ;\nanalysisSettings.stopTolForces          =   1e-5    ;\nanalysisSettings.fluidProps = { rhoA ; nuA ; 'windVel' } ;","category":"page"},{"location":"examples/simplePropeller/#otherParams","page":"Propeller model","title":"otherParams","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"otherParams.problemName =  'simplePropeller' ;\notherParams.plots_format = 'vtk' ;","category":"page"},{"location":"examples/simplePropeller/#Run-ONSAS","page":"Propeller model","title":"Run ONSAS","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"[ matUs, ~ ] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ; ","category":"page"},{"location":"examples/simplePropeller/#Verification","page":"Propeller model","title":"Verification","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"numerical time vector is given by:","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"timeVec = linspace(0, analysisSettings.finalTime, size(matUs, 2) ) ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"numerical rotation is obtained from the ONSAS matUs:","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"dofAngleXnode1 = 2 ;\nangleXnode1Numeric = -matUs(dofAngleXnode1,:) ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The analytic rotation is:","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"angleXnode1Analytic = angleXnode1(timeVec) ;","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"and the norm of the difference is computed and the test is verified","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"verifBoolean = norm( angleXnode1Numeric - angleXnode1Analytic )  ...\n                    < ( norm( angleXnode1Analytic ) * 5e-2 ) ;","category":"page"},{"location":"examples/simplePropeller/#Plots","page":"Propeller model","title":"Plots","text":"","category":"section"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"lw = 2.0 ; ms = 10; plotfontsize = 22 ; spanPlotTime = 2 ;\nfig1 = figure ;\nplot( timeVec(1:spanPlotTime:end), angleXnode1Analytic(1:spanPlotTime:end) ,'b-x' , 'linewidth', lw,'markersize',ms )\nhold on, grid on\nplot( timeVec(1:spanPlotTime:end), angleXnode1Numeric(1:spanPlotTime:end), 'ko' , 'linewidth', lw,'markersize',ms )\nlabx = xlabel('time(s)');   laby = ylabel('\\theta_x node 1') ;\nlegend('analytic','numeric', 'location','North')\nset(gca, 'linewidth', 1.2, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\ntitle('simple propeller test')\nif length(getenv('TESTS_RUN')) > 0 && strcmp( getenv('TESTS_RUN'), 'yes')\n  fprintf('\\ngenerating output png for docs.\\n')\n  print(fig1, 'output/verifPropeller.png','-dpng')\nelse\n  fprintf('\\n === NOT in docs workflow. ===\\n')\nend","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"<img src=\"../../assets/generated/verifPropeller.png\" alt=\"plot check\" width=\"500\"/>","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"The obtained simulation is: ","category":"page"},{"location":"examples/simplePropeller/","page":"Propeller model","title":"Propeller model","text":"<img src=\"https://github.com/ONSAS/ONSAS/blob/master/docs/src/assets/propeller.gif?raw=true\" alt=\"propeller animation\">","category":"page"},{"location":"examples/staticVonMisesTruss/#Static-Von-Mises-Truss-example","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss example","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"(Image: Octave script)","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"In this example the Static Von Mises Truss problem and its resolution using ONSAS are described. The aim of this example is to verify the implementations of the Newton-Raphson and Newton-Raphson-Arc-Length methods by comparing the results provided with the analytic solutions.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The structural model is formed by two truss elements with length L as it is shown in the figure, with nodes 1 and 3 fixed, and node 2 submitted to a nodal load P and constrained to move only in the x-z plane.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"<img src=\"../../assets/vonMisesTruss.svg\" alt=\"von-mises truss structure diagram\" width=\"500\"/>","category":"page"},{"location":"examples/staticVonMisesTruss/#Analytic-solutions","page":"Static Von-Mises Truss","title":"Analytic solutions","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The solutions for the nonlinear cases are developed in section 2.3 of (Bazzano and Pérez Zerpa, 2017). The expressions obtained for different strain measures are:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Rotated-Engineering: P = dfracEA_o(z_2+w)left(sqrt(w+z_2)^2+x_2^2-l_oright)l_osqrt(w+z_2)^2+x_2^2\nSVK: P = dfracEA_o (z_2+w)left( 2 z_2 w + w^2 right)  2 l_o^3 ","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"where x_2 and z_2 are the coordinates of node 2 in the reference configuration and w is the vertical displacement in the z direction.","category":"page"},{"location":"examples/staticVonMisesTruss/#Numerical-solutions","page":"Static Von-Mises Truss","title":"Numerical solutions","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"First some scalar parameters are defined and computed","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"% scalar parameters\nE = 210e9  ; nu = 0 ;\nA = 2.5e-3 ; ang1 = 65 ; L = 2 ; \n% x and z coordinates of node 2\nx2 = cos( ang1*pi/180 ) * L ;\nz2 = sin( ang1*pi/180 ) * L ;","category":"page"},{"location":"examples/staticVonMisesTruss/#MEB-parameters","page":"Static Von-Mises Truss","title":"MEB parameters","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The modelling of the structure begins with the definition of the Material-Element-BoundaryConditions (MEB) parameters.","category":"page"},{"location":"examples/staticVonMisesTruss/#materials","page":"Static Von-Mises Truss","title":"materials","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The materials struct is initialized as empty.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"materials                 = {} ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Since for each model both bars are formed by the same material only one materials struct is defined. The constitutive behavior considered in the first analysis case is an elastic behavior for the Rotated Engineering strain, then:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"materials.modelName  = 'elastic-rotEngStr' ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and in the field modelParams a vector with the parameters of the Engineering Strain model is set","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"materials.modelParams = [ E nu ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"which in the case of this material model are the Young modulus and the Poisson ratio.  The field density is not set, then the default rho = 0 value is considered by ONSAS.","category":"page"},{"location":"examples/staticVonMisesTruss/#elements","page":"Static Von-Mises Truss","title":"elements","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The elements struct is initialized as empty","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"elements             = {} ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Two different types of elements are required to create the model: node and truss, thus, the elements struct will have two entries. The type of the first entry is","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"elements(1).elemType = 'node' ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the second entry is","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"elements(2).elemType = 'truss';","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"for the geometries, the node has no geometry to assign, and the truss elements will be set as the native circle cross-section, then the elemCrossSecParams field is:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"elements(2).elemCrossSecParams = { 'circle' , sqrt(A*4/pi) } ;","category":"page"},{"location":"examples/staticVonMisesTruss/#boundaryConds","page":"Static Von-Mises Truss","title":"boundaryConds","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The elements are submitted to two different BoundaryConditions, then the struct boundaryConds will have length two.  The nodes 1 and 3 are fixed, without loads applied (this is the first BC), and node 2 has a constraint in displacement and an applied load (second BC).  For the displacements, the first BC corresponds to a xyz-fixed displacement,","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"boundaryConds                  = {} ;\nboundaryConds(1).imposDispDofs = [ 1 3 5 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the second BC corresponds to a zero displacement only in the y direction.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"boundaryConds(2).imposDispDofs =  3 ;\nboundaryConds(2).imposDispVals =  0 ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Regarding the loads, the second BC is set so that the final load factor is 3 cdot 10^8 at 1 second. The default zero density is used, then no inertial effects are considered.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"boundaryConds(2).loadsCoordSys = 'global'         ;\nboundaryConds(2).loadsTimeFact = @(t) 3.0e8*t     ;\nboundaryConds(2).loadsBaseVals = [ 0 0 0 0 -1 0 ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/#mesh-parameters","page":"Static Von-Mises Truss","title":"mesh parameters","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The coordinates of the nodes of the mesh are given by the matrix:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh             = {} ;\nmesh.nodesCoords = [   0  0   0 ; ...\n                      x2  0  z2 ; ...\n                    2*x2  0   0 ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"where the columns 1,2 and 3 correspond to x, y and z coordinates, respectively, and the row i-th corresponds to the coordinates of node i.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The connectivity is introduced using the conecCell cell. Each entry of the cell (indexed using {}) contains a vector with the four indexes of the MEBI parameters, followed by the indexes of the nodes of the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell = cell(5,1) ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Then the entry of node 1 is introduced:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell{ 1, 1 } = [ 0 1 1   1   ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"the first MEB parameter (Material) is set as zero (since nodes dont have material). The second parameter corresponds to the Element, and a 1 is set since node is the first entry of the  elements.elemType cell. For the BC index, we consider that node 1 is fixed, then the first index of the boundaryConds struct is used. Finally, at the end of the vector the number of the node is included (1).  A similar approach is used for node 3,","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell{ 2, 1 } = [ 0 1 1  3   ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and for node 2 only the boundary condition is changed.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell{ 3, 1 } = [ 0 1 2  2   ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Regarding the truss elements, the first material is considered, the second type of element, and no boundary conditions are applied.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell{ 4, 1 } = [ 1 2 0   1 2 ] ;\nmesh.conecCell{ 5, 1 } = [ 1 2 0   2 3 ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/#initial-Conditions","page":"Static Von-Mises Truss","title":"initial Conditions","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"homogeneous initial conditions are considered, then an empty cell is set:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"initialConds = {} ;","category":"page"},{"location":"examples/staticVonMisesTruss/#analysisSettings","page":"Static Von-Mises Truss","title":"analysisSettings","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The method used in the analysis is the Newton-Raphson, then the field methodName must be introduced as:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"analysisSettings               = {};\nanalysisSettings.methodName    = 'newtonRaphson' ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the following parameters correspond to the iterative numerical analysis settings","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"analysisSettings.deltaT        =   0.1  ;\nanalysisSettings.finalTime     =   1    ;\nanalysisSettings.stopTolDeltau =   1e-8 ;\nanalysisSettings.stopTolForces =   1e-8 ;\nanalysisSettings.stopTolIts    =   15   ;","category":"page"},{"location":"examples/staticVonMisesTruss/#otherParams","page":"Static Von-Mises Truss","title":"otherParams","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"otherParams              = {};\notherParams.problemName  = 'staticVonMisesTruss_NR_RotEng';\notherParams.plots_format = 'vtk' ;\notherParams.plots_deltaTs_separation = 2 ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Analysis-case-1:-Newton-Raphson-with-Rotated-Eng-Strain","page":"Static Von-Mises Truss","title":"Analysis case 1: Newton-Raphson with Rotated Eng Strain","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"In the first case ONSAS is run and the solution at the dof of interest is stored.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"[matUs, loadFactorsMat ] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\ncontrolDispsNREngRot =  -matUs(11,:) ;\nloadFactorsNREngRot  =  loadFactorsMat(:,2) ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Analysis-case-2:-Newton-Raphson-with-linear-elastic-behavior","page":"Static Von-Mises Truss","title":"Analysis case 2: Newton-Raphson with linear elastic behavior","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"In this case a linear elastic behavior is assumed. Then the material modelName is overwritten","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"materials.modelName = 'elastic-linear' ;\notherParams.problemName  = 'staticVonMisesTruss_elastic-linear';\nanalysisSettings.finalTime  =   1.5    ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the analysis is run again","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"the displacements are extracted","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"controlDispsNRlinearElastic =  -matUs(11,:) ;\nloadFactorsNRlinearElastic  =  loadFactorsMat(:,2) ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the analytic values of the load factor are computed, as well as its difference with the numerical solution","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"analyticLoadFactorsNREngRot = @(w) -2 * E*A* ...\n     ( (  (z2+(-w)).^2 + x2^2 - L^2 ) ./ (L * ( L + sqrt((z2+(-w)).^2 + x2^2) )) ) ...\n     .*  (z2+(-w))                    ./ ( sqrt((z2+(-w)).^2 + x2^2) )  ;\ndifLoadEngRot = analyticLoadFactorsNREngRot( controlDispsNREngRot)' - loadFactorsNREngRot ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Analysis-case-3:-NR-with-Green-Strain","page":"Static Von-Mises Truss","title":"Analysis case 3: NR with Green Strain","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"In order to perform a SVK case analysis, the material is changed and the problemName is also updated","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"otherParams.problemName  = 'staticVonMisesTruss_NR_Green';\nmaterials.modelName      = 'elastic-SVK' ;\nanalysisSettings.finalTime =   1.0    ;\nlambda = E*nu/((1+nu)*(1-2*nu)) ; mu = E/(2*(1+nu)) ;\nmaterials.modelParams = [ lambda mu ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"the load history is also changed","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"boundaryConds(2).loadsTimeFact = @(t) 1.5e8*t ;\n%boundaryConds(2).userLoadsFilename = 'myVMLoadFunc' ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the analysis is run","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the displacements are extracted","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"controlDispsNRGreen =  -matUs(11,:) ;\nloadFactorsNRGreen  =  loadFactorsMat(:,2) ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"the analytic solution is computed","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"analyticLoadFactorsGreen = @(w) - 2 * E*A * ( ( z2 + (-w) ) .* ( 2*z2*(-w) + w.^2 ) ) ./ ( 2.0 * L^3 )  ;\ndifLoadGreen = analyticLoadFactorsGreen( controlDispsNRGreen )' - loadFactorsNRGreen ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Analysis-case-4:-NR-AL-with-Green-Strain","page":"Static Von-Mises Truss","title":"Analysis case 4: NR-AL with Green Strain","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"elements(2).elemCrossSecParams{1,1} = 'rectangle' ;\nelements(2).elemCrossSecParams{2,1} = [ sqrt(A) sqrt(A)] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The same loading conidition as before is used, but given by a user load function. The argument set in this case is:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"In this case, the numerical method is changed for newtonRaphson arc length.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"otherParams.problemName       = 'staticVonMisesTruss_NRAL_Green' ;\nanalysisSettings.methodName   = 'arcLength'                      ;\nanalysisSettings.finalTime    = 1                               ;\nanalysisSettings.incremArcLen = 0.15                             ;\nanalysisSettings.iniDeltaLamb = boundaryConds(2).loadsTimeFact(.2)/100 ;\nanalysisSettings.posVariableLoadBC = 2 ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\ncontrolDispsNRALGreen =  -matUs(11,:) ;\nloadFactorsNRALGreen  =  loadFactorsMat(:,2) ;\nanalyticLoadFactorsNRALGreen = analyticLoadFactorsGreen(controlDispsNRALGreen);\ndifLoadGreenNRAL = analyticLoadFactorsNRALGreen' - loadFactorsNRALGreen ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Analysis-case-4:-NR-AL-Jirasek-with-Green-Strain","page":"Static Von-Mises Truss","title":"Analysis case 4: NR-AL Jirasek with Green Strain","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"otherParams.problemName       = 'staticVonMisesTruss_NRAL_Jirasek_Green' ;\nanalysisSettings.methodName   = 'arcLength'                      ;\nanalysisSettings.finalTime    = 1                               ;\nanalysisSettings.incremArcLen = 0.15                             ;\nanalysisSettings.iniDeltaLamb = boundaryConds(2).loadsTimeFact(.2)/100 ;\nanalysisSettings.posVariableLoadBC = 2 ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Jirasek variant - Dominant dof  Extracted from Jirásek & Bazant book Inelastic Analysis of Structures, 2002  Chapter 22, Numerical Methods in Plasticity  Sets arcLengthFlag = 2 to secifiy Jirasek constraint method.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"global arcLengthFlag\narcLengthFlag = 2 ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The dominant dof selected for this problem correpsonds with the displacement uz of node 2.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"global dominantDofs\ndominantDofs = 11 ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The scaling projection for the Jirasek method and for this selected dof is set as follows.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"global scalingProjection\nscalingProjection = -1 ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\ncontrolDispsNRAL_Jirasek_Green =  -matUs(11,:) ;\nloadFactorsNRAL_Jirasek_Green  =  loadFactorsMat(:,2) ;\nanalyticLoadFactorsNRAL_Jirasek_Green = analyticLoadFactorsGreen(controlDispsNRAL_Jirasek_Green);\ndifLoadGreenNRAL_Jirasek = analyticLoadFactorsNRAL_Jirasek_Green' - loadFactorsNRAL_Jirasek_Green ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Verification","page":"Static Von-Mises Truss","title":"Verification","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"the numerical resolution is validated for both strain measures.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"verifBoolean =  ( ( norm( difLoadEngRot            ) / norm( loadFactorsNREngRot           ) ) <  1e-4 ) ...\n             && ( ( norm( difLoadGreen             ) / norm( loadFactorsNRGreen            ) ) <  1e-4 ) ...\n             && ( ( norm( difLoadGreenNRAL         ) / norm( loadFactorsNRALGreen          ) ) <  1e-4 ) ...\n             && ( ( norm( difLoadGreenNRAL_Jirasek ) / norm( loadFactorsNRAL_Jirasek_Green ) ) <  1e-4 ) ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Plots","page":"Static Von-Mises Truss","title":"Plots","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and solutions are plotted.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"lw = 2.0 ; ms = 11 ; plotfontsize = 18 ;\nfigure\nplot( controlDispsNREngRot, analyticLoadFactorsNREngRot( controlDispsNREngRot) ,'b-x' , 'linewidth', lw,'markersize',ms )\nhold on, grid on\nplot( controlDispsNREngRot, loadFactorsNREngRot, 'k-o' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsNRALGreen, analyticLoadFactorsGreen( controlDispsNRALGreen ), 'g-x' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsNRGreen, loadFactorsNRGreen, 'r-s' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsNRALGreen, loadFactorsNRALGreen, 'c-^' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsNRAL_Jirasek_Green, loadFactorsNRAL_Jirasek_Green, 'y-*' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsNRlinearElastic, loadFactorsNRlinearElastic, 'm-+' , 'linewidth', lw,'markersize',ms )\nlabx = xlabel('Displacement w(t)');   laby = ylabel('\\lambda(t)') ;\nlegend( 'analytic-RotEng', 'NR-RotEng','analytic-Green', 'NR-Green','NRAL-Green', 'NRAL-Jirasek-Green','elastic-linear', 'location','northoutside')\nset(gca, 'linewidth', 1.0, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\nprint('output/vonMisesTrussCheck.png','-dpng')","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"<img src=\"../../assets/generated/vonMisesTrussCheck.png\" alt=\"plot check\" width=\"500\"/>","category":"page"},{"location":"examples/dragBeamReconfiguration/#Reconfiguration-cantilever-beam-example","page":"Reconfiguration beam","title":"Reconfiguration cantilever beam example","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"(Image: Octave script)","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"In this tutorial, a cantilever beam submitted to a flow producing drag forces is considered. The main goal is to validate the drag forces computation considering reconfiguration in a problem with large displacements. The example is based on one of the problems considered in this reference, where a reference solution is presented and validated with experimental data. The reference solution was generated with the code publicly available in this repository","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The problem consists in a cantilever beam submitted to a fluid flow with uniform velocity v_a(x,t) = v_a(t) c_2, as shown int he Figure bellow. The beam is clamped on the boundary at x=0 m, and the span length is L. The cross-section of the beam is circular with diameter d. For the material of the beam a linear elastic isotropic model is considered, with Young modulus E density rho.","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"<img src=\"../../assets/dragBeamReconfiguration/ilus.svg\" alt=\"general sketch\" width=\"450\"/>","category":"page"},{"location":"examples/dragBeamReconfiguration/#Dimensionless-analysis","page":"Reconfiguration beam","title":"Dimensionless analysis","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The problem can be studied through the following dimensionless numbers: ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":" c_y = fracrho_f L^3 v_a^216 E I_zz qquad mathcalR = fracFfrac12rho_f L d c_d v_a^2","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"where  F is the global drag force towards c_2, c_y is the Cauchy number that describes the ratio between the stiffness of the beam and the flow load and the reconfiguration number mathcalR reflects the geometric nonlinear effect by dividing the drag of the flexible beam to that of a rigid one of the same geometry","category":"page"},{"location":"examples/dragBeamReconfiguration/#Numerical-solution","page":"Reconfiguration beam","title":"Numerical solution","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Before defining the structs, the workspace is cleaned and the ONSAS directory is added:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"close all, if ~strcmp( getenv('TESTS_RUN'), 'yes'), clear all, end\naddpath( genpath( [ pwd '/../../src'] ) ); ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The problem parameters are loaded:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"[L, d, Izz, E, nu, rhoS, rhoF, nuF, ~, NR, cycd_vec, uydot_vec ] = loadParametersCirc();","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"where rho_f and rho_s are the fluid and solid densities respectively, nu is the fluid kinematic viscosity, and  NR is the number of load steps (or velocity cases solved):","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The number of elements employed to discretize the beam is:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"numElements = 10 ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#MEBI-parameters","page":"Reconfiguration beam","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/#materials","page":"Reconfiguration beam","title":"materials","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Since the example contains only one material and co-rotational strain element so then materials struct is:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"materials                 = struct()         ;\nmaterials.modelName  = 'elastic-rotEngStr' ;\nmaterials.modelParams = [ E nu ]         ;\nmaterials.density         = rhoS             ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#elements","page":"Reconfiguration beam","title":"elements","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Two different types of elements are considered, node and frames. The nodes will be assigned in the first entry (index 1) and the beam at the index 2. The elemType field is then:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"elements(1).elemType = 'node'  ;\nelements(2).elemType = 'frame' ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"for the geometries, the node has not geometry to assign (empty array), and frame elements will be set as a circular section with d diameter.","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"elements(2).elemCrossSecParams{1,1} = 'circle' ;\nelements(2).elemCrossSecParams{2,1} = [ d ]    ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"where the aerodynamic coefficents and the chord vector are set by default for 'circle' cross sections type. For the validation case a constant drag coefficients c_d =1.2\" is used, this is defined in the 'dragCircular' function:   ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"elements(2).aeroCoefFunctions = {'dragCircular',[],[]} ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The geometrical non-linear effects and the aerodynamic stiffness matrix are considered in this case to compute the aerodynamic force vector:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"elements(2).aeroNumericalParams = {4, true, true} ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#boundaryConds","page":"Reconfiguration beam","title":"boundaryConds","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Only one welded (6 degrees of freedom are set to zero) boundary condition (BC) is considered:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"boundaryConds = struct() ;\nboundaryConds(1).imposDispDofs = [ 1 2 3 4 5 6 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#initial-Conditions","page":"Reconfiguration beam","title":"initial Conditions","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Any non-homogeneous initial condition (IC) are set for this case, then an empty struct is used:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"initialConds = struct() ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#mesh-parameters","page":"Reconfiguration beam","title":"mesh parameters","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The coordinates of the mesh nodes are given by the matrix:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"mesh = struct() ;\nmesh.nodesCoords = [ (0:(numElements))' * L/numElements  zeros(numElements+1,2) ] ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The connectivity is introduced using the conecCell. Each entry of the cell contains a vector with the four indexes of the MEBI parameters, followed by the indexes of nodes that compose the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"mesh.conecCell = { } ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"then the first welded node is defined with material (M) zero since nodes don't have material, the first element (E) type (the first entry of the elements struct), and (B) is the first entry of the the boundaryConds struct. Finally the node is assigned:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"mesh.conecCell{ 1, 1 } = [ 0 1 1   1 ] ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Next the frame elements MEB parameters are set. The frame material is the first material of materials struct, then 1 is assigned. The second entry of the elements struct correspond to the frame element employed, so 2 is set. Finally no BC is required for this element, then 0 is used.  Consecutive nodes build the element so then the mesh.conecCell is:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"for i=1:numElements,\n  mesh.conecCell{ i+1,1 } = [ 1 2 0   i i+1 ] ;\nend","category":"page"},{"location":"examples/dragBeamReconfiguration/#analysisSettings","page":"Reconfiguration beam","title":"analysisSettings","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The fluid properties are set into fluidProps field into analysisSettings struct. In this field the fluid velocity, viscosity and density are defined, This will apply a external fluid loads according to the quasi-steady theory for each element with aerodynamic coefficients fields into the elements struct. The name of the fluid velocity function located on the same example path is introduced as a string 'windVelCircStatic': ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"analysisSettings = struct() ;\nanalysisSettings.fluidProps = {rhoF; nuF; 'windVelCircStatic'} ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"since this problem is static, then a N-R method is employed. The time step deltaT is 1 since the time here is an index in the fluid velocity vector uydot_vec untile the length of this vector NR is reached:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"analysisSettings.deltaT        =   1             ;\nanalysisSettings.finalTime     =   NR            ;\nanalysisSettings.methodName    = 'newtonRaphson' ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Next the maximum number of iterations per load(time) step, the residual force and the displacements tolerances are set to (if null tolerance is set the criterion is not considered): ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"analysisSettings.stopTolDeltau =   0             ;\nanalysisSettings.stopTolForces =   1e-8          ;\nanalysisSettings.stopTolIts    =   50            ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#otherParams","page":"Reconfiguration beam","title":"otherParams","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The name of the problem and vtk format output are selected: ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"otherParams  = struct();\notherParams.problemName = 'staticReconfigurationCircleUserDefinedDrag';\notherParams.plots_format = 'vtk' ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#Case-1:-validation-case-with-constant-c_d-1.2","page":"Reconfiguration beam","title":"Case 1: validation case with constant c_d = 12","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The ONSAS software is executed for the parameters above defined and the displacement solution of each load(time) step is saved in matUsCase1matrix:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The reaction forces at x=0 are stored  in the following vector and declaring a global variable:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"global globalReactionForces\nglobalReactionForces = zeros(6*analysisSettings.finalTime, 1) ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The node index where the reaction forces are computed is:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"global glboalNodeReactionForces\nglboalNodeReactionForces = 1 ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#Numeric-solution","page":"Reconfiguration beam","title":"Numeric solution","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"[matUsCase1] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#Verification","page":"Reconfiguration beam","title":"Verification","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The numerical solution is extracted. First the reference coordinaes","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"xref = mesh.nodesCoords(:,1) ;\nyref = mesh.nodesCoords(:,2) ;\nzref = mesh.nodesCoords(:,3) ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Then the values of R and C_y C_d are computed :","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"numLoadSteps = size(matUsCase1, 2) ;\ntimeVec = linspace(0,analysisSettings.finalTime, numLoadSteps) ;\n% initialize vectors\nCy = zeros(numLoadSteps-1, 1)                 ;\nR  = zeros(numLoadSteps-1, 1)                 ;\nC_d = feval( elements(2).aeroCoefFunctions{1}, 0 , 0) ;\n% fill them\nfor windVelStep = 1:numLoadSteps - 1\n    % Compute dimensionless magnitudes \n    windVel         = feval( analysisSettings.fluidProps{3,:}, 0, timeVec(windVelStep + 1 ) ) ;\n    normWindVel     = norm( windVel )                                                         ;\n    dirWindVel      = windVel / normWindVel                                                   ;\n    Cy(windVelStep) =  1/2 * rhoF * normWindVel^2 * (L)^3 *d / (E*Izz)                        ;\n\n    % numeric drag \n    FReaction = globalReactionForces((windVelStep-1)*6 + 1: windVelStep*6) ;\n    FDragi = FReaction(3)                                                  ;    \n    FDRef  = 1/2 * rhoF * normWindVel^2 * C_d * d * L ;\n    R(windVelStep) =  abs(FDragi)/(FDRef )            ;\n\nend","category":"page"},{"location":"examples/dragBeamReconfiguration/#Gosselin-et.Al-2010-solution","page":"Reconfiguration beam","title":"Gosselin et.Al 2010 solution","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"% resudrag (cycd, R) and def wich contains de deformed configuration for 10^i cycyd values: \nbase_dir='';\nif strcmp( getenv('TESTS_RUN'),'yes') && isfolder('examples'),\n  base_dir=['.' filesep 'examples' filesep 'dragBeamReconfiguration' filesep];\nend\nload( [base_dir 'Gosselin2010_data.mat'], 'def', 'resudrag')","category":"page"},{"location":"examples/dragBeamReconfiguration/#Validation-plots","page":"Reconfiguration beam","title":"Validation plots","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The plot parameters are:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"lw = 4 ; ms = 8 ;\naxislw = 1  ; axisFontSize = 20 ; legendFontSize = 15 ; curveFontSize = 15 ;\nGline = 'k-'; ONSASline = 'bo'  ;  ONSASlineBuiltInDrag = 'rx' ;   \nfolderPathFigs = './output/figs/' ;\nmkdir(folderPathFigs) ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The modified Cauchy number vs R is plotted:  ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"fig1 = figure(1) ;\nloglog(C_d*Cy       , R             , ONSASline , 'linewidth', lw, 'markersize', ms ) ;\nhold on\nloglog(resudrag(:,1), resudrag(:,2) , Gline     , 'linewidth', lw, 'markersize', ms ) ;\n% add legend\nlegend('ONSAS', 'Gosselin2010')\n% set labels legend\nlabx=xlabel(' c_y*c_d ');    laby=ylabel('R');\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','eastOutside' ) ;\n% set fonts\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\ngrid on\nif length(getenv('TESTS_RUN')) > 0 && strcmp( getenv('TESTS_RUN'), 'yes')\n  fprintf('\\ngenerating output png for docs.\\n')\n  figure(1)\n  print('output/RvsCyCd.png','-dpng')\nelse\n  fprintf('\\n === NOT in docs workflow. ===\\n')\nend","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Deformed configurations for different cauchy numbers  ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"fig3 = figure(3) ;\n% plot reference configuration\nplot(xref, yref  , 'k--' , 'linewidth', lw, 'markersize', ms   );\nhold on, grid on\n% add markers for the legend\nplot(0, 0,  ONSASline    , 'linewidth', lw, 'markersize', ms );\nplot(0, 0,  ONSASlineBuiltInDrag    , 'linewidth', lw, 'markersize', ms );\n% plot deformed configurations for different fluid load steps\nfor nr = 1:analysisSettings.finalTime \n  % Numerical deformed coordinates solution\n  xdef = xref + matUsCase1(1:6:end,nr+1) ;\n  ydef = yref + matUsCase1(3:6:end,nr+1) ;\n  zdef = zref + matUsCase1(5:6:end,nr+1) ;\n  thetaXdef = matUsCase1(2:6:end,nr+1)   ;\n  thetaYdef = matUsCase1(4:6:end,nr+1)   ;\n  thetaZdef = matUsCase1(6:6:end,nr+1)   ;\n  % Gosselin deformed coordinates solution\n  xdefG = def(1,:,nr)               ;\n  ydefG = -def(2,:,nr)              ;\n  % Plot \n  plot(xdef ,  ydef,  ONSASline, 'linewidth', lw, 'markersize', ms );\n  plot(xdefG, ydefG,  Gline    , 'linewidth', lw, 'markersize', ms );\nend","category":"page"},{"location":"examples/dragBeamReconfiguration/#Verification-boolean","page":"Reconfiguration beam","title":"Verification boolean","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"% The verification boolean is computed as for the deformed configurations and the cycd curve\n% deformed coordinates dif norm\nvecDifDeform =  [ norm( ydef - ydefG(1:numElements*10:end)') ;...\n                  norm( xdef - xdefG(1:numElements*10:end)') ] ;\n\n% verification boolean deformed \nverifBooleanDef =  vecDifDeform <=  2e-2 * L ;\n% cycd vs R verification boolean is: \nverifBooleanR = abs(R(end) - resudrag(end,2) ) <  5e-3 ;\n% The example verifboolean is:\nverifBoolean = verifBooleanR && all(verifBooleanDef)","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"<img src=\"../../assets/generated/RvsCyCd.png\" alt=\"plot check deformed configurations\" width=\"500\"/>","category":"page"},{"location":"examples/dragBeamReconfiguration/#Case-2:-case-with-drag-coefficient-formula-proposed-in-[this-reference](https://ascelibrary.org/doi/10.1061/%28ASCE%29HY.1943-7900.0000722)","page":"Reconfiguration beam","title":"Case 2: case with drag coefficient formula proposed in this reference","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Once _elemCrossSecParams_ is defined in the elements struct then the drag lift and pitch moment are defined with bluit-in functions. As consequence if we want to use the default drag coefficient the dragCoefFunction field must be set:","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"elements(2).aeroCoefFunctions = {[],[],[]};","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"moreover the drag formulation in this reference is valid with Re  2 x 10^5. Then the final load step, which is equivalent to the index in the velocity vector uydot_vec, is set to 5: ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"analysisSettings.finalTime = NR - 2 ;","category":"page"},{"location":"examples/dragBeamReconfiguration/#otherParams-2","page":"Reconfiguration beam","title":"otherParams","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"The name of the problem and vtk format output are selected: ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"otherParams  = struct();\notherParams.problemName = 'staticReconfigurationCircleBuiltInDrag';","category":"page"},{"location":"examples/dragBeamReconfiguration/#Numeric-solution-2","page":"Reconfiguration beam","title":"Numeric solution","text":"","category":"section"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"[matUsCase2] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"Deformed configurations for different cauchy numbers  ","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"for nr = 1:analysisSettings.finalTime \n  % Numerical deformed coordinates solution\n  xdefCase2 = xref + matUsCase2(1:6:end,nr+1) ;\n  ydefCase2 = yref + matUsCase2(3:6:end,nr+1) ;\n  zdefCase2 = zref + matUsCase2(5:6:end,nr+1) ;\n  thetaXdefCase2 = matUsCase2(2:6:end,nr+1)   ;\n  thetaYdefCase2 = matUsCase2(4:6:end,nr+1)   ;\n  thetaZdefCase2 = matUsCase2(6:6:end,nr+1)   ;\n  % Plot \n  plot(xdefCase2 ,  ydefCase2,  ONSASlineBuiltInDrag, 'linewidth', lw, 'markersize', ms );\nend\n% add legend\nlegend('Gosselin2010(cd = 1.2)', 'ONSAS(cd = 1.2)','ONSAS(Built-in c_d)')\n% add legends and labels\nlabx=xlabel('x [m]');    laby=ylabel('y [m]');\n% set fonts\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','eastOutside' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\n%axis equal\n% save fig\nnamefig3 = strcat(folderPathFigs, 'xy.png') ;\nif length(getenv('TESTS_RUN')) > 0 && strcmp( getenv('TESTS_RUN'), 'yes')\n  fprintf('\\ngenerating output png for docs.\\n')\n  figure(3)\n  print('output/defPlots.png','-dpng')\nelse\n  fprintf('\\n === NOT in docs workflow. ===\\n')\nend","category":"page"},{"location":"examples/dragBeamReconfiguration/","page":"Reconfiguration beam","title":"Reconfiguration beam","text":"<img src=\"../../assets/generated/defPlots.png\" alt=\"plot check deformed configurations\" width=\"500\"/>","category":"page"},{"location":"creatingModels/#Creating-structural-models","page":"Creating Models","title":"Creating structural models","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"The data and properties of each structural model are defined through a set of definitions in a .m script. These properties are stored in struct data structures. The following structs must be defined and provided as input to the ONSAS function in this order:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"materials\nelements\nboundaryConds\ninitialConds\nmesh\nnumericalMethod\notherParams","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"Each struct has its own fields with specific names, used to store each corresponding property or information. Each field is obtained or assigned using structName.fieldName. A description of each struct and its fields follows at next. It is highly recommended to read the current sectiong following one of the examples presented in the documentation. ","category":"page"},{"location":"creatingModels/#The-materials-struct","page":"Creating Models","title":"The materials struct","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"The materials struct contains the information of the material behavior considered for each element.","category":"page"},{"location":"creatingModels/#material.modelName","page":"Creating Models","title":"material.modelName","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"This is field contains a string of the material model used to compute the internal forces of the structure. The models implemented in ONSAS are:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"'elastic-linear': used for linear behavior with small strains and small displacements. The scalar parameters of this model are p_1=E the Young modulus and p_2=nu the Poisson's ratio.\n'elastic-SVK': used for a Saint-Venant-Kirchhoff material where the parameters p_1 and p_2 are the Lamé parameters with the strain-energy density function given by the following equation (where textbfE is the Green-Lagrange strain tensor)","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"Psi( textbfE ) = fracp_12 tr(textbfE)^2 + p_2 tr(textbfE^2)\nquad\np_1 = frac E nu  (1+nu) (1-2nu) \nquad\np_2 = frac E  2 (1+nu) ","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"'elastic-NHC': used for a Neo-Hookean compressible material. The model implemented is given by","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"Psi( textbfC ) = fracp_12 ( tr(textbfC)-3 -2 L( sqrtdet(textbfC) ) ) + fracp_22 left( sqrtdet(textbfC)-1 right)^2\n quad\n p_1 = frac E  2 (1+nu) \n quad\n p_2 = frac E  3 (1-2 nu) ","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"'elastic-rotEngStr': used for 1D elements (truss or frame) under large displacements.\n'elastic-rotLogStr': used for 1D elements (truss) under large displacements.\n'plastic': an ElastoPlastic material with isotropic hardening given by the von mises flow rule for the plane strain element. The parameters are introduced as: REVISAR!! p_1=E , p_2 = K and p_3=sigma_Y0.\n'plastic-rotEngStr': an ElastoPlastic material .\n'plastic-rotLogStr': an ElastoPlastic material .","category":"page"},{"location":"creatingModels/#materials.modelParams","page":"Creating Models","title":"materials.modelParams","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"A cell structure with vectors with the material properties of each material used in the model. The i-th entry of the cell, contains a vector like this:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":" p_1 dots p_n_P ","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"where n_P is the number of parameters of the constitutive model and mathbfp is the vector of constitutive parameters.","category":"page"},{"location":"creatingModels/#material.density","page":"Creating Models","title":"material.density","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"This is a cell with the scalar values of the densities of the materials used in the model.","category":"page"},{"location":"creatingModels/#material.nodalMass","page":"Creating Models","title":"material.nodalMass","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"This fields sets a vector of nodal masses components m_x m_y m_z that is assigned to nodes.","category":"page"},{"location":"creatingModels/#The-elements-struct","page":"Creating Models","title":"The elements struct","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"The elements struct contains the information about the type of finite elements used and their corresponding parameters.","category":"page"},{"location":"creatingModels/#elements.elemType","page":"Creating Models","title":"elements.elemType","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"A cell structure with the string-names of the elements used: node, truss, frame, triangle or tetrahedron. Other auxiliar types such as edge are also available","category":"page"},{"location":"creatingModels/#elements.elemTypeParams","page":"Creating Models","title":"elements.elemTypeParams","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"A cell structure with auxiliar params information, required for some element types:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"triangle vector with parameters, the first parameter is an integer indicating if plane stress (1) or plane strain (2) case is considered.","category":"page"},{"location":"creatingModels/#elements.massMatType","page":"Creating Models","title":"elements.massMatType","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"The massMatType field sets, for frame or truss elements, whether consistent or lumped mass matrix is used for the inertial term in dynamic analyses. The massMatType field should be set as a string variable: 'consistent' or 'lumped',  and if it is not declared then by default the 'lumped' mass matrix is set.","category":"page"},{"location":"creatingModels/#elements.elemCrossSecParams","page":"Creating Models","title":"elements.elemCrossSecParams","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"This is a cell structure with the information of the geometry of the element.","category":"page"},{"location":"creatingModels/#1D-elements","page":"Creating Models","title":"1D elements","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"For truss or frame elements, this cell has two entries, first a string with a name of the type of cross section, and in the second entry a vector of real parameters setting the shape of that section:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":" crossSectionTypeString   crossSectionParam_1 dots crossSectionParam_n  ","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"with n being the number of parameters of the cross section type, and crossSectionTypeString the type of cross section. The possible cross section strings and their corresponding properties are:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"generic  :general sections, where areas and inertias are provided as parameters according to the vector: A  J  I_yy  I_zz  I_rho(11)  I_rho(22)  I_rho(33)   where A is the area, I_ii is the second moment of inertia of the cross-section respect to i direction, J is the polar moment of inertia and I_rho is the inertia tensor.\nrectangle: rectangular sections where thicknesses t_y and t_z are provided as the vector t_y t_z\ncircle : circular sections where diameter is provided.\npipe : circular hollow section where external and internal diameters are provided as first and second entries of the vector of elementCrossSecParams.","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"For edge elements the thickness is expected (for 2D load computations).","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"See the crossSectionProps.m function for more details.","category":"page"},{"location":"creatingModels/#2D-elements","page":"Creating Models","title":"2D elements","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"For 2D elements such as triangle in this field a float number representing the thickness of the element is set.   ","category":"page"},{"location":"creatingModels/#elements.aeroNumericalParams","page":"Creating Models","title":"elements.aeroNumericalParams","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"A cell with the number of Gauss integration points numGauss, the boolean computeStiffnessAeroTangent for computing the aerodynamic stiffness matrix and geometricNonLinearAero to take into account geometric nonlinearities or (reconfiguration).  ","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"  numGauss stiffnessAeroTangent geometricNonLinearAero ","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"where the default cell is {4, false, true}","category":"page"},{"location":"creatingModels/#elements.aeroCoefFunctions","page":"Creating Models","title":"elements.aeroCoefFunctions","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"If a frame aerodynamic analysis is desired, the drag, lift and pitch moment functions should be defined using this field. This field should contain a cell with either the strings of the functions or the definition of anonymous functions for draf lif and pitch moment in that order. Each function must receive as first input the incidence angle and as second the Reynolds number. For some elemCrossSecParams like 'circle' internal built-in functions are set as default thus there is no need to set this field.","category":"page"},{"location":"creatingModels/#elements.chordVector","page":"Creating Models","title":"elements.chordVector","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"A vector with the three coordinates of the aerodynamic chord vector (the system of coordinates considered for this is the local reference system at the undeformed configuration)","category":"page"},{"location":"creatingModels/#The-boundaryConds-struct","page":"Creating Models","title":"The boundaryConds struct","text":"","category":"section"},{"location":"creatingModels/#boundaryConds.loadsCoordSys","page":"Creating Models","title":"boundaryConds.loadsCoordSys","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell containing the coordinates system for the loads applied in each BC, each entry should be a 'global' string or a 'local', or an empty array if no load is applied in that BC setting [].","category":"page"},{"location":"creatingModels/#boundaryConds.loadsTimeFact","page":"Creating Models","title":"boundaryConds.loadsTimeFact","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with the inline function definitions of load factors of the loads applied of an empty array.","category":"page"},{"location":"creatingModels/#boundaryConds.loadsBaseVals","page":"Creating Models","title":"boundaryConds.loadsBaseVals","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with the (row) vector of the components of the load case","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":" f_x   m_x  f_y  m_y  f_z  m_z ","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"where f_i are the components of forces and m_i are the moments. Both forces or moments are considered per unit of length in the case of truss/frame/edge elements, or per unit of area in the case of triangle.","category":"page"},{"location":"creatingModels/#boundaryConds.userLoadsFileName","page":"Creating Models","title":"boundaryConds.userLoadsFileName","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"string with the filename of the .m function file provided by the user that can be used to apply forces not given by time-varying loadFactors. This function file should be placed in the example folder and it must receive two arguments:  t (the time) and UsCell (a cell with: {the current displacement, velocity and acceleration} ). The function should one forces vector with the size of all the degrees of freedom of the problem (in global coordinates).","category":"page"},{"location":"creatingModels/#boundaryConds.imposDispDofs","page":"Creating Models","title":"boundaryConds.imposDispDofs","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with vectors of the local degrees of freedom imposed (integers from 1 to 6)","category":"page"},{"location":"creatingModels/#boundaryConds.imposDispVals","page":"Creating Models","title":"boundaryConds.imposDispVals","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with vectors of the values of displacements imposed.","category":"page"},{"location":"creatingModels/#boundaryConds.springDofs","page":"Creating Models","title":"boundaryConds.springDofs","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"vector with the local degrees of freedom of the node with springs (integers from 1 to 6)","category":"page"},{"location":"creatingModels/#boundaryConds.springVals","page":"Creating Models","title":"boundaryConds.springVals","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"vector with the values of the springs stiffnesses.","category":"page"},{"location":"creatingModels/#The-mesh-struct","page":"Creating Models","title":"The mesh struct","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"The mesh struct contains the finite element mesh information.","category":"page"},{"location":"creatingModels/#mesh.nodesCoords","page":"Creating Models","title":"mesh.nodesCoords","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"matrix with the coordinates of all the nodes of the mesh. The i-th row contains the three coordinates of the node i: x_i   y_i  z_i,","category":"page"},{"location":"creatingModels/#mesh.conecCell","page":"Creating Models","title":"mesh.conecCell","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell array with the elements and node-connectivity information. The i1 entry contains the vector with the MEB (Material, Element, boundaryConds) indexes and the nodes of the i-th element. The structure of the vector at each entry of the cell is:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"  materialInd  elementInd  boundaryCondInd  node_1 dots node_n ","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"where the first three indexes are natural numbers and n is the number of nodes required by the type of element. If no property is assigned the 0 index can be used, for instance, nodes used to introduced loads should be defined with materialIndex = 0.","category":"page"},{"location":"creatingModels/#The-initialConds-struct","page":"Creating Models","title":"The initialConds struct","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"If initial conditions are homogeneous, then an empty struct should be defined using initialConds = struct() ;. Otherwise the fields that can be set are:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"initialConds.U: a vector of the displacements at time 0.\ninitialConds.Udot: a vector of the velocities  at time 0.\ninitialConds.Udotdot: a vector of the accelerations at time 0.","category":"page"},{"location":"creatingModels/#The-analysisSettings-struct","page":"Creating Models","title":"The analysisSettings struct","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"This struct contains the parameters required to apply the numerical method for the resolution of the nonlinear equations:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"methodName: string with the name of the method used: 'newtonRaphson','arcLength','newmark','alphaHHT'.\nstopTolDeltau: float with tolerance for convergence in relative norm of displacements increment\nstopTolForces: float with tolerance for convergence in relative norm of residual loads\nstopTolIts: integer with maximum number of iterations per time step\ndeltaT: time step\nfinalTime: final time of simulation\nincremArcLen: with of cylinder for arcLength method\ndeltaNM: delta parameter of newmark method. If this parameter is not declared then the classic Trapezoidal Newmark delta = 12 is set.\nalphaNM: alpha parameter of newmark method. If this parameter is not declared then the classic  Trapezoidal Newmark alpha = 14 is set.\nalphaHHT: alpha parameter of alpha-HHT method. If this parameter is not declared then alpha=-005 is set.\nposVariableLoadBC: (parameter used by the arcLength method) this parameter is an integer with the entry of the boundaryConds cell corresponding with the loads vector affected by the load factor\niniDeltaLamb: (parameter used by the arcLength method) this parameter sets the initial increment for the load factor lambda.","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"another additional optional parameters are:","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"booleanSelfWeight: a boolean indicating if self weight loads are considered or not. The loads are computed using the density of the material and in the -z global direction.\niniMatUs: a matrix with initial solutions for each time step.\naddedMassBoolean: if this parameter is set 'true' the fluid density is considered in the intertial forces term for frame elements.","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"the aerodynamic-frame element parameters set are","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"fluidProps: is a row cell with the density rho_f, viscosity nu_f and the function with the fluid velocity  ","category":"page"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":" rho_f  nu_f  fluidVelocity","category":"page"},{"location":"creatingModels/#The-otherParams-struct","page":"Creating Models","title":"The otherParams struct","text":"","category":"section"},{"location":"creatingModels/","page":"Creating Models","title":"Creating Models","text":"problemName: string with the name of the problem, to be used in outputs.\nplots_format: string indicating the format of the output. Use 'vtk' for vtk output. default: no output.\nplots_deltaTs_separation: integer number N such that the time between vtk plots is N x deltaT.\ncontrolDofs: matrix with information of the degrees of freedom to compute and control. Each row should contain this form: [ node localdof ].\nstoreBoolean: boolean to store the results of the current iteration such as the displacements, tangent matrices, normal forces and stresses. [default: 1]\nnodalDispDamping: scalar value of a linear viscous damping factor applied for all the displacement degrees of freedom [default: 0]","category":"page"},{"location":"examples/uniaxialCompression/#Uniaxial-Compression-example","page":"Uniaxial compression","title":"Uniaxial Compression example","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"(Image: Octave script)","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"In this tutorial example an hyperelastic solid is submitted to a uniaxial compression test. The geometry and tension applied are shown in the figure, where the Lx, Ly and Lz are the dimensions. A nominal compression tension p is applied on the face x=Lx, as a nominal tension. Non-friction contact boundary conditions are considered on faces x=0, y=0 and z=0.","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"<img src=\"../../assets/uniaxialCompression/diagramSolidUniaxialCompression.svg\" alt=\"structure diagram\" width=\"500\"/>","category":"page"},{"location":"examples/uniaxialCompression/#Analytic-solution","page":"Uniaxial compression","title":"Analytic solution","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"Let us consider that a uniform deformation is produced, with a nonzero axial stretch alpha and nonzero transversal stretch beta. The corresponding deformation gradient and Green-Lagrange strain tensors are given by:","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"textbfF = left beginmatrix alpha  0  0  0  beta  0  0  0  beta endmatrix right\nqquad\ntextbfE = frac12(textbfC - textbfI) = left  beginmatrix frac12 left(alpha^2 -1right)  0  0  0   frac12 left(beta^2 -1right)  0  0  0   frac12 left(beta^2 -1right) endmatrix\nright","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"where alpha = (1+u_xL_x) and beta = (1+u_yL_y), with u_x and u_y the linear displacements at X=(L_xL_yL_z=L_y).","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"The neo-Hookean elastic strain energy potential Psi is given by:","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"Psi(mathbfC=textbfF^TtextbfF) = fracmu2(I_1 -2ln(J)) + fracK2 ( J -1 )^2","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"where I_1 = mathrmtr(mathbfC) is the first invariant, J = sqrtdet(mathbfC) and K and mu are the bulk and shear material parameters, respectively.","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"The second Piola-Kirchhoff tensor is given by:","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"textbfS( mathbfC ) = mu (textbfI - mathbfC^-1) + K (J(J-1)mathbfC^-1) ","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"then, on the one hand, using the relation textbfP=textbfFtextbfS, the P_xx nominal stress component is obtained and equaled to the applied compression:","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"P_xx( muK ) =\n alpha left( \n    mu -  fracmualpha^2 + fracKbeta^2alpha (beta^2 alpha -1) \n right) = - p","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"and on the other hand, the P_yy and P_zz components are obtained and equaled to zero:","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"P_yy( muK ) =\n beta left( \n    mu -  fracmubeta^2 + K (alpha^2beta^2 - alpha) \n right) = 0","category":"page"},{"location":"examples/uniaxialCompression/#Numerical-solution","page":"Uniaxial compression","title":"Numerical solution","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"Before defining the structs, the workspace is cleaned, the ONSAS directory is added to the path and scalar geometry and material parameters are defined.","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"close all, if ~strcmp( getenv('TESTS_RUN'), 'yes'), clear all, end\n% add path\naddpath( genpath( [ pwd '/../../src'] ) ) ;\n% scalar parameters\nE = 1 ; nu = 0.3 ; p = -5 ; Lx = 2 ; Ly = 1 ; Lz = 1 ;","category":"page"},{"location":"examples/uniaxialCompression/#MEB-parameters","page":"Uniaxial compression","title":"MEB parameters","text":"","category":"section"},{"location":"examples/uniaxialCompression/#materials","page":"Uniaxial compression","title":"materials","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"The material of the solid considered is a neo-Hookean model with lambda, mu and bulk(K) parameters:","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"lambda = E*nu/((1+nu)*(1-2*nu)) ; mu = E/(2*(1+nu)) ; bulk = E / ( 3*(1-2*nu) ) ;","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"since only one material is considered, a scalar struct is defined as follows","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"materials                 = struct() ;\nmaterials.modelName  = 'NHC' ;\nmaterials.modelParams = [ mu bulk ] ;","category":"page"},{"location":"examples/uniaxialCompression/#elements","page":"Uniaxial compression","title":"elements","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"In this model two kinds of elements are used: tetrahedron for the solid and triangle for introducing the external loads. Since two kinds of elements are used, the struct have length 2:","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"elements             = struct() ;\nelements(1).elemType = 'triangle' ;\nelements(2).elemType = 'tetrahedron' ;\nelements(2).elemTypeParams = [ 2 ] ;","category":"page"},{"location":"examples/uniaxialCompression/#boundaryConds","page":"Uniaxial compression","title":"boundaryConds","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"in this case four BCs are considered, one corresponding to a load and three to displacements.  the first BC introduced is a load, then the coordinate system, loadfactor time function and base load vector are defined","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"boundaryConds                  = struct() ;\nboundaryConds(1).loadsCoordSys = 'global';\nboundaryConds(1).loadsTimeFact = @(t) p*t ;\nboundaryConds(1).loadsBaseVals = [ 1 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"the other BCs have imposed displacements","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"boundaryConds(2).imposDispDofs = [1] ;\nboundaryConds(2).imposDispVals =  0  ;\n%\nboundaryConds(3).imposDispDofs = [3] ;\nboundaryConds(3).imposDispVals =  0  ;\n%\nboundaryConds(4).imposDispDofs = [5] ;\nboundaryConds(4).imposDispVals =  0  ;","category":"page"},{"location":"examples/uniaxialCompression/#Mesh","page":"Uniaxial compression","title":"Mesh","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"A simple hand-made 8-node mesh, with 6 tetrahedrons is considered","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"<img src=\"https://raw.githubusercontent.com/ONSAS/ONSAS_docs/master/docs/src/solidCubeMeshHTML.svg\" alt=\"mesh diagram\" width=\"500\"/>","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"\\begin{center}\n\\def\\svgwidth{0.6\\textwidth}\n\\input{solidCubeMeshPDF.pdf_tex}\n\\end{center}","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"The node coordinates matrix is given by","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"mesh             = struct() ;\nmesh.nodesCoords = [ 0    0    0 ; ...\n                     0    0   Lz ; ...\n                     0   Ly   Lz ; ...\n                     0   Ly    0 ; ...\n                     Lx   0    0 ; ...\n                     Lx   0   Lz ; ...\n                     Lx  Ly   Lz ; ...\n                     Lx  Ly    0 ] ;","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"and the connectivity cell is defined as follows with the four MEBI parameters for each element followed by the indexes of the nodes of each element. All the eight triangle elements are considered with no material (since they are used only to include load) and the following six elements are solid neo-Hookean material tetrahedrons.","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"mesh.conecCell = {[ 0 1 1     5 8 6   ]; ... % loaded face\n                  [ 0 1 1     6 8 7   ]; ... % loaded face\n                  [ 0 1 2     4 1 2   ]; ... % x=0 supp face\n                  [ 0 1 2     4 2 3   ]; ... % x=0 supp face\n                  [ 0 1 3     6 2 1   ]; ... % y=0 supp face\n                  [ 0 1 3     6 1 5   ]; ... % y=0 supp face\n                  [ 0 1 4     1 4 5   ]; ... % z=0 supp face\n                  [ 0 1 4     4 8 5   ]; ... % z=0 supp face\n                  [ 1 2 0     1 4 2 6 ]; ... % tetrahedron\n                  [ 1 2 0     6 2 3 4 ]; ... % tetrahedron\n                  [ 1 2 0     4 3 6 7 ]; ... % tetrahedron\n                  [ 1 2 0     4 1 5 6 ]; ... % tetrahedron\n                  [ 1 2 0     4 6 5 8 ]; ... % tetrahedron\n                  [ 1 2 0     4 7 6 8 ]  ... % tetrahedron\n                } ;","category":"page"},{"location":"examples/uniaxialCompression/#initialConds","page":"Uniaxial compression","title":"initialConds","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"since no initial non-homogeneous initial conditions are used, an empty struct is used .","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"initialConds = struct();","category":"page"},{"location":"examples/uniaxialCompression/#Analysis-parameters","page":"Uniaxial compression","title":"Analysis parameters","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"analysisSettings               = struct() ;\nanalysisSettings.methodName    = 'newtonRaphson' ;\nanalysisSettings.stopTolIts    = 30     ;\nanalysisSettings.stopTolDeltau = 1.0e-8 ;\nanalysisSettings.stopTolForces = 1.0e-8 ;\nanalysisSettings.finalTime     = 1      ;\nanalysisSettings.deltaT        = .1     ;","category":"page"},{"location":"examples/uniaxialCompression/#Output-parameters","page":"Uniaxial compression","title":"Output parameters","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"otherParams             = struct() ;\notherParams.problemName = 'uniaxialCompression_HandMadeMesh' ;\notherParams.plots_format = 'vtk' ;","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"The displacement in x of node 7 is computed:","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"controlDispsValsCase1 = matUs(6*6+1,:) ;\nloadFactorsCase1 = loadFactorsMat ;","category":"page"},{"location":"examples/uniaxialCompression/#Analytic-solution-computation","page":"Uniaxial compression","title":"Analytic solution computation","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"The numerical values of beta and alpha for each load step are:","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"alphas       = (Lx + matUs(6*6+1,:)) / Lx ;\nbetas        = (Ly + matUs(6*6+3,:)) / Ly ;","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"and the corresponding analytic nominal tension is obtained ","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"analyticFuncPxx = @(alphas,betas) mu * alphas - mu * 1./alphas + bulk * betas.^2 .* ( alphas .* betas.^2 -1) ;\nanalyticFuncPyy = @(alphas,betas) betas .* mu  - mu * 1./betas + bulk * betas .* ( alphas.^2 .* betas.^2 - alphas) ;\nanalyticPxx = analyticFuncPxx( alphas, betas ) ;\nanalyticPyy = analyticFuncPyy( alphas, betas ) ;","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"The error and the verif boolean are computed ","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"aux1 = loadFactorsCase1' - analyticPxx ;\ntolerance = 1e-6 ;\nverifBoolean = ( norm( aux1 ) / norm( analyticPxx ) < 1e-6 ) && ( norm( analyticPyy ) < tolerance ) ;","category":"page"},{"location":"examples/uniaxialCompression/#Plot","page":"Uniaxial compression","title":"Plot","text":"","category":"section"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"The numerical and analytic solutions are plotted.","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"lw = 2.0 ; ms = 11 ; plotfontsize = 18 ;\nfigure, hold on, grid on\nplot( controlDispsValsCase1, loadFactorsCase1, 'r-x' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsValsCase1, analyticPxx,  'g-s' , 'linewidth', lw,'markersize',ms )\nlabx = xlabel('Displacement');   laby = ylabel('\\lambda(t)') ;\nlegend( 'Numeric', 'Analytic' , 'location', 'SouthEast' )\nset(gca, 'linewidth', 1.0, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\ntitle('uniaxial compression test')\nif length(getenv('TESTS_RUN')) > 0 && strcmp( getenv('TESTS_RUN'), 'yes')\n  fprintf('\\ngenerating output png for docs.\\n')\n  print( './output/verifCompression.png', '-dpng' )\nelse\n  fprintf('\\n === NOT in docs workflow. ===\\n')\nend","category":"page"},{"location":"examples/uniaxialCompression/","page":"Uniaxial compression","title":"Uniaxial compression","text":"<img src=\"../../assets/generated/verifCompression.png\" alt=\"validation plot\" width=\"500\"/>","category":"page"},{"location":"examples/uniaxialExtension/#Uniaxial-Extension-Solid-example","page":"Uniaxial extension","title":"Uniaxial Extension Solid example","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"(Image: Octave script)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"In this tutorial example an elastic solid is submitted to a uniaxial extension test. The problem is inspired by Exercise 4 from section 6.5 in (Holzapfel,2000). The geometry and tension applied are shown in the figure, where the Lx, Ly and Lz are the dimensions and the tension p is applied on the face x=Lx, as nominal traction (see (Holzapfel,2000)).","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"<img src=\"../../assets/diagramSolidUniaxial.svg\" alt=\"structure diagram\" width=\"500\"/>","category":"page"},{"location":"examples/uniaxialExtension/#Analytic-solution","page":"Uniaxial extension","title":"Analytic solution","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"Let us consider that a uniform deformation is produced, with a nonzero axial stretch alpha and nonzero transversal stretch beta. The corresponding deformation gradient and Green-Lagrange strain tensor are given by:","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"textbfF = left beginmatrix alpha  0  0  0  beta  0  0  0  beta endmatrix right\nqquad\ntextbfE = left  beginmatrix frac12 left(alpha^2 -1right)  0  0  0   frac12 left(beta^2 -1right)  0  0  0   frac12 left(beta^2 -1right) endmatrix\nright","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The second Piola-Kirchhoff tensor textbfS is given by","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"textbfS( textbfE ) = p_1 tr(textbfE) textbfI + 2 p_2 textbfE","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"then, using the relation textbfP=textbfFtextbfS, the P_yy component is computed and set to zero (using the boundary conditions)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"P_yy( textbfE ) =\np_1 beta left(\n             frac12 left(alpha^2 -1 right) + left( beta^2 -1right)\n right) + 2 p_2 beta (frac12 left(beta^2 -1 right)) = 0","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"then, using that betaneq0 (since textdet( textbfF ) neq0), we obtain","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":" p_1 frac12 left(alpha^2 -1 right)\n = - (p_1+p_2) left(beta^2 -1 right)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"then using the relation between the Lamé parameters p_2 and p_1 and the Young modulus and Poisson ratio, we obtain:","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":" left(beta^2 -1 right) = -nu left(alpha^2 -1 right)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The axial component of the nominal stress is","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"P_xx( textbfE ) =\np_1 alpha left(\n             frac12 left(alpha^2 -1 right) + left( beta^2 -1right)\n right) + 2 p_2 alpha (frac12 left(alpha^2 -1 right)) = 0","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"and substituting we obtain","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"P_xx( alpha ) =\np_1 alpha frac1-2nu2 left(alpha^2 -1 right) + p_2 alpha left(alpha^2 -1 right) =\n left( fracE nu(1+nu)2  + fracE(1+nu)2 right)  alpha left(alpha^2 -1 right)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"thus, considering the axial displacement u and using the stretch definition alpha = (1+uLx), we obtain","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"P_xx( u ) =\n fracE2  left( left( 1+fracuLx right)^3 - left( 1+ fracuLx right) right)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"where u is the x displacement of the points located on face x=Lx.","category":"page"},{"location":"examples/uniaxialExtension/#Numerical-solution:-case-1","page":"Uniaxial extension","title":"Numerical solution: case 1","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"Before defining the structs, the workspace is cleaned, the ONSAS directory is added to the path and scalar geometry and material parameters are defined.","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"close all, if ~strcmp( getenv('TESTS_RUN'), 'yes'), clear all, end\n% add path\naddpath( genpath( [ pwd '/../../src'] ) ) ;\n% scalar parameters\nE = 1 ; nu = 0.3 ; p = 3 ; Lx = 2 ; Ly = 1 ; Lz = 1 ;","category":"page"},{"location":"examples/uniaxialExtension/#MEB-parameters","page":"Uniaxial extension","title":"MEB parameters","text":"","category":"section"},{"location":"examples/uniaxialExtension/#materials","page":"Uniaxial extension","title":"materials","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The material of the solid considered is the Saint-Venant-Kirchhoff with Lamé parameters computed as","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"lambda = E*nu/((1+nu)*(1-2*nu)) ; mu = E/(2*(1+nu)) ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"since only one material is considered, a scalar struct is defined as follows","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"materials                 = struct() ;\nmaterials.modelName  = 'SVK' ;\nmaterials.modelParams = [ lambda mu ] ;","category":"page"},{"location":"examples/uniaxialExtension/#elements","page":"Uniaxial extension","title":"elements","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"In this model two kinds of elements are used: tetrahedron for the solid and triangle for introducing the external loads. Since two kinds of elements are used, the struct have length 2:","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"elements             = struct() ;\nelements(1).elemType = 'triangle' ;\nelements(2).elemType = 'tetrahedron' ;","category":"page"},{"location":"examples/uniaxialExtension/#boundaryConds","page":"Uniaxial extension","title":"boundaryConds","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"in this case four BCs are considered, one corresponding to a load and three to displacements.  the first BC introduced is a load, then the coordinate system, loadfactor time function and base load vector are defined","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"boundaryConditions             = struct() ;\nboundaryConds(1).loadsCoordSys = 'global';\nboundaryConds(1).loadsTimeFact = @(t) p*t ;\nboundaryConds(1).loadsBaseVals = [ 1 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"the other BCs have imposed displacements","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"boundaryConds(2).imposDispDofs = [1] ;\nboundaryConds(2).imposDispVals =  0  ;\n%\nboundaryConds(3).imposDispDofs = [3] ;\nboundaryConds(3).imposDispVals =  0  ;\n%\nboundaryConds(4).imposDispDofs = [5] ;\nboundaryConds(4).imposDispVals =  0  ;\n%","category":"page"},{"location":"examples/uniaxialExtension/#initialConds","page":"Uniaxial extension","title":"initialConds","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"since no initial non-homogeneous initial conditions are used, an empty struct is used .","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"initialConds = struct();","category":"page"},{"location":"examples/uniaxialExtension/#Mesh","page":"Uniaxial extension","title":"Mesh","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"A simple hand-made 8-node mesh, with 6 tetrahedrons is considered","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"<img src=\"https://raw.githubusercontent.com/ONSAS/ONSAS_docs/master/docs/src/solidCubeMeshHTML.svg\" alt=\"mesh diagram\" width=\"500\"/>","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"\\begin{center}\n\\def\\svgwidth{0.6\\textwidth}\n\\input{solidCubeMeshPDF.pdf_tex}\n\\end{center}","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The node coordinates matrix is given by the following","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"mesh             = struct() ;\nmesh.nodesCoords = [ 0    0    0 ; ...\n                     0    0   Lz ; ...\n                     0   Ly   Lz ; ...\n                     0   Ly    0 ; ...\n                     Lx   0    0 ; ...\n                     Lx   0   Lz ; ...\n                     Lx  Ly   Lz ; ...\n                     Lx  Ly    0 ] ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"and the connectivity cell is defined as follows with the four MEBI parameters for each element followed by the indexes of the nodes of each element. All the eight triangle elements are considered with no material (since they are used only to include load) and the following six elements are solid SVK material tetrahedrons.","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"mesh.conecCell = {[ 0 1 1     5 8 6   ]; ... % loaded face\n                  [ 0 1 1     6 8 7   ]; ... % loaded face\n                  [ 0 1 2     4 1 2   ]; ... % x=0 supp face\n                  [ 0 1 2     4 2 3   ]; ... % x=0 supp face\n                  [ 0 1 3     6 2 1   ]; ... % y=0 supp face\n                  [ 0 1 3     6 1 5   ]; ... % y=0 supp face\n                  [ 0 1 4     1 4 5   ]; ... % z=0 supp face\n                  [ 0 1 4     4 8 5   ]; ... % z=0 supp face\n                  [ 1 2 0     1 4 2 6 ]; ... % tetrahedron\n                  [ 1 2 0     6 2 3 4 ]; ... % tetrahedron\n                  [ 1 2 0     4 3 6 7 ]; ... % tetrahedron\n                  [ 1 2 0     4 1 5 6 ]; ... % tetrahedron\n                  [ 1 2 0     4 6 5 8 ]; ... % tetrahedron\n                  [ 1 2 0     4 7 6 8 ]  ... % tetrahedron\n                } ;","category":"page"},{"location":"examples/uniaxialExtension/#Analysis-parameters","page":"Uniaxial extension","title":"Analysis parameters","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"analysisSettings               = struct() ;\nanalysisSettings.methodName    = 'newtonRaphson' ;\nanalysisSettings.stopTolIts    = 30     ;\nanalysisSettings.stopTolDeltau = 1.0e-8 ;\n  analysisSettings.stopTolForces = 1.0e-8 ;\nanalysisSettings.finalTime      = 1      ;\nanalysisSettings.deltaT        = .125   ;","category":"page"},{"location":"examples/uniaxialExtension/#Output-parameters","page":"Uniaxial extension","title":"Output parameters","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"otherParams              = struct() ;\notherParams.plots_format = 'vtk' ;\notherParams.problemName  = 'uniaxialExtension_HandMadeMesh' ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/uniaxialExtension/#Analytic-solution-computation","page":"Uniaxial extension","title":"Analytic solution computation","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"analyticFunc = @(w) 1/p *E * 0.5 * ( ( 1 + w/Lx ).^3 - ( 1 + w/Lx) ) ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"analyticCheckTolerance = 1e-6 ;\nanalyticFunc           = @(w) E * 0.5 * ( (1 + w/Lx).^3 - (1+w/Lx) ) ;\ncontrolDisps = matUs(6*6+1,:) ;\nanalyticVals = analyticFunc( controlDisps ) ;\ncontrolDispsValsCase1         = controlDisps  ;\nloadFactorAnalyticalValsCase1 = analyticVals  ;\nloadFactorNumericalValsCase1  = loadFactorsMat ;","category":"page"},{"location":"examples/uniaxialExtension/#Numerical-solution:-case-2","page":"Uniaxial extension","title":"Numerical solution: case 2","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"In this analysis case, the mesh information is read from a mesh file generated by  the tool GMSH.   The pressure is applied using local coordinates and the stiffness  matrix is computed using the complex-step method.","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"otherParams.problemName = 'uniaxialExtension_GMSH_ComplexStep' ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"this auxiliar line sets the right path to the testing environment","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"base_msh='';\nif strcmp( getenv('TESTS_RUN'),'yes') && isfolder('examples'),\n  base_msh=['.' filesep 'examples' filesep 'uniaxialExtension' filesep];\nend\n%\n[ mesh.nodesCoords, mesh.conecCell ] = meshFileReader( [ base_msh 'geometry_uniaxialExtension.msh'] ) ;\nboundaryConds(1).loadsCoordSys = 'local';\nboundaryConds(1).loadsBaseVals = [0 0 0 0 1 0 ] ;\nelements(2).elemTypeParams = [ 2 ] ;\n\n[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\n\ncontrolDisps = matUs(6*6+1,:) ;\nanalyticVals = analyticFunc( controlDisps ) ;\ncontrolDispsValsCase2         = controlDisps  ;\nloadFactorAnalyticalValsCase2 = analyticVals  ;\nloadFactorNumericalValsCase2  = loadFactorsMat ;\n\naux1 = loadFactorNumericalValsCase1' - loadFactorAnalyticalValsCase1 ;\naux2 = loadFactorNumericalValsCase2' - loadFactorAnalyticalValsCase1 ;\n\nverifBoolean = ...\n     ( norm( aux1 ) / norm( loadFactorNumericalValsCase1 ) < analyticCheckTolerance ) ...\n  && ( norm( aux2 ) / norm( loadFactorNumericalValsCase1 ) < analyticCheckTolerance ) ;","category":"page"},{"location":"examples/uniaxialExtension/#Plot","page":"Uniaxial extension","title":"Plot","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The numerical and analytic solutions are plotted.","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"lw = 2.0 ; ms = 11 ; plotfontsize = 18 ;\nfigure, hold on, grid on\nplot( controlDispsValsCase1, loadFactorAnalyticalValsCase1, 'r-x' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsValsCase1, loadFactorNumericalValsCase1,  'k-o' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsValsCase2, loadFactorNumericalValsCase2,  'g-s' , 'linewidth', lw,'markersize',ms )\nlabx = xlabel('Displacement');   laby = ylabel('\\lambda(t)') ;\nlegend( 'Analytic', 'Numeric-1', 'Numeric-2', 'location', 'North' )\nset(gca, 'linewidth', 1.0, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\ntitle('uniaxial extension test')\nif length(getenv('TESTS_RUN')) > 0 && strcmp( getenv('TESTS_RUN'), 'yes')\n  fprintf('\\ngenerating output png for docs.\\n')\n  print('output/verifUniaxial.png','-dpng')\nelse\n  fprintf('\\n === NOT in docs workflow. ===\\n')\nend","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"<img src=\"../../assets/generated/verifUniaxial.png\" alt=\"plot check\" width=\"500\"/>","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: tests) (Image: License)","category":"page"},{"location":"#What-is-ONSAS?","page":"Home","title":"What is ONSAS?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ONSAS is an Open Nonlinear Structural Analysis Solver for GNU-Octave/Matlab. It consists in a set of implementations of numerical methods for static/dynamic and linear/non-linear analysis of structures. The first version was developed for educational purposes and published in a Structural Analysis handbook for a graduate course taught at the School of Engineering of Universidad de la República. The current version allows to perform a diverse set of simulations and it has been used in specific research applications.","category":"page"},{"location":"#Publications-using-ONSAS","page":"Home","title":"Publications using ONSAS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Journal articles using ONSAS:","category":"page"},{"location":"","page":"Home","title":"Home","text":"2023, M. Vanzulli, J. M. Pérez Zerpa, A co-rotational formulation for quasi-steady aerodynamic nonlinear analysis of frame structures, Heliyon url\n2022, M. Forets, D. Freire, J. M. Pérez Zerpa, Combining set propagation with finite element methods for time integration in transient solid mechanics problems, Computers & Structures url","category":"page"},{"location":"","page":"Home","title":"Home","text":"Theses using ONSAS:","category":"page"},{"location":"","page":"Home","title":"Home","text":"2021, M. Vanzulli, Implementación de una formulación corrotacional en dinámica no lineal y aplicación al modelado de líneas de transmisión eléctrica url\n2021, A. Teliz, Optimización de torres de alta tensión y su análisis frente a vientos de alta intensidad url","category":"page"},{"location":"#Some-example-applications","page":"Home","title":"Some example applications","text":"","category":"section"},{"location":"#A-deployable-ring","page":"Home","title":"A deployable ring","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://github.com/ONSAS/ONSAS/blob/master/docs/src/assets/deployableRing.gif?raw=true\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"ring","category":"page"},{"location":"#A-simple-propeller-model","page":"Home","title":"A simple propeller model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://github.com/ONSAS/ONSAS/blob/master/docs/src/assets/propeller.gif?raw=true\" alt=\"propeller animation\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"propeller animation","category":"page"},{"location":"#A-tower-model","page":"Home","title":"A tower model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://github.com/ONSAS/ONSAS_docs/blob/master/gifs/tower.gif?raw=true\" alt=\"tower animation\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"tower","category":"page"},{"location":"#A-uniaxial-extension-test","page":"Home","title":"A uniaxial extension test","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://github.com/ONSAS/ONSAS_docs/blob/master/gifs/uniaxial.gif?raw=true\" alt=\"uniaxial animation\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"uniaxial animation","category":"page"},{"location":"#A-beam/truss-pendulum","page":"Home","title":"A beam/truss pendulum","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://raw.githubusercontent.com/mvanzulli/Tex_CorrotationalDynamicTL_TesisMV/main/Presentacion/Videos/3.gif\" alt=\"beam truss pendulum\">","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can send an e-mail to jorgepz [AT] fing.edu.uy .","category":"page"},{"location":"#Contributors-and-License","page":"Home","title":"Contributors and License","text":"","category":"section"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The code is distributed under a GNU-GPL 3.0 license.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The authorship of each version is (or tends to be) based on the criteria defined by the JOSS journal. The co-authors have collaborated in tasks such as: design, development or extensive documentation contributions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Jorge M. Pérez Zerpa (1), leaded and managed the design and development of the code, developed the assembly functions, nonlinear truss element formulation, nonlinear static analysis function, designed and co-authored Newmark's method function, input and output functions, leaded the generation of the documentation.\nMauricio Vanzulli (2) co-developed the Newmark's method functions and scripts, developed input files for the dynamic analysis examples. Developed the nonlinear dynamic co-rotational frame element function, its validation and integration with the VIV function. \nJoaquín Viera (1), leaded the development of the Linear Analysis module and input files, collaborated in the design and development of the input reading and output generation modules, leaded the development of a GUI.\nAlexandre Villié (3) developed the current Vortex-Induced-Vibrations Wake Oscillator model. Also contributed in the validation of this function in the integration with the co-rotational frame element.\nJean-Marc Battini (4), contributed functions for the computation of static internal forces of the nonlinear co-rotational frame element.\nJ. Bruno Bazzano (1), contributed to the design/development of the buckling analysis modules, co-designed the initial version of the code, developed and implemented validation examples, validated the HHT implementation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Affiliations:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Instituto de Estructuras y Transporte, Facultad de Ingeniería, Universidad de la República, Montevideo, Uruguay\nInstituto de Ingeniería Mecánica y Producción Industrial, Facultad de Ingeniería, Universidad de la República, Montevideo, Uruguay.\nDepartment of Mechanical Engineering, Polytechnique Montréal, Montréal, Canada.\nDepartment of Civil and Architectural Engineering, KTH Royal Institute of Technology, Stockholm, Sweden","category":"page"},{"location":"#Contributions-and-Acknowledgments","page":"Home","title":"Contributions and Acknowledgments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Marcelo Forets made contributions through the application of software technology tools in the documentation generation workflow.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Santiago Correa made contributions to examples, currently available at the documentation site.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The functions in linearStiffMatPlate3D.m and assemblyUniform.m use part of the femplateexample.m code developed by Jorge Pérez Zerpa and Pablo Castrillo. Professor Sebastian Toro, provided functions for reading dxf files, which were part of ONSAS until version 0.2.6.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Prof. Pérez Zerpa would like to thank: Prof. Frédérick Gosselin for his support during the initial contributions of Alexandre Villié, Prof. Eduardo de Souza Neto for his comments on the arc-length norm computation, and Pablo Blanco,  Gonzalo Ares and Gonzalo Maso Talou for so many discussions during early stages of the design of the code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The development of ONSAS has been partially supported by funds provided by the following agencies/projects:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Comisión de Investigación Científica (CSIC) (project: Definición de estrategias para la aplicación de métodos de identificación de material al diagnóstico no invasivo de Cáncer de mama, manager, Prof. Pérez Zerpa),\nComisión Sectorial de Enseñanza (project: Rediseño de prácticas de enseñanza y evaluación en Resistencia de Materiales, manager, Prof. Pérez Zerpa),\nAgencia Nacional de Investigación e Innovación (project VIOLETA, code FSE_1_2016_1_131837, manager, Prof. Gabriel Usera).","category":"page"},{"location":"examples/beamLinearVibration/#Linear-Dynamic-Vibration-of-a-Simply-Supported-Beam","page":"Linear beam vibration","title":"Linear Dynamic Vibration of a Simply Supported Beam","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"(Image: Octave script)","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"In this tutorial, the dynamic response of a simply supported beam is computed using ONSAS with the linear elastic and the co-rotational formulations. The aim of this example is to verify the numerical implementations using an analytic solution.","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The problem consists in a beam with pinned nodes in both ends. Two loads of magnitude F(t) = f_o sin(wt) are applied in the middle point as it is shown in the figure, where f_o is the force magnitude amplitude and omega is the force angular frequency.","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"<img src=\"../../assets/beamDynamicVibration.svg\" alt=\"structure diagram\" width=\"500\"/>","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"Before defining the structs, the workspace is cleaned and the ONSAS directory is added to the path","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"close all, if ~strcmp( getenv('TESTS_RUN'), 'yes'), clear all, end\naddpath( genpath( [ pwd '/../../src'] ) );","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The material scalar parameters are set.","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"E = 200e9 ; nu = 0.3;  rho = 700;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The cross-section of the beam is rectangular. The widths and other geometry scalar parameters are computed.","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"l = 10 ; ty = .3 ;  tz = .1 ;                  % length of rectangular cross-section widths           \nIyy = ty * tz^3 / 12 ;  Izz = tz * ty^3 / 12 ; % bending inertias\nnumElements = 10 ; % Number of elements\n","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"Time and applied force parameters are","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"Fo     = 100   ; % force magnitude (N)\nw      = 2     ; % force angular frequency (rad/s)\ntf     = 8     ; % s\ndeltat = 0.1   ; % s","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The middle node is computed","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"assert( rem( numElements, 2 ) == 0, 'the number of elements must be even.' )\nappNode    = ( numElements ) / 2 + 1       ;\nappNodePos = (appNode-1) * l / numElements ;","category":"page"},{"location":"examples/beamLinearVibration/#Analytic-solution","page":"Linear beam vibration","title":"Analytic solution","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The governing equations for the deflection v of a beam with uniform cross-section, density and Young modulus with a transversal distributed applied load q is given by","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":" EI fracpartial^4 vpartial x^4(xt) + rho A fracpartial^2 vpartial t^2(xt) = q(xt)","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"and using a Fourier decomposition and following the process explained in chapter 10 of Mechanical Vibrations (5th Edition; Rao Singiresu) we obtain the analytic solution for the displacement of our problem ","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":" v(xt) = frac2forho A l sum_n=1^infty frac1w_n^2 - w^2 sinleft(fracn pi al right) sinleft(fracn pi xl right)sin(wt)","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"where w_n are natural frequencies of the vibration for mode n (computed for each transversal direction).","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The solution can be numerically computed setting a mesh of spatial poins and a vector of times","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"ts = 0:deltat:tf       ; % times vector\nxs = 0:l/numElements:l ; % beam mesh\nns = 1:10              ; % modes","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"As well as the vector of natural frequencies","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"wnY = ( (ns*pi).^2 ) * sqrt(E*Izz/rho/(ty*tz)/(l^4)) ; % Natural frecuency direction Y\nwnZ = ( (ns*pi).^2 ) * sqrt(E*Iyy/rho/(ty*tz)/(l^4)) ; % Natural frecuency direction Z","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The values of the analytic solution are computed as","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"analyticDisY = 0; analyticDisZ = 0;\nanalySolPos = appNodePos ;  % the analytic solution is computed at the point of application of the load\nfor i = 1:length( ns )\n  analyticDisY = analyticDisY + (1/(wnY(i)^2 - w^2)) * sin(i*analySolPos/l*pi) * sin(i*pi*appNodePos/l) * sin(w*ts)' ;\n  analyticDisZ = analyticDisZ + (1/(wnZ(i)^2 - w^2)) * sin(i*analySolPos/l*pi) * sin(i*pi*appNodePos/l) * sin(w*ts)' ;\nend\nanalyticDisY = analyticDisY * (2*Fo/(rho*ty*tz*l) ) ;   analyticDisZ = analyticDisZ * (2*Fo/(rho*ty*tz*l) ) ;","category":"page"},{"location":"examples/beamLinearVibration/#Numerical-solution","page":"Linear beam vibration","title":"Numerical solution","text":"","category":"section"},{"location":"examples/beamLinearVibration/#MEB-parameters","page":"Linear beam vibration","title":"MEB parameters","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The modelling of the structure begins with the definition of the Material-Element-BoundaryConditions (MEB) parameters.","category":"page"},{"location":"examples/beamLinearVibration/#materials","page":"Linear beam vibration","title":"materials","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"Since the example contains only one rod and no nodal masses are used, only one materials struct is defined. The first analysis is done using the co-rotational formulation","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"materials = struct() ;\nmaterials.modelName  = 'elastic-rotEngStr' ;\nmaterials.modelParams = [ E nu]          ;\nmaterials.density         = rho              ;","category":"page"},{"location":"examples/beamLinearVibration/#elements","page":"Linear beam vibration","title":"elements","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"Two different types of elements are considered, node and beam. The nodes will be assigned in the first entry (index 1) and the beam at index 2. The elemType field is then:","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"elements = struct() ;\nelements(1).elemType = 'node'  ;\nelements(2).elemType = 'frame' ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"for the crossSection, a frame element of rectangular-cross section with t_y and t_z dimensions in y and z directions is set, then the elemTypeGeometry field is:","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"elements(2).elemCrossSecParams = { 'rectangle' , [ty tz] } ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The consistent mass approach is considered for the dynamic analysis","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"elements(2).massMatType = 'consistent';","category":"page"},{"location":"examples/beamLinearVibration/#boundaryConditions","page":"Linear beam vibration","title":"boundaryConditions","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The elements are submitted to two different BC settings. The first BC corresponds to the fixed points","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"boundaryConds = struct() ;\nboundaryConds(1).imposDispDofs = [ 1 2 3 5 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 0 ] ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"and the second corresponds to a time dependant external force","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"boundaryConds(2).loadsCoordSys = 'global'        ;\nboundaryConds(2).loadsTimeFact = @(t) Fo*sin(w*t) ;\nboundaryConds(2).loadsBaseVals = [ 0 0 1 0 1 0 ] ;","category":"page"},{"location":"examples/beamLinearVibration/#mesh-parameters","page":"Linear beam vibration","title":"mesh parameters","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The coordinates of the nodes of the mesh are given by the matrix:","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"mesh = struct() ;\nmesh.nodesCoords = [ (0:(numElements))'*l/numElements  zeros(numElements+1,2) ] ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The connectivity is introduced using the conecCell cell. Each entry of the cell contains a vector with the four indexes of the MEBI parameters, followed by the indexes of the nodes of the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized:","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"mesh.conecCell = { } ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"then the first two nodes are defined, both with material zero (since nodes dont have material), the first element type (the first entry of the cells of the elements struct), and the first entry of the cells of the boundary conditions struct. Finally the node index is included.","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"mesh.conecCell{ 1, 1 } = [ 0 1 1  1   ] ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"the following case only differs in the boundary condition and the node number","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"mesh.conecCell{ 2, 1 } = [ 0 1 1  numElements+1 ] ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"the following case only differs in the boundary condition and the node number","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"mesh.conecCell{ 3, 1 } = [ 0 1 2  appNode ] ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"the beam elements are formed by the first material, the second type of element, and no boundary conditions are applied to any element.","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"for i=1:numElements\n  mesh.conecCell{ i+3,1 } = [ 1 2 0   i i+1 ] ;\nend","category":"page"},{"location":"examples/beamLinearVibration/#initial-Conditions","page":"Linear beam vibration","title":"initial Conditions","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"homogeneous initial conditions are considered, then an empty struct is set:","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"initialConds = struct() ;","category":"page"},{"location":"examples/beamLinearVibration/#analysisSettings","page":"Linear beam vibration","title":"analysisSettings","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"analysisSettings               = struct() ;\nanalysisSettings.methodName    = 'newmark' ;\nanalysisSettings.deltaT        =   deltat  ;\nanalysisSettings.finalTime     =   tf   ;\nanalysisSettings.stopTolDeltau =   1e-8 ;\nanalysisSettings.stopTolForces =   1e-8 ;\nanalysisSettings.stopTolIts    =   10   ;","category":"page"},{"location":"examples/beamLinearVibration/#otherParams","page":"Linear beam vibration","title":"otherParams","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"otherParams = struct() ;\notherParams.problemName = 'coRotationaluniformDynamicBeam';","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"ONSAS execution","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"[coRotMatUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"The second analysis case implements the linear elastic formulation","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"materials.modelName  = 'elastic-linear' ;\notherParams.problemName = 'elastic-linearuniformDynamicBeam';","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"ONSAS execution","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"[linElasMatUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/beamLinearVibration/#Error-estimation","page":"Linear beam vibration","title":"Error estimation","text":"","category":"section"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"dofYendNode = 6*(appNode) - 3;     dofZendNode = 6*(appNode) - 1;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"error computed for each method in the application node of the external force","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"diflinearDispUy = linElasMatUs(dofYendNode, :)' - analyticDisY ;\ndiflinearDispUz = linElasMatUs(dofZendNode, :)' - analyticDisZ ;\ndifcoRotDispUy  = coRotMatUs(dofYendNode, :)'   - analyticDisY ;\ndifcoRotDispUz  = coRotMatUs(dofZendNode, :)'   - analyticDisZ ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"errlinearDispUy = norm( diflinearDispUy, 1 ) / norm( analyticDisY, 1 ) ;\nerrcoRotDispUy  = norm( difcoRotDispUy , 1 ) / norm( analyticDisY, 1 ) ;\nerrlinearDispUz = norm( diflinearDispUz, 1 ) / norm( analyticDisZ, 1 ) ;\nerrcoRotDispUz  = norm( difcoRotDispUz , 1 ) / norm( analyticDisZ, 1 ) ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"the numerical resolution is validated for both method and both directions.","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"verifBoolean =  ( errlinearDispUy <  5e-2 ) && ( errcoRotDispUy  <  5e-2 ) ...\n             && ( errlinearDispUz <  5e-2 ) && ( errcoRotDispUz  <  5e-2 );","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"Plot parameters:","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"lw = 2.0 ; lw2 = 1.0 ; ms = 11 ; plotfontsize = 18 ;","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"plot y-axis linear, co-rotational and analytic result ","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"figure, hold on, grid on\nplot(ts, coRotMatUs(dofYendNode, :),'r-x' , 'linewidth', lw,'markersize',ms )\nplot(ts, linElasMatUs(dofYendNode, :),'k-o' , 'linewidth', lw,'markersize',ms )\nplot(ts, analyticDisY,'b' , 'linewidth', lw,'markersize',ms )\nlegend('coRotational_{disp}','elastic-linear_{disp}', 'Analytic_{disp}', 'location', 'eastoutside')\nlabx = xlabel('time (s)');   laby = ylabel('displacement (m)') ;\nset(gca, 'linewidth', lw2, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\nprint('output/Uy','-dpng')","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"plot z-axis linear, co-rotational and analytic result ","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"figure, hold on, grid on\nplot(ts, coRotMatUs(dofZendNode, :),'r-x' , 'linewidth', lw, 'markersize', ms )\nplot(ts, linElasMatUs(dofZendNode, :),'k-o' , 'linewidth', lw, 'markersize', ms )\nplot(ts, analyticDisZ, 'b' , 'linewidth', lw, 'markersize', ms )\nlegend('coRotational_{disp}', 'elastic-linear_{disp}', 'Analytic_{disp}', 'location', 'eastoutside')\nlabx = xlabel('time (s)');   laby = ylabel('displacement (m)') ;\nset(gca, 'linewidth', lw2, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\nprint('output/Uy.png','-dpng')\n%print('../../docs/src/assets/beamDynamicVibrationVerifUy.png','-dpng')","category":"page"},{"location":"examples/beamLinearVibration/","page":"Linear beam vibration","title":"Linear beam vibration","text":"<img src=\"../../assets/beamDynamicVibrationVerifUy.png\" alt=\"structure diagram\" width=\"500\"/>","category":"page"},{"location":"examples/ringPlaneStrain/#Plane-strain-ring-example","page":"Plane strain ring","title":"Plane strain ring example","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"(Image: Octave script)","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"In this example a hollow cylinder submitted to an internal pressure p_i as shown in diagram depicted below is considered. The length of the cylinder is L_z  m and the internal and external radious are R_i and R_e, respectively. ","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"<img src=\"../../assets/linearCylinderPlaneStrain/ilusCylinderPlaneStrain.svg\" alt=\"linear cylinder diagram\" width=\"500\"/>","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"Before defining the structs, the workspace is cleaned, the ONSAS directory is added to the path and scalar geometry and material parameters are defined:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"close all, if ~strcmp( getenv('TESTS_RUN'), 'yes'), clear all, end\n% add path\naddpath( genpath( [ pwd '/../../src'] ) ) ;\n% scalar parameters\n% E = 1e6 ; nu = 0.3 ; p = 30e3 ; L = .75 ; Re = 0.15 ; Ri = 0.1 ;\nE = 210 ; nu = 0.3 ; p = 0.01 ; L = .75 ; \nglobal Re\nglobal Ri\nRe = 200 ; Ri = 100 ;","category":"page"},{"location":"examples/ringPlaneStrain/#Linear-analysis","page":"Plane strain ring","title":"Linear analysis","text":"","category":"section"},{"location":"examples/ringPlaneStrain/#Analytic-solution","page":"Plane strain ring","title":"Analytic solution","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The solution displacement field is extracted from chapter 4 of  (Timoshenko and Goodier, Theory of Elasticity, 3rd edition). The Navier's equation, imposing no temperature variation, no volumetric forces, and considering a radial dispalcement field leads to:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"  nabla (nabla  textbfu(rthetaz) )  = 0  ","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"Due to the symmetry of the problem mathbfmathitu_theta = 0  and also mathbf mathit textbfu (rthetaz)   = mathbf mathit textbfu(rz)    Thus according to the boundary conditions stated above mathitu_z(rz)=0 and the radial displacements field mathitu_r(r) only varies with r. Thereafter by imposing the boundary conditions stated above and substituting (E, nu) into Lamé parameters (lambda=frac Enu (1 + 2nu )(1 - 2nu ) and mu=frac Enu (1 + 2nu )) we obtain:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":" u_r(r) = Ar + dfracBr  \n A = dfrac(1+nu)(1-2nu)R_i^2p_iE(R_e^2-R_i^2) quad\n B = dfrac(1+nu)R_i^2R_e^2p_iE(R_e^2-R_i^2)","category":"page"},{"location":"examples/ringPlaneStrain/#Numerical-solution","page":"Plane strain ring","title":"Numerical solution","text":"","category":"section"},{"location":"examples/ringPlaneStrain/#MEB-parameters","page":"Plane strain ring","title":"MEB parameters","text":"","category":"section"},{"location":"examples/ringPlaneStrain/#materials","page":"Plane strain ring","title":"materials","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The constitutive behavior of the material considered is isotropic linear elastic.  Since only one material is considered, the structs defined for the materials contain only one entry:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"materials = struct() ;\nmaterials.modelName  = 'elastic-linear' ;\nmaterials.modelParams =  [ E nu ]       ;","category":"page"},{"location":"examples/ringPlaneStrain/#elements","page":"Plane strain ring","title":"elements","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"In this plane model, three kinds of elements are used: triangle for the solid, edges to add pressure loads and nodes to set additional boundary conditions for the numerical resolution. Since three kinds of elements are used, the struct has length 3: ","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"elements = struct() ;\nelements(1).elemType           = 'node'    ;\nelements(2).elemType           = 'edge'    ;\nelements(2).elemCrossSecParams = L         ;\nelements(3).elemType           = 'triangle';\nelements(3).elemTypeParams     = 2         ;\nelements(3).elemCrossSecParams = L         ;","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"where elemCrossSecParams field sets the thickness of the edge and elemTypeParams sets the plane strain triangle element.  ","category":"page"},{"location":"examples/ringPlaneStrain/#boundaryConds","page":"Plane strain ring","title":"boundaryConds","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"Three BCs are considered, one corresponding to a load and two for displacements.  The first two BCs constrain displacements in x and y global directions respectively:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"boundaryConds = struct() ;\nboundaryConds(1).imposDispDofs = [1] ;\nboundaryConds(1).imposDispVals = [0] ;\nboundaryConds(2).imposDispDofs = [3] ;\nboundaryConds(2).imposDispVals = [0] ;","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"then the third BC corresponds to the pressure. It is introduced in local coordinates so the first entry is along the edge (tangent) and the second towards the normal vector obtained by rotating the tangent vector 90 degrees in global axis z:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"boundaryConds(3).loadsCoordSys = 'local' ;\nboundaryConds(3).loadsTimeFact = @(t) t  ;\nboundaryConds(3).loadsBaseVals = [ 0 p ]  ;","category":"page"},{"location":"examples/ringPlaneStrain/#Mesh","page":"Plane strain ring","title":"Mesh","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The mesh can be read from the msh file. However, if any changes to the mesh are desired, the .geo file can be edited and the msh file can be re-generated using GMSH.","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"<img src=\"../../assets/linearCylinderPlaneStrain/meshCylinderPlaneStrain.png\" alt=\"mesh plot\" width=\"500\"/>","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The element properties are set using labels into GMSH follwing the MEBI nomenclature. First triangle elements have linear elastic material so entry 1 of the materialṣ struct is assigned. Then for both node and edge elements any material is set.   Next displacement boundary conditions are assigned to the element, since the problem is modeled into x-y plane, a constrain to avoid rotation along z is necessary. This is done fixing y and x displacements (using boundaryConds(1) and boundaryConds(2) as labels) on points 2 3 4 5.  Finally the internal pressure is applied on the edge elements linked with curves from one to four (Circles 1-4 in Figure). In accordance with the orientation of the curve set in GMSH, the normal vector obtained in local coordinates is e_r so the internal pressure is assigned using boundaryConds(3). Once the mesh is created is read using:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"base_msh='';\nif strcmp( getenv('TESTS_RUN'),'yes') && isfolder('examples'),\n  base_msh=['.' filesep 'examples' filesep 'ringPlaneStrain' filesep];\nend\nmesh = struct();\n[ mesh.nodesCoords, mesh.conecCell ] = meshFileReader( [ base_msh 'ring.msh'] ) ;","category":"page"},{"location":"examples/ringPlaneStrain/#initialConds","page":"Plane strain ring","title":"initialConds","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"Any non-homogeneous initial conditions are considered, thereafter an empty struct is set:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"initialConds = struct();","category":"page"},{"location":"examples/ringPlaneStrain/#Analysis-parameters","page":"Plane strain ring","title":"Analysis parameters","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The Newton-Raphson method is employed to solve 2 load steps. The ratio between finalTime and deltaT sets the number of load steps used to evaluate boundaryConds(3).loadsTimeFact function:  ","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"analysisSettings = struct() ;\nanalysisSettings.methodName    = 'newtonRaphson' ;\nanalysisSettings.stopTolIts    = 30      ;\nanalysisSettings.stopTolDeltau = 1.0e-12 ;\nanalysisSettings.stopTolForces = 1.0e-12 ;\nanalysisSettings.finalTime     = 1       ;\nanalysisSettings.deltaT        = .5      ;","category":"page"},{"location":"examples/ringPlaneStrain/#Output-parameters","page":"Plane strain ring","title":"Output parameters","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"otherParams = struct() ;\notherParams.problemName = 'linear_PlaneStrain' ;\notherParams.plots_format = 'vtk' ;","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The ONSAS software is executed for the parameters defined above and the displacement solution of each load(time) step is saved in matUsmatrix:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"[matUs, loadFactorsMat, ~, cellStress ] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/ringPlaneStrain/#Verification","page":"Plane strain ring","title":"Verification","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The numerical and analytic solutions are compared at the final load step for the internal and external surface (since all the elements on the same surface have the same analytic solution):","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"% internal surface analytic solution\nA = ( p * (1+nu)*(1-2*nu)*Ri^2 ) / ( E*(Re^2-Ri^2) ) ;\nB = ( p * (1+nu)*Ri^2*Re^2 )   / ( E*(Re^2-Ri^2) ) ;\nanalyticValRi = A*Ri + B/Ri ;\n% internal surface numerical solution\ndofXRi = 1 ;\nnumericalRi = matUs( dofXRi, end ) ;\n% external surface analytic solution\nanalyticValRe = A*Re + B/Re ;\n% external surface numerical solution\ndofXRe = (8-1)*6+3 ;\nnumericalRe = matUs( dofXRe , end ) ;","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The numerical and analytical solution for the internal and external surface are plotted:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"%plot parameters\nlw = 2.0 ; ms = 11 ; plotfontsize = 10 ;\nfigure, hold on, grid on\n%internal surface\nplot( matUs(dofXRi,:), loadFactorsMat(:,3) , 'ro' , 'linewidth', lw,'markersize',ms )\nplot( linspace(0,analyticValRi,length(loadFactorsMat(:,3) ) )  , loadFactorsMat(:,3), 'k-', 'linewidth', lw,'markersize',ms )\n%internal surface\nplot( matUs(dofXRe,:), loadFactorsMat(:,3) , 'ro' , 'linewidth', lw,'markersize',ms )\nplot( linspace(0,analyticValRe,length(loadFactorsMat(:,3)) ) , loadFactorsMat(:,3), 'k-', 'linewidth', lw,'markersize',ms )\nlabx = xlabel('Displacement [m]');   laby = ylabel('\\lambda(t)') ;\nlegend('Numeric','Analytic','location','East')\nset(gca, 'linewidth', 1.2, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\nprint('output/verifLinearRingPlaneStrain.png','-dpng')","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"<img src=\"../../assets/linearCylinderPlaneStrain/verifLinearCylinderPlaneStrain.png\" alt=\"verification plot\" width=\"500\"/>","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"Finally the deformed configuration is illustrated:  ","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"<img src=\"../../assets/linearCylinderPlaneStrain/defLinearCylinderPlaneStrain.png\" alt=\"def plot\" width=\"500\"/>","category":"page"},{"location":"examples/ringPlaneStrain/#Elastoplastic-analysis","page":"Plane strain ring","title":"Elastoplastic analysis","text":"","category":"section"},{"location":"examples/ringPlaneStrain/#Semi-analytic-solution","page":"Plane strain ring","title":"Semi-analytic solution","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The solution is extracted from Hill (The mathematical theroy of plasticity, 1950).   The yielding pressure p_0 is defined as,","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":" Y = dfrac2sigma_Y0sqrt3  \n p_0 = dfracY2left(1+dfracR_i^2R_e^2right)","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The radial displacement of the outer surface of the ring is given by,","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":" u_r(R_e) = textif p leq p_0 \n dfrac2 p R_eE left( dfracR_e^2R_i^2-1right) ( 1-nu^2 ) \n textelse  \n dfrac2pR_eEleft(dfracR_e^2R_i^2-1right)(1-nu^2)","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"where c denotes the plastic front surface in the ring and is given by the implicit function,","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":" dfracpY = lnleft(dfraccR_iright) + dfrac12left(1-dfracc^ 2R_e^2right)","category":"page"},{"location":"examples/ringPlaneStrain/#Numerical-solution-2","page":"Plane strain ring","title":"Numerical solution","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"% scalar parameters\nE = 210 ; nu = 0.3 ; H = 0 ; sigmaY0 = 0.24 ; L = .75 ; p = 0.01 ;","category":"page"},{"location":"examples/ringPlaneStrain/#MEB-parameters-2","page":"Plane strain ring","title":"MEB parameters","text":"","category":"section"},{"location":"examples/ringPlaneStrain/#materials-2","page":"Plane strain ring","title":"materials","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The constitutive behavior of the material considered is isotropic hardening.  Since only one material is considered, the structs defined for the materials contain only one entry:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"materials.modelName  = 'isotropicHardening' ;\nmaterials.modelParams =  [ E nu H sigmaY0 ] ;","category":"page"},{"location":"examples/ringPlaneStrain/#elements-2","page":"Plane strain ring","title":"elements","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The elements struct is the same as the previous model.","category":"page"},{"location":"examples/ringPlaneStrain/#boundaryConds-2","page":"Plane strain ring","title":"boundaryConds","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The BC struct is the same as in the elastic-linear case. However the loadsTimeFact function can be modified to consider unloading as follows.","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"boundaryConds(3).loadsTimeFact = @(t) t*(t<=19) + (t-(t-19)*2)*(t>19)  ;","category":"page"},{"location":"examples/ringPlaneStrain/#initialConds-2","page":"Plane strain ring","title":"initialConds","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"Any non-homogeneous initial conditions are considered, thereafter the struc is the same as in the previous example.","category":"page"},{"location":"examples/ringPlaneStrain/#Mesh-2","page":"Plane strain ring","title":"Mesh","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The mesh can be read from the msh file. The same mesh as in the elastic-linear case is considered for this problem.","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"Conec = myCell2Mat( mesh.conecCell ) ;\nelems = size(Conec,1) ","category":"page"},{"location":"examples/ringPlaneStrain/#Analysis-parameters-2","page":"Plane strain ring","title":"Analysis parameters","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The Newton-Raphson method is employed to solve 19 load steps. The ratio between finalTime and deltaT sets the number of load steps used to evaluate boundaryConds(3).loadsTimeFact function:  ","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"analysisSettings.methodName    = 'newtonRaphson' ;\nanalysisSettings.stopTolIts    = 30       ;\nanalysisSettings.stopTolDeltau = 1.0e-8   ;\nanalysisSettings.stopTolForces = 1.0e-6   ;\nanalysisSettings.finalTime     = 19       ;\nanalysisSettings.deltaT        = 1        ;","category":"page"},{"location":"examples/ringPlaneStrain/#Output-parameters-2","page":"Plane strain ring","title":"Output parameters","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"otherParams.problemName = 'EPP_PlaneStrain' ;\notherParams.plots_format = 'vtk' ;","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The ONSAS software is executed for the parameters defined above and the displacement solution of each load(time) step is saved in matUsmatrix:","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"[matUs, loadFactorsMat, ~, cellStress ] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/ringPlaneStrain/#Verification-2","page":"Plane strain ring","title":"Verification","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The numerical and analytic solutions are compared for the external surface (since all the elements on the same surface have the same analytic solution):","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"%\nglobal Y\n%\nY = 2 * sigmaY0 / sqrt(3) \t\t\t\t;\n% p0 = Y/2 * (1-a^2/b^2)\np0 = Y / 2 * (1 - Ri^2 / Re^2)  \t\t; % Yielding pressure\n%\npressure_vals = loadFactorsMat(:,3) * p ;\n%\ncvals = zeros(length(pressure_vals),1) \t;\nubAna = zeros(length(pressure_vals),1) \t;\n%\n% Plastic front value\nfor i = 1:length(cvals)\n\tp = pressure_vals(i) ;\n\tif i == 1  \n\t\t% val = fsolve(@(c)c_val(c,p,Y,a,b), a) ;\n\t\tval = fsolve(@(c)c_val(c,p,Y,Ri,Re), Ri) ;\n\telse\n\t\t% val = fsolve(@(c)c_val(c,p,Y,a,b), cvals(i-1)) ;\n\t\tval = fsolve(@(c)c_val(c,p,Y,Ri,Re), cvals(i-1)) ;\n\tend\n\tcvals(i) = val ;\nend\n%\n% Analytic radial displacement at outer surface\nfor i = 1:length(cvals)\n\tp = pressure_vals(i) ;\n\tif p < p0\n\t\t% ubAna(i) = 2*p*b / ( E*( b^2/a^2-1 ) ) * (1-nu^2) ;\n\t\tubAna(i) = 2*p*Re / ( E*( Re^2/Ri^2-1 ) ) * (1-nu^2) ;\n\telse\n\t\tc = cvals(i) ;\n\t\t% ubAna(i) = Y*c^2/(E*b) * (1-nu^2) ;\n\t\tubAna(i) = Y*c^2/(E*Re) * (1-nu^2) ;\n\tend\t\nend","category":"page"},{"location":"examples/ringPlaneStrain/#Plots","page":"Plane strain ring","title":"Plots","text":"","category":"section"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"% plot parameters\nlw = 2.0 ; ms = 11 ; plotFontSize = 10 ;\nfig = figure;\nhold on, grid on\n% node to plot the solution\nnode = 5 ;\ndofX = node * 6 - 5 ;\nubNum = matUs(dofX, :) ; \n%\nplot(ubNum, pressure_vals, 'b-o', 'linewidth', lw,'markersize', ms)\nplot(ubAna, pressure_vals, 'g-x', 'linewidth', lw,'markersize', ms)\n%\nlegend ({'FEM', 'Analytic',}, 'location', 'east');\nlabx = xlabel('u_b'); laby = ylabel('p') ;\ntit = title('p-u_b');\nset(labx, 'fontsize', plotFontSize*.8);\nset(laby, 'fontsize', plotFontSize*.8);\nset(tit, 'fontsize', plotFontSize);","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"The numerical solution is verified for both cases: ","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"analyticCheckTolerance = 1e-2 ;\nverifBoolean = ( ( numericalRi - analyticValRi ) < analyticCheckTolerance ) && ...\n               ( ( numericalRe - analyticValRe ) < analyticCheckTolerance ) && ...\n               ( ( ubNum(end) - ubAna(end)     ) < analyticCheckTolerance ) ;","category":"page"},{"location":"examples/ringPlaneStrain/","page":"Plane strain ring","title":"Plane strain ring","text":"```","category":"page"}]
}
