var documenterSearchIndex = {"docs":
[{"location":"corotationalFrameElement/#Co-rotational-frame-system","page":"Co-rotational frame system","title":"Co-rotational frame system","text":"","category":"section"},{"location":"corotationalFrameElement/","page":"Co-rotational frame system","title":"Co-rotational frame system","text":"This section aims to assist in understanding the transformations of the co-rotational framework.","category":"page"},{"location":"corotationalFrameElement/","page":"Co-rotational frame system","title":"Co-rotational frame system","text":"<img src=\"https://raw.githubusercontent.com/ONSAS/ONSAS_docs/master/docs/src/diagramCorotationalFrameSystem.svg\" alt=\"corotational diagram\" width=\"800\"/>","category":"page"},{"location":"examples/springMass/#Spring-mass-system-example","page":"Spring-mass system","title":"Spring-mass system example","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"(Image: Octave script)","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"In this example a simple spring-mass system is considered. The notation and the analytical solution are based on chapter 3 from the book Dynamics of Structures by Ray W. Clough and Joseph Penzien, Third Edition, 2003.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"First, the path to the ONSAS folder is added and scalar parameters are set.","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"% add path\nclose all, clear all; addpath( genpath( [ pwd '/../../src'] ) );\n% scalar parameters for spring-mass system\nk        = 39.47 ;\nc        = 0.1   ;\nm        = 1     ;\np0       = 40    ; % amplitude of applied load\nu0       = 0.0   ; % initial displacement","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"parameters for the equivalent truss model","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"l   = 1   ;\nA   = 0.1 ;\nrho = m * 2 / ( A * l ) ;\nE   = k * l /   A       ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"omegaN       = sqrt( k / m );\nomegaBar     = 4*omegaN ;\nxi           = c / m  / ( 2 * omegaN ) ;\nnodalDamping = c ;\nfreq         = omegaN / (2*pi)      ;\nTN           = 2*pi / omegaN        ;\ndtCrit       = TN / pi              ;","category":"page"},{"location":"examples/springMass/#Analytic-solution","page":"Spring-mass system","title":"Analytic solution","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"$","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"u(t) =      ( Ac \\cos( \\omegaD  t ) + B \\sin( \\omegaD t ) ) e^{ -\\xi \\omegaN t } +     G1  \\cos( \\bar{\\omega} t ) + G2 \\sin( \\bar{\\omega} t ) $","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"if (c == 0) && (p0 == 0) % free undamped\n  myAnalyticFunc = @(t)   (   u0 * cos( omegaN * t )  ) ;\n  analyticCheckTolerance = 2e-1 ;\nelse\n  beta   = omegaBar / omegaN ;  omegaD = omegaN * sqrt( 1-xi^2 ) ;\n  G1 = (p0/k) * ( -2 * xi * beta   ) / ( ( 1 - beta^2 )^2 + ( 2 * xi * beta )^2 ) ;\n  G2 = (p0/k) * (  1      - beta^2 ) / ( ( 1 - beta^2 )^2 + ( 2 * xi * beta )^2 ) ;\n  if u0 < l\n    Ac = u0 - G1 ;\n    B  =  (xi*omegaN*Ac - omegaBar*G2 ) / (omegaD);\n  else\n    error('this analytical solution is not valid for this u0 and l0');\n  end\n  myAnalyticFunc = @(t) ...\n     ( Ac * cos( omegaD   * t ) + B  * sin( omegaD   * t ) ) .* exp( -xi * omegaN * t ) ...\n    + G1  * cos( omegaBar * t ) + G2 * sin( omegaBar * t ) ;\n    analyticCheckTolerance = 5e-2 ;\nend\n","category":"page"},{"location":"examples/springMass/#Numerical-solution","page":"Spring-mass system","title":"Numerical solution","text":"","category":"section"},{"location":"examples/springMass/#Numerical-case-1:-truss-element-model-with-newmark-method","page":"Spring-mass system","title":"Numerical case 1: truss element model with newmark method","text":"","category":"section"},{"location":"examples/springMass/#Materials","page":"Spring-mass system","title":"Materials","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"materials(1).hyperElasModel  = '1DrotEngStrain' ;\nmaterials(1).hyperElasParams = [ E 0 ] ;\nmaterials(1).density         = rho ;","category":"page"},{"location":"examples/springMass/#Elements","page":"Spring-mass system","title":"Elements","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"elements(1).elemType = 'node' ;\nelements(2).elemType = 'truss';\nelements(2).elemCrossSecParams = {'circle', [sqrt(4*A/pi) ] } ;\nelements(2).elemTypeParams = 0 ;","category":"page"},{"location":"examples/springMass/#Boundary-conditions","page":"Spring-mass system","title":"Boundary conditions","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"boundaryConds(1).imposDispDofs =  [ 1 3 5 ] ;\nboundaryConds(1).imposDispVals =  [ 0 0 0 ] ;\n%\nboundaryConds(2).imposDispDofs =  [ 3 5 ] ;\nboundaryConds(2).imposDispVals =  [ 0 0 ] ;\nboundaryConds(2).loadsCoordSys = 'global'                  ;\nboundaryConds(2).loadsTimeFact = @(t) p0*sin( omegaBar*t )                    ;\nboundaryConds(2).loadsBaseVals = [ 1 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/springMass/#Initial-conditions","page":"Spring-mass system","title":"Initial conditions","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"initialConds.nonHomogeneousInitialCondU0    = [ 2 1 u0    ] ;","category":"page"},{"location":"examples/springMass/#mesh","page":"Spring-mass system","title":"mesh","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"mesh.nodesCoords = [  0  0  0 ; ...\n                      l  0  0 ] ;\nmesh.conecCell = { } ;\nmesh.conecCell{ 1, 1 } = [ 0 1 1 0   1   ] ;\nmesh.conecCell{ 2, 1 } = [ 0 1 2 0   2   ] ;\nmesh.conecCell{ 3, 1 } = [ 1 2 0 0   1 2   ] ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"and the following parameters correspond to the iterative numerical analysis settings","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"analysisSettings.methodName    = 'newmark' ;\nanalysisSettings.deltaT        =   0.005  ;\nanalysisSettings.finalTime      =   1.2*TN   ;\nanalysisSettings.stopTolDeltau =   1e-8 ;\nanalysisSettings.stopTolForces =   1e-8 ;\nanalysisSettings.stopTolIts    =   10   ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"otherParams.problemName = 'springMass' ;\nglobal exportFirstMatrices\nexportFirstMatrices = true      ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"[matUsNewmark, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\ntimes = 0:analysisSettings.deltaT:(analysisSettings.finalTime+analysisSettings.deltaT) ;\nvalsAnaly = myAnalyticFunc(times) ;\nvalsNewmark = matUsNewmark(6+1,:) ;","category":"page"},{"location":"examples/springMass/#Numerical-case-2:-nodal-mass-model-with-\\alpha-HHT-method","page":"Spring-mass system","title":"Numerical case 2: nodal mass model with alpha-HHT method","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"exportFirstMatrices = true      ;\nmaterials(1).density  = 0 ;\nmaterials(2).nodalMass = [m m m] ;\nanalysisSettings.methodName    = 'alphaHHT' ;\nanalysisSettings.alphaHHT      =   0   ;\nmesh.conecCell{ 2, 1 } = [ 2 1 2 0   2   ] ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"[matUsHHT, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\nvalsHHT  = matUsHHT(6+1,:) ;","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"verifBooleanNewmark =  ( ( norm( valsAnaly - valsNewmark ) / norm( valsAnaly ) ) <  analyticCheckTolerance ) ;\nverifBooleanHHT     =  ( ( norm( valsAnaly - valsHHT     ) / norm( valsAnaly ) ) <  analyticCheckTolerance ) ;\nverifBoolean = verifBooleanHHT && verifBooleanNewmark ;","category":"page"},{"location":"examples/springMass/#Plots","page":"Spring-mass system","title":"Plots","text":"","category":"section"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"figure\nhold on, grid on\nplot(times, valsAnaly,'b-x')\nplot(times, valsNewmark,'r-o')\nplot(times, valsHHT,'g-s')\nlabx = xlabel('time');   laby = ylabel('\\lambda(t)') ;\nlegend( 'analytic', 'truss-Newmark','nodalMass-HHT', 'location','northoutside')\nprint('output/springMassCheck.png','-dpng')\nif exist('../../docs/src/assets/')==7\n  % printing plot also to docs directory\n  disp('printing plot also to docs directory')\n  print('../../docs/src/assets/springMassCheck.png','-dpng')\nend","category":"page"},{"location":"examples/springMass/","page":"Spring-mass system","title":"Spring-mass system","text":"<img src=\"../../assets/springMassCheck.png\" alt=\"plot check\" width=\"500\"/>","category":"page"},{"location":"tutorials/StaticVonMisesTruss/staticVonMisesTruss/","page":"-","title":"-","text":"%## Static Von Mises Truss example %#–- %# %#In this tutorial, the Static Von Mises Truss example and its resolutions using ONSAS are described. The aim of this example is to validate the Newton-Raphson method implementation by comparing the results provided by ONSAS with the analytical solution. The Octave script of this example is available at this url. %#  %#The structural model is formed by two truss elements with length L as it is shown in the figure, with the node 2 submitted to a nodal load P and restrained to move in the x-z plane and nodes 1 and 3 fixed. %# %#@raw html %#<img src=\"https://raw.githubusercontent.com/ONSAS/ONSAS_docs/master/docs/src/tutorials/StaticVonMisesTruss/vonMisesTruss.svg\" alt=\"structure diagram\" width=\"500\"/> %# %# %#Before defining the structs, the workspace is cleaned, the ONSAS directory is added to the path and scalar auxiliar parameters are defined.","category":"page"},{"location":"tutorials/StaticVonMisesTruss/staticVonMisesTruss/","page":"-","title":"-","text":"close all, clear all ;\naddpath( [ pwd '/../../src'] ); \nE = 210e9 ;  A = 2.5e-3 ; ang1 = 65 ; L = 2 ; nu = 0 ;\n% x and z coordinates\nauxx = cos( ang1*pi/180 ) * L ;  auxz = sin( ang1*pi/180 ) * L ;","category":"page"},{"location":"tutorials/StaticVonMisesTruss/staticVonMisesTruss/","page":"-","title":"-","text":"%# %### MEBI parameters %#––––––––– %# %#The modelling of the structure begins with the definition of the Material-Element-BoundaryConditions-InitialConditions (MEBI) parameters. %# %#### materials %# Since both bars are formed by the same material all the fields of the materials struct will have only one entry. contains only one vector. The constitutive behavior is the SaintVenantKirchhoff: materials.hyperElasModel  = { '1DrotEngStrain'} ; materials.hyperElasParams = { [ E nu ] } ; %# and the parameters of this model are the Young modulus and Poisson ratio. %# %#### elements %# %#Two different types of elements are considered, node and truss. The nodes will be assigned in the first entry (index 1) and the truss at the index 2. The elemType field is then: elements.elemType = { 'node','truss' } ; %# for the geometries, the node has no geometry to assign (empty array), and the truss elements will be set as a square-cross section, then the elemTypeGeometry field is: elements.elemTypeGeometry = { [], [2 sqrt(A) sqrt(A) ] }; elements.elemTypeParams = { [], 1 }; %# %#### boundaryConds %# %# The elements are submitted to two different BC settings. The nodes 1 and 3 are fixed without applied loads (first BC), and node 2 has a constraint in displacement and an applied load (second BC). The load factor function of the second BC is set so that the target load 1.5e8 is reached at 1 second. The density is set to zero, then no inertial effects are considered. %# boundaryConds.loadsCoordSys = { []        ; 'global'   } ; boundaryConds.loadsTimeFact = { []        ; @(t) 1.5e8t     } ; boundaryConds.loadsBaseVals = { []        ; [ 0 0 0 0 -1 0 ] } ; boundaryConds.imposDispDofs = { [ 1 3 5 ] ; 3          } ; boundaryConds.imposDispVals = { [ 0 0 0 ] ; 0          } ; %# %#### initial Conditions %# homogeneous initial conditions are considered, then an empty struct is set: initialConds                = struct() ; %# %### mesh parameters %#––––––––– %#The coordinates of the nodes of the mesh are given by the matrix: mesh.nodesCoords = [      0  0     0  ; ...                        auxx  0  auxz  ; ...                      2auxx  0     0  ] ; %#The connectivity is introduced using the conecCell. Each entry of the cell contains a vector with the four indexes of the MEBI parameters, followed by the indexes of the nodes of the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized: mesh.conecCell = { } ; %# then the first two nodes are defined, both with material zero (since nodes dont have material), the first element type (the first entry of the cells of the elements struct), and the first entry of the cells of the boundary conditions struct. No non-homogeneous initial condition is considered (then zero is used) and finally the node is included. mesh.conecCell{ 1, 1 } = [ 0 1 1 0  1   ] ;  mesh.conecCell{ 2, 1 } = [ 0 1 1 0  3   ] ;  %# the following case only differs in the boundary condition mesh.conecCell{ 3, 1 } = [ 0 1 2 0  2   ] ;  %# the truss elements are formed by the first material, the second type of element, and no boundary condition is applied. mesh.conecCell{ 4, 1 } = [ 1 2 0 0  1 2 ] ; mesh.conecCell{ 5, 1 } = [ 1 2 0 0  2 3 ] ;  %# %### analysisSettings %#––––––––– analysisSettings.methodName    = 'newtonRaphson' ; analysisSettings.deltaT        = 0.1 ; analysisSettings.finalTime     =   1 ; analysisSettings.stopTolDeltau =   1e-6 ; analysisSettings.stopTolForces =   1e-6 ; analysisSettings.stopTolIts    =   10 ; analysisSettings.finalTime     =   1 ; %# %### otherParams %#––––––––– otherParams.problemName = 'staticVonMisesTrussNR'; otherParams.plotParamsVector = [3]; otherParams.controlDofs = [2 5 ]; %# %### Analysis case 1: NR with Rotated Eng Strain %#––––––––– %# In the first case ONSAS is run and the solution at the dof of interest is stored . [matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ; controlDispsNREngRot =  -matUs(11,:) ; loadFactorsNREngRot  =  loadFactorsMat(:,2) ; %# and the analytical value of the load factors is computed analyticLoadFactorsNREngRot = @(w) -2 * EA ...      ( (  (auxz+(-w)).^2 + auxx^2 - L^2 ) ./ (L * ( L + sqrt((auxz+(-w)).^2 + auxx^2) )) ) ...   .* (auxz+(-w)) ./ ( sqrt((auxz+(-w)).^2 + auxx^2) )  ;  %# %# %### Results verification %#––––––––– %# %#### numerical verification [ analyticLoadFactorsNREngRot( controlDispsNREngRot)' loadFactorsNREngRot ] difLoad = analyticLoadFactorsNREngRot( controlDispsNREngRot)' - loadFactorsNREngRot ; verifBoolean = ( norm( difLoad ) / norm( loadFactorsNREngRot ) ) <  1e-4  %#### Plots lw = 2.0 ; ms = 11 ; plotfontsize = 22 ; figure plot( controlDispsNREngRot, analyticLoadFactorsNREngRot( controlDispsNREngRot) ,'b-x' , 'linewidth', lw,'markersize',ms ) hold on, grid on plot( controlDispsNREngRot, loadFactorsNREngRot, 'k-o' , 'linewidth', lw,'markersize',ms ) labx = xlabel('Displacement');   laby = ylabel('lambda') ; legend( 'analytic', 'NR-RotEng', 'location','North') set(gca, 'linewidth', 1.2, 'fontsize', plotfontsize ) set(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ; print('vonMisesTrussCheck.png','-dpng') %# %#```@raw html %#<img src=\"https://raw.githubusercontent.com/ONSAS/ONSASdocs/master/docs/src/tutorials/StaticVonMisesTruss/vonMisesTrussCheck.png\" alt=\"plot check\" width=\"500\"/> %#``` %#","category":"page"},{"location":"theory/prinTherWork/#Principle-of-Virtual-Thermal-Work","page":"Principle of Virtual Thermal Work","title":"Principle of Virtual Thermal Work","text":"","category":"section"},{"location":"theory/prinTherWork/#Variational-formulation-of-the-heat-flow-equation","page":"Principle of Virtual Thermal Work","title":"Variational formulation of the heat flow equation","text":"","category":"section"},{"location":"theory/prinTherWork/","page":"Principle of Virtual Thermal Work","title":"Principle of Virtual Thermal Work","text":"    int_Omega k nabla T cdot nabla delta T dV\n  + int_Omega rho c fracpartial Tpartial t delta T dV\n  =\n    int_Omega Q_h delta T d V\n  + int_partial Omega k nabla T cdot hatmathbfn delta T d S \n qquad forall delta T in tildemathcalT","category":"page"},{"location":"theory/prinTherWork/","page":"Principle of Virtual Thermal Work","title":"Principle of Virtual Thermal Work","text":"Considering the boundary conditions","category":"page"},{"location":"theory/prinTherWork/","page":"Principle of Virtual Thermal Work","title":"Principle of Virtual Thermal Work","text":"left\nbeginarraylr\nT(mathbfxt) = f_D(t)  texton Gamma_D \n-k fracpartial Tpartial n (mathbfxt) = f_N(mathbfxt)  texton  Gamma_N \n-k fracpartial Tpartial n (mathbfxt) = h left( T(mathbfxt)-T_infty(t) right)   texton  Gamma_R\nendarray\nright","category":"page"},{"location":"theory/prinTherWork/","page":"Principle of Virtual Thermal Work","title":"Principle of Virtual Thermal Work","text":"where h is the convection coefficient and T_infty(t) is the ambient temperature at time t.","category":"page"},{"location":"theory/prinTherWork/","page":"Principle of Virtual Thermal Work","title":"Principle of Virtual Thermal Work","text":"    int_Omega k nabla T cdot nabla delta T dV\n  + int_Omega rho c fracpartial Tpartial t delta T dV\n  + int_Gamma_R h T(mathbfxt) delta T d S \n  =\n    int_Omega Q_h delta T d V\n  + int_Gamma_N q_inp(mathbfxt)  delta T d S \n  + int_Gamma_R h T_infty(t) delta T d S \n\n qquad forall delta T in tildemathcalT","category":"page"},{"location":"theory/prinTherWork/","page":"Principle of Virtual Thermal Work","title":"Principle of Virtual Thermal Work","text":"where q_inp is the input heat flow q_inp = -f_N.","category":"page"},{"location":"theory/prinTherWork/#Finite-Elements","page":"Principle of Virtual Thermal Work","title":"Finite Elements","text":"","category":"section"},{"location":"theory/prinTherWork/","page":"Principle of Virtual Thermal Work","title":"Principle of Virtual Thermal Work","text":"mathbfK_diff^e = frac k^e A^eell^e \nleft\nbeginmatrix\n1  -1 \n-1  1\nendmatrix\nright","category":"page"},{"location":"theory/prinTherWork/","page":"Principle of Virtual Thermal Work","title":"Principle of Virtual Thermal Work","text":"mathbfC_intE^e = rho^e c^e A^e ell^e frac16 \nleft\nbeginmatrix\n2  1 \n1  2\nendmatrix\nright","category":"page"},{"location":"examples/cantileverBeam/#Uniform-curvature-cantilever-beam-example","page":"Cantilever Beam","title":"Uniform curvature cantilever beam example","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"In this tutorial, the Uniform curvature cantilever example and its resolution using ONSAS are described. The aim of this example is to validate the static co-rotational 3D beam implementation by comparing the results provided by ONSAS with the analytical solution.  The Octave script of this example is available at this url.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The problem consists in a beam, with one free end (right) submitted to a nodal moment M, and the other end (left) constrained (welded), as it is shown in the figure.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"<img src=\"assets/cantileverBeam_HTML.svg\" alt=\"structure diagram\" width=\"500\"/>","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"Before defining the structs, the workspace is cleaned, the ONSAS directory is added to the path and scalar geometry and material parameters are defined.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"close all, clear all ;\n% add path\naddpath( genpath( [ pwd '/../../src'] ) );\n% material scalar parameters\nE = 200e9 ;  nu = 0.3 ;\n% geometrical scalar parameters\nl = 10 ; ty = .1 ;  tz = .1 ;\n% the number of elements of the mesh\nnumElements = 10 ;","category":"page"},{"location":"examples/cantileverBeam/#Analytic-solution","page":"Cantilever Beam","title":"Analytic solution","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The rotation of the right end, for a given moment M, can be computed as:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":" M( theta ) = E I_y frac theta l   ","category":"page"},{"location":"examples/cantileverBeam/#Numerical-solution","page":"Cantilever Beam","title":"Numerical solution","text":"","category":"section"},{"location":"examples/cantileverBeam/#MEBI-parameters","page":"Cantilever Beam","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The modelling of the structure begins with the definition of the Material-Element-BoundaryConditions-InitialConditions (MEBI) parameters.","category":"page"},{"location":"examples/cantileverBeam/#materials","page":"Cantilever Beam","title":"materials","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"Since the example contains only one rod the fields of the materials struct will have only one entry. Although, it is considered constitutive behavior according to the SaintVenantKirchhoff law:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"materials.hyperElasModel  = '1DrotEngStrain' ;\nmaterials.hyperElasParams = [ E nu ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The density is not defined, therefore it is considered as zero (default), then no inertial effects are considered (static analysis).","category":"page"},{"location":"examples/cantileverBeam/#elements","page":"Cantilever Beam","title":"elements","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"Two different types of elements are considered, node and beam. The nodes will be assigned in the first entry (index 1) and the beam at the index 2. The elemType field is then:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"elements(1).elemType = 'node'  ;\nelements(2).elemType = 'frame' ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"for the geometries, the node has not geometry to assign (empty array), and the truss elements will be set as a rectangular-cross section with t_y and t_z cross-section dimensions in y and z directions, then the elemTypeGeometry field is:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"elements(2).elemCrossSecParams{1,1} = 'rectangle' ;\nelements(2).elemCrossSecParams{2,1} = [ty tz]     ;\nelements(2).elemTypeParams          = 1           ;","category":"page"},{"location":"examples/cantileverBeam/#boundaryConds","page":"Cantilever Beam","title":"boundaryConds","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The elements are submitted to two different BC settings. The first BC corresponds to a welded condition (all 6 dofs set to zero)","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"Iy = ty*tz^3/12 ;\nboundaryConds(1).imposDispDofs = [ 1 2 3 4 5 6 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"and the second corresponds to an incremental nodal moment, where the target load produces a circular form of the deformed beam.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"boundaryConds(2).loadsCoordSys = 'global'        ;\nboundaryConds(2).loadsTimeFact = @(t) E*Iy*2*pi/l *t ;\nboundaryConds(2).loadsBaseVals = [ 0 0 0 -1 0 0 ] ;","category":"page"},{"location":"examples/cantileverBeam/#initial-Conditions","page":"Cantilever Beam","title":"initial Conditions","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"homogeneous initial conditions are considered, then an empty struct is set:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"initialConds                = struct() ;","category":"page"},{"location":"examples/cantileverBeam/#mesh-parameters","page":"Cantilever Beam","title":"mesh parameters","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The coordinates of the nodes of the mesh are given by the matrix:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"mesh.nodesCoords = [ (0:(numElements))'*l/numElements  zeros(numElements+1,2) ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"The connectivity is introduced using the conecCell. Each entry of the cell contains a vector with the four indexes of the MEBI parameters, followed by the indexes of the nodes of the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"mesh.conecCell = { } ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"then the first two nodes are defined, both with material zero (since nodes dont have material), the first element type (the first entry of the cells of the elements struct), and the first entry of the cells of the boundary conditions struct. No non-homogeneous initial condition is considered (then zero is used) and finally the node is included.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"mesh.conecCell{ 1, 1 } = [ 0 1 1 0  1   ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"the following case only differs in the boundary condition and the node number","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"mesh.conecCell{ 2, 1 } = [ 0 1 2 0  numElements+1 ] ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"the beam elements are formed by the first material, the second type of element, and no boundary conditions are applied to any element.","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"for i=1:numElements,\n  mesh.conecCell{ i+2,1 } = [ 1 2 0 0  i i+1 ] ;\nend","category":"page"},{"location":"examples/cantileverBeam/#analysisSettings","page":"Cantilever Beam","title":"analysisSettings","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"analysisSettings.methodName    = 'newtonRaphson' ;\nanalysisSettings.deltaT        =   0.1  ;\nanalysisSettings.finalTime      =   1    ;\nanalysisSettings.stopTolDeltau =   1e-6 ;\nanalysisSettings.stopTolForces =   1e-6 ;\nanalysisSettings.stopTolIts    =   10   ;","category":"page"},{"location":"examples/cantileverBeam/#otherParams","page":"Cantilever Beam","title":"otherParams","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"otherParams.problemName = 'uniformCurvatureCantilever';\notherParams.controlDofs = [ numElements+1  4 ] ;\notherParams.plotsFormat = 'vtk' ;","category":"page"},{"location":"examples/cantileverBeam/#Analysis-case-1:-NR-with-Rotated-Eng-Strain","page":"Cantilever Beam","title":"Analysis case 1: NR with Rotated Eng Strain","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"In the first case ONSAS is run and the solution at the dof (angle of node B) of interest is stored:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"the control dof to verificate the solution is the node angle B, this corresponds to the following dof number:","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"angleControlDof      = (numElements+1)*6 - 2;\ncontrolDispsNREngRot =  -matUs(angleControlDof,:) ;\nloadFactorsNREngRot  =  loadFactorsMat(:,2) ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"and the analytical value of the load factors is computed","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"analyticLoadFactorsNREngRot = @(w) E * Iy * w / l ;","category":"page"},{"location":"examples/cantileverBeam/#Verification","page":"Cantilever Beam","title":"Verification","text":"","category":"section"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"verifBoolean = norm( analyticLoadFactorsNREngRot( controlDispsNREngRot) ...\n                     - loadFactorsNREngRot' )  ...\n                    < ( norm( analyticLoadFactorsNREngRot( controlDispsNREngRot) ) * 1e-4 ) ;","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"lw = 2.0 ; ms = 11 ; plotfontsize = 22 ;\nfigure\nplot( controlDispsNREngRot, analyticLoadFactorsNREngRot( controlDispsNREngRot) ,'b-x' , 'linewidth', lw,'markersize',ms )\nhold on, grid on\nplot( controlDispsNREngRot, loadFactorsNREngRot, 'k-o' , 'linewidth', lw,'markersize',ms )\nlabx = xlabel('Displacement');   laby = ylabel('$\\lambda$') ;\nlegend('analytic','NR-RotEng','location','North')\nset(gca, 'linewidth', 1.2, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\nprint('output/verifCantileverBeam.png','-dpng')","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"<img src=\"assets/verifCantileverBeam.png\" alt=\"plot check\" width=\"500\"/>","category":"page"},{"location":"examples/cantileverBeam/","page":"Cantilever Beam","title":"Cantilever Beam","text":"verifBoolean = norm( analyticLoadFactorsNREngRot( controlDispsNREngRot) - loadFactorsNREngRot' )  < ( norm( analyticLoadFactorsNREngRot( controlDispsNREngRot) ) * 1e-4 ) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#Aerodynamic-non-linear-cantilever-beam-example","page":"Non-linear aerodynamic cantilever beam","title":"Aerodynamic non-linear cantilever beam example","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"In this tutorial, the aerodynamic non-linear cantilever beam example is solved using ONSAS. The aim of this problem is to validate aerodynamic steady wind loads applied to a cantilever beam undergoing small strains. The aerodynamic force modification due to the beam deformation is considered (drag reconfiguration). Given the aforementioned characteristics and under the hypothesis of small displacements regime a semi-analytic solution is available.   ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The beam is submitted to a uniform air wind velocity field V_a, at 20 degrees and atmospheric pressure, along axis y. Due to revolution symmetry of the problem lift c_l and torsional moment c_m coefficients are null. A drag coefficient c_d=12 is extracted from this reference.  The beam has a length L and a circular solid cross section with diameter d as it is shown in the following figure: ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"<img src=\"../../assets/nonLinearCantileverAero/ilusNonLinearStaticCantileverAero.svg\" alt=\"general dimensions sketch\" width=\"700\"/>","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The Octave script of this example is available at : (Image: Octave script)","category":"page"},{"location":"examples/nonLinearCantileverAero/#Small-displacements-2D-case","page":"Non-linear aerodynamic cantilever beam","title":"Small displacements 2D case","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/#Static-semi-analytic-solution","page":"Non-linear aerodynamic cantilever beam","title":"Static semi-analytic solution","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The wind load forces of a generic cross section can be derived within the quasi-steady-theory. Considering a cross section located at x, then the projected wind velocity into the transverse deformed plane is then  V_p=V_acos(theta_z) (the axial drag is neglected). Subsequently a drag force per unit of length F_d= frac12 rho d c_d V_p^2 with fracV_pV_p direction is applied. In order to link the force F_d with the beam deflection, the uniform distributed force along y is computed as F_y=F_dcos(theta_z). This leads to the following third order differential equation:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"EI_zz fracpartial ^3 theta_zpartial x ^3 = -q_0 c_dcos^3(theta_z)","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"in which q_0 = frac12 rho_f d V_a^2 and the air density is rho_f = 1225 kg/m^3.","category":"page"},{"location":"examples/nonLinearCantileverAero/#Numerical-solution","page":"Non-linear aerodynamic cantilever beam","title":"Numerical solution","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Before defining the structs, the workspace is cleaned and ONSAS directory is added:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"close all, clear all ; addpath( genpath( [ pwd '/../../src'] ) );","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"material and geometrical parameters are defined:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"E = 1e9 ;  nu = 0.3 ; rho = 1800 ; G = E / (2 * (1+nu)) ;\nl = 10 ; d = l/100 ; J = pi * d ^ 4 / 32 ; Iyy = J / 2 ; Izz = Iyy ;  ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"next the number of frame elements for all cases is set:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"numElements = 10 ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#MEBI-parameters","page":"Non-linear aerodynamic cantilever beam","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/#materials","page":"Non-linear aerodynamic cantilever beam","title":"materials","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Since the example contains only one linear Euler Bernoulli element the fields of the materials struct will have only one entry. Although, the constitutive behavior law selected is Saint-Venant-Kirchhoff:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"materials.hyperElasModel  = 'linearElastic' ;\nmaterials.hyperElasParams = [ E nu ]        ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"note that the use of  this linear elastic element guarantees the left hand side of the differential equation stated above.","category":"page"},{"location":"examples/nonLinearCantileverAero/#elements","page":"Non-linear aerodynamic cantilever beam","title":"elements","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Two different types of elements are considered, node and frames. The nodes will be assigned in the first entry (index 1) and the beam at the index 2. The elemType field is then:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"elements(1).elemType = 'node'  ;\nelements(2).elemType = 'frame' ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The node has not cross section geometry to assign (an empty array is automatically set). The solid circular cross section is preset in ONSAS, and to load it just use:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"elements(2).elemCrossSecParams{1,1} = 'circle' ;\nelements(2).elemCrossSecParams{2,1} = d        ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Now the element aerodynmamic properties are defined. First the drag coefficient function located at the folder's example is declared into userDragCoef field as:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"elements(2).userDragCoef   = 'dragCoefCircular'   ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Next the elemTypeAero field contains the information of the chord vector. This vector is defined first considering the orientation of the cross section set up for drag experiments. According to the revolution symmetry of the problem the chord vector orientation has no impact into drag force vector, since c_d is constant any angle of incidence. However the characteristic dimension of the circular cross section is declared into the norm of the chord vector ( first three entries of elemTypeAero field into elements struct ) as: ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"numGaussPoints           = 4 ;\nelements(2).elemTypeAero = [0 d 0 numGaussPoints ] ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"also 4 number of integration Gauss points are employed to compute each element aerodynamic force vector.","category":"page"},{"location":"examples/nonLinearCantileverAero/#boundaryConds","page":"Non-linear aerodynamic cantilever beam","title":"boundaryConds","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Only one welded (6 degrees of freedom are set to zero) boundary condition (BC) is considered:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"boundaryConds(1).imposDispDofs = [ 1 2 3 4 5 6 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#initial-Conditions","page":"Non-linear aerodynamic cantilever beam","title":"initial Conditions","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Any non-homogeneous initial conditions are considered, then an empty struct is set:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"initialConds = struct() ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#mesh-parameters","page":"Non-linear aerodynamic cantilever beam","title":"mesh parameters","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The coordinates of the mesh nodes are given by the matrix:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"mesh.nodesCoords = [ (0:(numElements))'*l/numElements  zeros(numElements+1,2) ] ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The connectivity is introduced using the conecCell. Each entry of the cell contains a vector with the four indexes of the MEBI parameters, followed by the indexes of nodes that compose the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"mesh.conecCell = { } ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"then the first welded node is defined with material (M) zero since nodes don't have material, the first element (E) type (the first entry of the elements struct), and (B) is the first entry of the the boundaryConds struct. For (I) no non-homogeneous initial condition is considered (then zero is used) and finally the node is assigned:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"mesh.conecCell{ 1, 1 } = [ 0 1 1 0  1 ] ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Next the frame elements MEBI parameters are set. The frame material is the first material of materials struct, then 1 is assigned. The second entry of the elements struct correspond to the frame element employed, so 2 is set. Finally no BC and no IC is required for this element, then 0 is used.  Consecutive nodes build the element so then the mesh.conecCell is:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"for i=1:numElements,\n  mesh.conecCell{ i+1,1 } = [ 1 2 0 0  i i+1 ] ;\nend","category":"page"},{"location":"examples/nonLinearCantileverAero/#analysisSettings","page":"Non-linear aerodynamic cantilever beam","title":"analysisSettings","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"First the wind velocity function name is set into userWindVel field of analysisSettings struct. This will apply a external wind loads for each element with elemTypeAero field into the elements struct. The name of the wind velocity function located on the same example path is: ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"analysisSettings.userWindVel = 'windVelNonLinearStatic' ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Inside that function a linear velocity v_a = 30*t is declared. The final time will be set to 1 in order to achieve 30 m/s.  The geometrical non-linear effects are considered in this case to compute the aerodynamic force. As consequence the wind load forces are computed on the deformed configuration. The field  geometricNonLinearAero into  analysisSettings struct is then set to:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"analysisSettings.geometricNonLinearAero = true;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"note that if this boolean is not declared ONSAS will automatically assign it as true.   since this problem is static, then a N-R method is employed. The convergence of the method is accomplish with ten equal load steps. The time variable for static cases is a load factor parameter that must be configured into the windVel.m function. A linear profile is considered for ten equal velocity load steps as:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"analysisSettings.deltaT        =   0.1           ;\nanalysisSettings.finalTime     =   1             ;\nanalysisSettings.methodName    = 'newtonRaphson' ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Next the maximum number of iterations per load(time) step, the residual force and the displacements tolerances are set to: ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"analysisSettings.stopTolDeltau =   1e-6          ;\nanalysisSettings.stopTolForces =   1e-6          ;\nanalysisSettings.stopTolIts    =   40            ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#otherParams","page":"Non-linear aerodynamic cantilever beam","title":"otherParams","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The name of the problem and vtk format output are selected: ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"otherParams.problemName = 'nonLinearCantileverSD2D';\notherParams.plotsFormat = 'vtk' ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"ONSAS software is executed for the parameters above defined and the displacement solution of each load(time) step is saved into matUsSD matrix:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"[matUsSD, ~] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#Verification","page":"Non-linear aerodynamic cantilever beam","title":"Verification","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/#DifferentialEquations.jl-(reconfiguration)-solution.","page":"Non-linear aerodynamic cantilever beam","title":"DifferentialEquations.jl (reconfiguration) solution.","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"DiffEq.jl solves the third order ordinary differential equation for this case by executing DiffEq.jl script. Then  assembleJuliaSol.m script function is executed to build the julia solution with mesh and elements struct as:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"[dSolJulia] = assembleJuliaSol(elements,mesh) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Then the the relevance linear and angular displacements are extracted using:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"ydefJulia = dSolJulia(3:6:end)              ;\nthetaZdefJulia = dSolJulia(6:6:end)         ;\nxdefJulia = linspace(0,l,length(ydefJulia)) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#Numeric-solution","page":"Non-linear aerodynamic cantilever beam","title":"Numeric solution","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The numerical solution is computed:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"xref    = mesh.nodesCoords(:,1)       ;\nyref    = mesh.nodesCoords(:,2)       ;\nzref    = mesh.nodesCoords(:,3)       ;\nxdefNum = xref + matUsSD(1:6:end,end) ;\nydefNum = yref + matUsSD(3:6:end,end) ;\nthetaZdefNum = matUsSD(6:6:end,end)   ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#Plot-verification","page":"Non-linear aerodynamic cantilever beam","title":"Plot verification","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The plot parameters are:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"lw = 2 ; ms = 12 ;\nlabelTitle = [' Validating solution with ' num2str(numElements) ' elements' ] ;\naxislw = 2 ; axisFontSize = 20 ; legendFontSize = 15 ; curveFontSize = 15 ;    \nfolderPathFigs = './output/figs/' ;\nmkdir(folderPathFigs) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The linear u_y displacements verification is plotted executing:  ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"fig1 = figure(1) ;\nhold on, grid on\nplot(xref      , ydefNum  , 'bo' , 'linewidth', lw, 'markersize', ms+5   );\nplot(xdefJulia , ydefJulia, 'b-' , 'linewidth', lw, 'markersize', ms     );\nlegend('y numeric SD', 'y semi-analytic SD' )\nlabx=xlabel(' x[m] ');    laby=ylabel('y[m]');\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northWest' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig1 = strcat(folderPathFigs, 'linDispSD.png') ;\nprint(fig1, namefig1,'-dpng') ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"<img src=\"../../assets/nonLinearCantileverAero/linDispSD.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The angular theta_z displacements verification is plotted executing:  ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"fig2 = figure(2) ;\nhold on, grid on\nplot(xref,      thetaZdefNum,      'bo' , 'linewidth', lw,'markersize', ms+5   );\nplot(xdefJulia, thetaZdefJulia,    'b-' , 'linewidth', lw, 'markersize', ms    );\nlegend('\\theta_z numeric SD', '\\theta_z semi-analyitc SD')\nlabx=xlabel(' x[m] ');    laby=ylabel('Angle[rad]');\n% title (labelTitle)\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northWest' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig2 = strcat(folderPathFigs, 'angDispSD.png') ;\nprint(fig2, namefig2,'-dpng')","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"<img src=\"../../assets/nonLinearCantileverAero/angDispSD.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearCantileverAero/#Large-displacements-2D-case","page":"Non-linear aerodynamic cantilever beam","title":"Large displacements 2D case","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Now a large displacements 2D case is solved. The solution is computed using the co-rotational beam element formulation proposed in this reference","category":"page"},{"location":"examples/nonLinearCantileverAero/#Numerical-solution-static-case","page":"Non-linear aerodynamic cantilever beam","title":"Numerical solution static case","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/#MEBI-parameters-2","page":"Non-linear aerodynamic cantilever beam","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/#materials-2","page":"Non-linear aerodynamic cantilever beam","title":"materials","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"In order to reproduce large displacements results the materials struct is then changed to: ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"materials.hyperElasModel  = '1DrotEngStrain' ;\nmaterials.hyperElasParams = [ 1e8 nu ]       ;\nmaterials.density         = rho              ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#elements-2","page":"Non-linear aerodynamic cantilever beam","title":"elements","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The element tangent matrices of the consistent inertial force vector are taking into account by the following boolean:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"elements(2).elemTypeParams = 1 ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#otherParams-2","page":"Non-linear aerodynamic cantilever beam","title":"otherParams","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The name of this case problem is:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"otherParams.problemName = 'nonLinearCantileverLDStatic' ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"ONSAS software is executed for the parameters above defined and the displacement solution of each load(time) step is saved into matUsLDStatic matrix:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"[matUsLDStatic, ~] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/#Numerical-solution-dynamic-case","page":"Non-linear aerodynamic cantilever beam","title":"Numerical solution dynamic case","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Next a dynamic example considering large displacements motion is addressed to test the convergence of the dynamic solution disregarding any artificial damping. ","category":"page"},{"location":"examples/nonLinearCantileverAero/#analysisSettings-2","page":"Non-linear aerodynamic cantilever beam","title":"analysisSettings","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"For such propose the wind velocity function name is now: ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"analysisSettings.userWindVel = 'windVelNonLinearDynamic2D' ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Inside that function a ramp velocity profile v_a(t) = 5*t*(t66) + 5*t*(t=66) is declared. This is an abrupt wind velocity load from 0 to 7 m/s in 10 s .","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Regarding the integration time method scheme, a classic Newmark trapezoidal is set as:  ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"analysisSettings.deltaT     =  1        ;\nanalysisSettings.finalTime  =  200      ;\nanalysisSettings.methodName = 'newmark' ;\nanalysisSettings.alphaNM    =  0.25     ;\nanalysisSettings.deltaNM    =  0.5      ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#otherParams-3","page":"Non-linear aerodynamic cantilever beam","title":"otherParams","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The name of this case problem is:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"otherParams.problemName = 'nonLinearCantileverLDDynamic2D' ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"ONSAS software is executed for the parameters above defined and the displacement solution for each time step is saved into matUsLDDynamic matrix:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"[matUsLDDynamic, ~] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#Verification-2","page":"Non-linear aerodynamic cantilever beam","title":"Verification","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The numerical dynamic convergence to the static solution is then verified . The degree of freedom selected for such task is u_y(t) of node A. ","category":"page"},{"location":"examples/nonLinearCantileverAero/#Static-solution.","page":"Non-linear aerodynamic cantilever beam","title":"Static solution.","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Extract static numerical time history displacements u_y of node A. First the selected degree of freedom is:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"nodeA = numElements + 1                ;\nrelativeDofUyA = 3                     ;\ndofUyA = (nodeA -1)*6 + relativeDofUyA ; ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"then node A u_y time history accessed by:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"UyAStaticSol = matUsLDStatic(dofUyA,:) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#Dynamic-solution.","page":"Non-linear aerodynamic cantilever beam","title":"Dynamic solution.","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Extract dynamic numerical solution as follows:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"UyADynamicSol = matUsLDDynamic(dofUyA,:) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"next, the time vector is given by:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"timVecLD = linspace(0, analysisSettings.finalTime, size(matUsLDDynamic,2) ) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#Verification-Plot","page":"Non-linear aerodynamic cantilever beam","title":"Verification Plot","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Create folder to save figures","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"folderFigs = strcat('./output/', 'figs/') ;\nmkdir(folderFigs) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The linear u_y displacements verification of node  A is finally plotted executing:  ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"fig3 = figure(3) ;\nhold on,  grid on\n% legend first point plot\nplot(timVecLD(1), UyADynamicSol(1),...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', 'o')\n% static solution plot\nplot(timVecLD   , UyAStaticSol(end)*ones(length(timVecLD)), 'k:' , 'linewidth', lw, 'markersize', ms     );\n% markers plot\nplot(timVecLD(1:8:end), UyADynamicSol(1:8:end),...\n     'color', 'b', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', 'o')\n% continium line plot\nplot(timVecLD, UyADynamicSol,...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\nlegend('dynamic LD', 'static LD' )\nlabx=xlabel('x[m]');    laby=ylabel('y[m]');\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northEast' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig3 = strcat(folderPathFigs, 'uyA.png') ;\nprint(fig3, namefig3,'-dpng') ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"<img src=\"../../assets/nonLinearCantileverAero/uyA.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearCantileverAero/#Large-displacements-3D-case","page":"Non-linear aerodynamic cantilever beam","title":"Large displacements 3D case","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"A large displacements dynamic 3D case is presented as follows. This example is inspired on Vortex shedding  exposed at (Image: Youtbue Video)","category":"page"},{"location":"examples/nonLinearCantileverAero/#MEBI-parameters-3","page":"Non-linear aerodynamic cantilever beam","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/nonLinearCantileverAero/#materials-3","page":"Non-linear aerodynamic cantilever beam","title":"materials","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"In order to reproduce large displacements results the materials struct is then changed to: ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"materials.hyperElasParams = [ 1e8 nu ]       ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#analysisSettings-3","page":"Non-linear aerodynamic cantilever beam","title":"analysisSettings","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Regarding the integration time method scheme, a classic alpha-HHT method is employed. This method is more stable numerically than Newmark, the keen reader is refereed to this reference:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"analysisSettings.methodName = 'alphaHHT';\nanalysisSettings.alphaHHT   =   -0.05   ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"the simulation time is defined such that:  ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"analysisSettings.deltaT     =  .2  ;\nanalysisSettings.finalTime  =  120 ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The emulation of the vortex shedding vibration is generated by a synthetic wind velocity composed by two sinusoidal velocities. A low frequency Vy_a along the mean flow direction y and then a high frequency component  Vz_a along z. The high frequency component is selected to produce resonance effects between the flow and the beam, thus the high frequency velocity is selected equal to the first mode bending:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"freqBendingFirstMode = (1.875)^2 * sqrt( materials.hyperElasParams(1) * Iyy / (materials.density * (pi * d^4 / 4) * l^4) ) ;\nanalysisSettings.userWindVel = 'windVelNonLinearDynamic3D' ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The velocity function componentes are assembled:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"timeVecLD3d = linspace(0,analysisSettings.finalTime, ceil(analysisSettings.finalTime / analysisSettings.deltaT + 1) ) ;\nwindVelY = [] ; windVelZ = [] ;\nfor timeIndex = timeVecLD3d\n    windVelVecTimeIndex = feval(analysisSettings.userWindVel, 0, timeIndex) ;\n    windVelY = [windVelY windVelVecTimeIndex(2) ] ;\n    windVelZ = [windVelZ windVelVecTimeIndex(3) ] ;\nend","category":"page"},{"location":"examples/nonLinearCantileverAero/#otherParams-4","page":"Non-linear aerodynamic cantilever beam","title":"otherParams","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The name of this case problem is:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"otherParams.problemName = 'nonLinearCantileverLD3D' ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"ONSAS software is executed for the parameters above defined and the displacement solution for each time step is saved into matUsLD3D matrix:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"[matUsLD3D, ~] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/#Plots","page":"Non-linear aerodynamic cantilever beam","title":"Plots","text":"","category":"section"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"The wind velocity profile implemented is plotted executing:  ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"fig4 = figure(4) ;\nhold on,  grid on\n% legend first point plot\nplot(timeVecLD3d(1), windVelY(1),...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', 'o')\nplot(timeVecLD3d(1), windVelZ(1),...\n     'color', 'r', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', '^')\n% markers plot\nplot(timeVecLD3d(1:10:end), windVelY(1:10:end),...\n     'color', 'b', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', 'o')\nplot(timeVecLD3d(1:17:end), windVelZ(1:17:end),...\n     'color', 'r', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', '^')\n% continium line plot\nplot(timeVecLD3d, windVelY,...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\nplot(timeVecLD3d, windVelZ,...\n     'color', 'r', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\nlegend('Va_y', 'Va_z' )\nlabx=xlabel('t[s]');    laby=ylabel('V_a[m/s]');\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northEast' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig4 = strcat(folderPathFigs, 'windVel3D.png') ;\naxis([0,50])\nprint(fig4, namefig4,'-dpng') ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"<img src=\"../../assets/nonLinearCantileverAero/windVel3D.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Then u_y of node A  is computed using:  ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"UyADynamicSol3D = matUsLD3D(dofUyA,:) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"analogosuly u_z of A node is:  ","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"UzADynamicSol3D = matUsLD3D(dofUyA + 2,:) ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Open figure and plot","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"fig5 = figure(5) ;\nhold on,  grid on\n% legend first point plot uy \nplot(timeVecLD3d(1), UyADynamicSol3D(1),...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', 'o')\n% legend first point plot uz\nplot(timeVecLD3d(1), UzADynamicSol3D(1),...\n     'color', 'r', 'linewidth', lw, 'linestyle', '-','markersize', ms, 'marker', '^')\n% markers plot uy\nplot(timeVecLD3d(1:13:end), UyADynamicSol3D(1:13:end),...\n     'color', 'b', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', 'o')\n% continium line plot uy\nplot(timeVecLD3d, UyADynamicSol3D,...\n     'color', 'b', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\n% markers plot uz\nplot(timeVecLD3d(1:23:end), UzADynamicSol3D(1:23:end),...\n     'color', 'r', 'linewidth', lw, 'linestyle', 'none','markersize', ms, 'marker', '^')\n% continium line plot uz\nplot(timeVecLD3d, UzADynamicSol3D,...\n     'color', 'r', 'linewidth', lw, 'linestyle', '-', 'marker', 'none')\nlegend('U_y node A', 'U_z node A' )\nlabx=xlabel('x[m]');    laby=ylabel('Dispalcements[m]');\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize, 'location','northEast' ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nnamefig5 = strcat(folderPathFigs, 'uA3D.png') ;\nprint(fig5, namefig5,'-dpng') ;","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"<img src=\"../../assets/nonLinearCantileverAero/uA3D.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"Finally a GIF to illustrate the motion amplitude is subsequently presented:","category":"page"},{"location":"examples/nonLinearCantileverAero/","page":"Non-linear aerodynamic cantilever beam","title":"Non-linear aerodynamic cantilever beam","text":"<img src=\"../../assets/nonLinearCantileverAero/cyilindricalCantBeam3D.gif\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"theory/numericalMethods/#Numerical-Methods","page":"Numerical Methods","title":"Numerical Methods","text":"","category":"section"},{"location":"theory/numericalMethods/#ArcLength-Method","page":"Numerical Methods","title":"ArcLength Method","text":"","category":"section"},{"location":"theory/numericalMethods/","page":"Numerical Methods","title":"Numerical Methods","text":"lambda^2 cdot left bardelta textbfu right^2 \n+\nlamda cdot left(  2( Delta textbfu + delta textbfu^* )^T delta textbfu  right)\n+\n left( (  left Delta textbfu delta textbfu^* left ) - r_arc^2 right)","category":"page"},{"location":"examples/staticVonMisesTruss/#Static-Von-Mises-Truss-example","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss example","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"(Image: Octave script)","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"In this example the Static Von Mises Truss problem and its resolution using ONSAS are described. The aim of this example is to validate the Newton-Raphson and Newton-Raphson-Arc-Length methods implementation by comparing the results provided with the analytic solutions.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The structural model is formed by two truss elements with length L as it is shown in the figure, with node 2 submitted to a nodal load P and restrained to move in the x-z plane, and nodes 1 and 3 fixed.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"<img src=\"../../assets/vonMisesTruss.svg\" alt=\"von-mises truss structure diagram\" width=\"500\"/>","category":"page"},{"location":"examples/staticVonMisesTruss/#Analytic-solutions","page":"Static Von-Mises Truss","title":"Analytic solutions","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The solutions for the nonlinear cases are developed in section 2.3 of (Bazzano and Pérez Zerpa, 2017). The expressions obtained for different strain measures are:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Rotated-Engineering: P = fracEA_o(z_2+w)left(sqrt(w+z_2)^2+x_2^2-l_oright)l_osqrt(w+z_2)^2+x_2^2\nSVK: P = fracEA_o (z_2+w)left( 2 z_2 w + w^2 right)  2 l_o^3 ","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"where x_2 and z_2 are the coordinates of node 2 and w is measured positive as z.","category":"page"},{"location":"examples/staticVonMisesTruss/#Numerical-solutions","page":"Static Von-Mises Truss","title":"Numerical solutions","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Before defining the structs, the workspace is cleaned, the ONSAS directory is added to the path and scalar auxiliar parameters are defined.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"close all, clear all ; addpath( genpath( [ pwd '/../../src'] ) );\n% scalar parameters\nE = 210e9 ;  A = 2.5e-3 ; ang1 = 65 ; L = 2 ; nu = 0 ;\n% x and z coordinates of node 2\nx2 = cos( ang1*pi/180 ) * L ;\nz2 = sin( ang1*pi/180 ) * L ;","category":"page"},{"location":"examples/staticVonMisesTruss/#MEBI-parameters","page":"Static Von-Mises Truss","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The modelling of the structure begins with the definition of the Material-Element-BoundaryConditions-InitialConditions (MEBI) parameters.","category":"page"},{"location":"examples/staticVonMisesTruss/#materials","page":"Static Von-Mises Truss","title":"materials","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Since both bars are formed by the same material only one materials struct is defined. The constitutive behavior considered in the first analysis case is the Rotated Engineering strain, then the field hyperElasModel is set to:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"materials.hyperElasModel  = '1DrotEngStrain' ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and in the field hyperElasParams a vector with the parameters of the Engineering Strain model is set","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"materials.hyperElasParams = [ E nu ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"which in the case of this model are the Young modulus and the Poisson ratio.  The field density is not set, then the default rho = 0 value is considered by ONSAS.","category":"page"},{"location":"examples/staticVonMisesTruss/#elements","page":"Static Von-Mises Truss","title":"elements","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Two different types of elements are required to create the model: node and truss, thus, the elements struct will have two entries. The type of the first entry is","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"elements(1).elemType = 'node' ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the second entry is","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"elements(2).elemType = 'truss';","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"for the geometries, the node has no geometry to assign, and the truss elements will be set as a circle cross-section, then the elemCrossSecParams field is:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"elements(2).elemCrossSecParams = { 'circle' , sqrt(A*4/pi) } ;\nelements(2).elemTypeParams = 1 ;","category":"page"},{"location":"examples/staticVonMisesTruss/#boundaryConds","page":"Static Von-Mises Truss","title":"boundaryConds","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The elements are submitted to two different BoundaryConditions, then the struct boundaryConds will have length two.  The nodes 1 and 3 are fixed, without loads applied (this is the first BC), and node 2 has a constraint in displacement and an applied load (second BC).  For the displacements, the first BC corresponds to a xyz-fixed displacement,","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"boundaryConds(1).imposDispDofs = [ 1 3 5 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the second BC corresponds to a zero displacement only in the y direction.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"boundaryConds(2).imposDispDofs =  3 ;\nboundaryConds(2).imposDispVals =  0 ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Regarding the loads, the second BC is set so that the final load factor is 3 cdot 10^8 at 1 second. The default zero density is used, then no inertial effects are considered.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"boundaryConds(2).loadsCoordSys = 'global'         ;\nboundaryConds(2).loadsTimeFact = @(t) 3.0e8*t     ;\nboundaryConds(2).loadsBaseVals = [ 0 0 0 0 -1 0 ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/#initial-Conditions","page":"Static Von-Mises Truss","title":"initial Conditions","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"homogeneous initial conditions are considered, then an empty struct is set:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"initialConds                = struct() ;","category":"page"},{"location":"examples/staticVonMisesTruss/#mesh-parameters","page":"Static Von-Mises Truss","title":"mesh parameters","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The coordinates of the nodes of the mesh are given by the matrix:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.nodesCoords = [   0  0   0 ; ...\n                      x2  0  z2 ; ...\n                    2*x2  0   0 ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"where the columns 1,2 and 3 correspond to x, y and z coordinates, respectively, and the row i-th corresponds to the coordinates of node i.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The connectivity is introduced using the conecCell cell. Each entry of the cell (indexed using {}) contains a vector with the four indexes of the MEBI parameters, followed by the indexes of the nodes of the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell = { } ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Then the entry of node 1 is introduced:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell{ 1, 1 } = [ 0 1 1 0  1   ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"the first MEBI parameter (Material) is set as zero (since nodes dont have material). The second parameter corresponds to the Element, and a 1 is set since node is the first entry of the  elements.elemType cell. For the BC index, we consider that node 1 is fixed, then the first index of the boundaryConds struct is used. Finally, no specific initial conditions are set for the node (0) and at the end of the vector the number of the node is included (1).  A similar approach is used for node 3,","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell{ 2, 1 } = [ 0 1 1 0  3   ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and for node 2 only the boundary condition is changed.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell{ 3, 1 } = [ 0 1 2 0  2   ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"Regarding the truss elements, the first material is considered, the second type of element, and no boundary conditions are applied.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"mesh.conecCell{ 4, 1 } = [ 1 2 0 0  1 2 ] ;\nmesh.conecCell{ 5, 1 } = [ 1 2 0 0  2 3 ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/#analysisSettings","page":"Static Von-Mises Truss","title":"analysisSettings","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"The method used in the analysis is the Newton-Raphson, then the field methodName must be introduced as:","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"analysisSettings.methodName    = 'newtonRaphson' ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the following parameters correspond to the iterative numerical analysis settings","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"analysisSettings.deltaT        =   0.1  ;\nanalysisSettings.finalTime      =   1    ;\nanalysisSettings.stopTolDeltau =   1e-8 ;\nanalysisSettings.stopTolForces =   1e-8 ;\nanalysisSettings.stopTolIts    =   15   ;","category":"page"},{"location":"examples/staticVonMisesTruss/#otherParams","page":"Static Von-Mises Truss","title":"otherParams","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"otherParams.problemName = 'staticVonMisesTruss_NR_RotEng';\notherParams.plotsFormat = 'vtk' ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Analysis-case-1:-NR-with-Rotated-Eng-Strain","page":"Static Von-Mises Truss","title":"Analysis case 1: NR with Rotated Eng Strain","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"In the first case ONSAS is run and the solution at the dof of interest is stored.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\ncontrolDispsNREngRot =  -matUs(11,:) ;\nloadFactorsNREngRot  =  loadFactorsMat(:,2) ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Numerical-solution-for-linear-elastic-behavior","page":"Static Von-Mises Truss","title":"Numerical solution for linear elastic behavior","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"materials.hyperElasModel  = 'linearElastic' ;\n[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\ncontrolDispsNRLinearElastic =  -matUs(11,:) ;\nloadFactorsNRLinearElastic  =  loadFactorsMat(:,2) ;\nanalysisSettings.finalTime      =   1.5    ;\notherParams.problemName = 'staticVonMisesTruss_linearElastic';","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the analytical value of the load factors is computed, as well as its difference with the numerical solution","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"analyticLoadFactorsNREngRot = @(w) -2 * E*A* ...\n     ( (  (z2+(-w)).^2 + x2^2 - L^2 ) ./ (L * ( L + sqrt((z2+(-w)).^2 + x2^2) )) ) ...\n     .*  (z2+(-w))                    ./ ( sqrt((z2+(-w)).^2 + x2^2) )  ;\ndifLoadEngRot = analyticLoadFactorsNREngRot( controlDispsNREngRot)' - loadFactorsNREngRot ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Analysis-case-2:-NR-with-Green-Strain","page":"Static Von-Mises Truss","title":"Analysis case 2: NR with Green Strain","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"In order to perform a SVK case, the material is changed and the problemName is also updated","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"otherParams.problemName = 'staticVonMisesTruss_NR_Green';\nmaterials.hyperElasModel  = 'SVK' ;\nanalysisSettings.finalTime      =   1.0    ;\nlambda = E*nu/((1+nu)*(1-2*nu)) ; mu = E/(2*(1+nu)) ;\nmaterials.hyperElasParams = [ lambda mu ] ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"the load history is also changed","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"boundaryConds(2).loadsTimeFact = @(t) 1.5e8*t ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and the analysis is run","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\ncontrolDispsNRGreen =  -matUs(11,:) ;\nloadFactorsNRGreen  =  loadFactorsMat(:,2) ;\n% %md the analytic solution is computed\nanalyticLoadFactorsGreen = @(w) - 2 * E*A * ( ( z2 + (-w) ) .* ( 2*z2*(-w) + w.^2 ) ) ./ ( 2.0 * L^3 )  ;\ndifLoadGreen = analyticLoadFactorsGreen( controlDispsNRGreen )' - loadFactorsNRGreen ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Analysis-case-3:-NR-AL-with-Green-Strain","page":"Static Von-Mises Truss","title":"Analysis case 3: NR-AL with Green Strain","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"\nelements(2).elemCrossSecParams{1,1} = 'rectangle' ;\nelements(2).elemCrossSecParams{2,1} = [ sqrt(A) sqrt(A)] ;\n","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"In this case, the numerical method is changed for newtonRaphson arc length.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"otherParams.problemName       = 'staticVonMisesTruss_NRAL_Green' ;\nanalysisSettings.methodName   = 'arcLength'                      ;\nanalysisSettings.finalTime     = 1                               ;\nanalysisSettings.incremArcLen = 0.15                             ;\nanalysisSettings.iniDeltaLamb = boundaryConds(2).loadsTimeFact(.2)/100 ;\nanalysisSettings.posVariableLoadBC = 2 ;","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\ncontrolDispsNRALGreen =  -matUs(11,:) ;\nloadFactorsNRALGreen  =  loadFactorsMat(:,2) ;\nanalyticLoadFactorsNRALGreen = analyticLoadFactorsGreen(controlDispsNRALGreen);\ndifLoadGreenNRAL = analyticLoadFactorsNRALGreen' - loadFactorsNRALGreen ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Verification","page":"Static Von-Mises Truss","title":"Verification","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"the numerical resolution is validated for both strain measures.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"verifBoolean =  ( ( norm( difLoadEngRot    ) / norm( loadFactorsNREngRot  ) ) <  1e-4 ) ...\n             && ( ( norm( difLoadGreen     ) / norm( loadFactorsNRGreen   ) ) <  1e-4 ) ...\n             && ( ( norm( difLoadGreenNRAL ) / norm( loadFactorsNRALGreen ) ) <  1e-4 ) ;","category":"page"},{"location":"examples/staticVonMisesTruss/#Plots","page":"Static Von-Mises Truss","title":"Plots","text":"","category":"section"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"and solutions are plotted.","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"lw = 2.0 ; ms = 11 ; plotfontsize = 18 ;\nfigure\nplot( controlDispsNREngRot, analyticLoadFactorsNREngRot( controlDispsNREngRot) ,'b-x' , 'linewidth', lw,'markersize',ms )\nhold on, grid on\nplot( controlDispsNREngRot, loadFactorsNREngRot, 'k-o' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsNRALGreen, analyticLoadFactorsGreen( controlDispsNRALGreen ), 'g-x' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsNRGreen, loadFactorsNRGreen, 'r-s' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsNRALGreen, loadFactorsNRALGreen, 'c-^' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsNRLinearElastic, loadFactorsNRLinearElastic, 'm-+' , 'linewidth', lw,'markersize',ms )\nlabx = xlabel('Displacement w(t)');   laby = ylabel('\\lambda(t)') ;\nlegend( 'analytic-RotEng', 'NR-RotEng','analytic-Green', 'NR-Green','NRAL-Green','LinearElastic', 'location','northoutside')\nset(gca, 'linewidth', 1.0, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\nprint('output/vonMisesTrussCheck.png','-dpng')\n%print('../../docs/src/assets/vonMisesTrussCheck.png','-dpng')","category":"page"},{"location":"examples/staticVonMisesTruss/","page":"Static Von-Mises Truss","title":"Static Von-Mises Truss","text":"<img src=\"../../assets/vonMisesTrussCheck.png\" alt=\"plot check\" width=\"500\"/>","category":"page"},{"location":"howtouse/functions/#list-of-ONSAS.m-functions","page":"list of ONSAS.m functions","title":"list of ONSAS.m functions","text":"","category":"section"},{"location":"howtouse/functions/","page":"list of ONSAS.m functions","title":"list of ONSAS.m functions","text":"This is a list of all the .m functions of the ONSAS Octave implementation:","category":"page"},{"location":"howtouse/functions/","page":"list of ONSAS.m functions","title":"list of ONSAS.m functions","text":"checkOrSetDefault.m\ncrossSectionProps.m\nelem2NodalLoads.m\nmyCell2Mat.m\nnodes2dofs.m\nONSAS.m","category":"page"},{"location":"examples/semiSphereWithInclusion/#Semi-sphere-with-inclusion","page":"Solid with inclusion","title":"Semi-sphere with inclusion","text":"","category":"section"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"In this example a semi-spherical solid is considered with a spherical inclusion inside. The constitutive behavior of the solids is assumed given by a compressible Neo-Hookean law, with the inclusion being stiffer than the matrix solid.","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"<img src=\"https://raw.githubusercontent.com/ONSAS/ONSAS.m/master/docs/src/assets/semiSphere.png\" alt=\"plot\" width=\"500\"/>","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"The src ONSAS path is loaded.","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"clear all, close all\naddpath( genpath( [ pwd '/../../src'] ) ) ;","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"then the material paraemeters are defined","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"% scalar parameters\nEmatrix = 500 ; nu = 0.45 ; Einclus = 1000 ;\n% inclusion\nmu = Einclus/(2*(1+nu)) ; bulk = Einclus / ( 3*(1-2*nu) ) ;\nmaterials(1).hyperElasModel = 'NHC' ;\nmaterials(1).hyperElasParams = [  mu bulk ] ;\n% matrix\nmu = Ematrix/(2*(1+nu)) ;  bulk = Ematrix / ( 3*(1-2*nu) ) ;\nmaterials(2).hyperElasModel = 'NHC' ;\nmaterials(2).hyperElasParams = [ mu bulk ] ;","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"the elements are defined","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"elements(1).elemType = 'triangle' ;\nelements(2).elemType = 'tetrahedron' ;\nelements(2).elemTypeParams = [ 2 ] ;\n","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"the boundary conditions are considered","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"% final pressure\np = 200 ;\n% pressure boundary conditions\nboundaryConds(1).loadsCoordSys = 'global';\nboundaryConds(1).loadsTimeFact = @(t) t*p ;\nboundaryConds(1).loadsBaseVals = [ 0 0 -1 0 0 0 ] ;","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"the other BCs have imposed displacements","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"boundaryConds(2).imposDispDofs = [1 3 5] ;\nboundaryConds(2).imposDispVals = [0 0 0 ]  ;","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"initial conditions","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"initialConds = struct();","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"mesh","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"[ mesh.nodesCoords, mesh.conecCell ] = meshFileReader( 'geometry_semiSphereWithInclusion.msh' ) ;","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"other parameters","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"otherParams.problemName = 'semiSphereWithInclusion' ;\notherParams.plotsFormat = 'vtk' ;","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"analysis settings ``` analysisSettings.methodName    = 'newtonRaphson' ; analysisSettings.stopTolIts    = 30     ; analysisSettings.stopTolDeltau = 1.0e-10 ; analysisSettings.stopTolForces = 1.0e-10 ; analysisSettings.finalTime      = 1      ; analysisSettings.deltaT        = .05   ;","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"profile on [matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ; profile off profexport( 'output', profile (\"info\") )","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"maxy = max( mesh.nodesCoords(:,2) )","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"inds = find( mesh.nodesCoords(:,2)==maxy )","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"controlNode = inds(1);","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"disps = -matUs(6*(controlNode-1)+3,:) ;","category":"page"},{"location":"examples/semiSphereWithInclusion/","page":"Solid with inclusion","title":"Solid with inclusion","text":"figure plot( disps, loadFactorsMat, 'b-x' )","category":"page"},{"location":"howtouse/creatingModels/#Creating-structural-models","page":"Creating Models","title":"Creating structural models","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"The data and properties of each structural model are defined through a set of definitions in a .m script. These properties are stored in struct data structures. The following structs must be defined and provided as input to the ONSAS function in this order:","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"materials\nelements\nboundaryConds\ninitialConds\nmesh\nnumericalMethod\notherParams","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"a=2;\nb=2;","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"Each struct has its own fields with specific names, used to store each corresponding property or information. Each field is obtained or assiged using structName.fieldName. A description of each struct and its fields follows at next.","category":"page"},{"location":"howtouse/creatingModels/#The-materials-struct","page":"Creating Models","title":"The materials struct","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"The materials struct contains the information of the material behavior considered for each element.","category":"page"},{"location":"howtouse/creatingModels/#material.hyperElasModel","page":"Creating Models","title":"material.hyperElasModel","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"This is a cell array with the string-names of the material models used, the options for these names are:","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"'linearElastic': for linear behaviour in small strains and displacements. The scalar parameters of this model are p_1=E the Young modulus and p_2=nu the Poisson's ratio.\n'SVK': for a Saint-Venant-Kirchhoff material where the parameters p_1 and p_2 are the Lamé parameters and textbfE is the Green-Lagrange strain tensor, with the strain-energy density function given by","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"Psi( textbfE ) = fracp_12 tr(textbfE)^2 + p_2 tr(textbfE^2)\nquad\np_1 = frac E nu  (1+nu) (1-2nu) \nquad\np_2 = frac E  2 (1+nu) ","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"'NHC': for a Neo-Hookean compressible material. The model implemented is given by","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"Psi( textbfC ) = fracp_12 ( tr(textbfC)-3 -2 L( sqrtdet(textbfC) ) ) + fracp_22 left( sqrtdet(textbfC)-1 right)^2\n quad\n p_1 = frac E  2 (1+nu) \n quad\n p_2 = frac E  3 (1-2 nu) ","category":"page"},{"location":"howtouse/creatingModels/#materials.hyperElasParams","page":"Creating Models","title":"materials.hyperElasParams","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"A cell structure with vectors with the material properties of each material used in the model. The i-th entry of the cell, contains a vector like this:","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":" p_1 dots p_n_P ","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"where n_P is the number of parameters of the constitutive model and mathbfp is the vector of constitutive parameters.","category":"page"},{"location":"howtouse/creatingModels/#material.density","page":"Creating Models","title":"material.density","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"This is a cell with the scalar values of the densities of the materials used in the model.","category":"page"},{"location":"howtouse/creatingModels/#material.nodalMass","page":"Creating Models","title":"material.nodalMass","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"This fields sets a vector of nodal masses components m_x m_y m_z that is assigned to nodes.","category":"page"},{"location":"howtouse/creatingModels/#The-elements-struct","page":"Creating Models","title":"The elements struct","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"The elements struct contains the information about the type of finite elements used and their corresponding parameters.","category":"page"},{"location":"howtouse/creatingModels/#elements.elemType","page":"Creating Models","title":"elements.elemType","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell structure with the string-names of the elements used: node, truss, frame, triangle or tetrahedron. Other auxiliar types such as edge are also available","category":"page"},{"location":"howtouse/creatingModels/#elements.elemTypeParams","page":"Creating Models","title":"elements.elemTypeParams","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell structure with auxiliar params information, required for some element types:","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"triangle vector with parameters, the first parameter is an integer indicating if plane stress (1) or plane strain (2) case is considered.","category":"page"},{"location":"howtouse/creatingModels/#elements.elemTypeGeometry","page":"Creating Models","title":"elements.elemTypeGeometry","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"This is a cell structure with the information of the geometry of the element.","category":"page"},{"location":"howtouse/creatingModels/#D-elements","page":"Creating Models","title":"1D elements","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"For truss or frame elements, this cell contains the cross-section properties:","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":" crossSectionTypeString  crossSectionParam_1 dots crossSectionParam_n","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"with n being the number of parameters of the cross section type, and crossSectionTypeString the type of cross section. The possible cross-section and its properties are:","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"generic  :general sections, where areas and inertias are provided as parameters\nrectangle: rectangular sections where thicknesses t_y and t_z are provided\ncircle : circular sections where diameter is provided.","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"See the crossSectionProps.m function for more details.","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"For edge elements the thickness is expected (for 2D load computations).","category":"page"},{"location":"howtouse/creatingModels/#D-elements-2","page":"Creating Models","title":"2D elements","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"For 2D elements such as triangle the thickness is expected to be introduced. The elementtype  ","category":"page"},{"location":"howtouse/creatingModels/#The-boundaryConds-struct","page":"Creating Models","title":"The boundaryConds struct","text":"","category":"section"},{"location":"howtouse/creatingModels/#boundaryConds.loadsCoordSys","page":"Creating Models","title":"boundaryConds.loadsCoordSys","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell containing the coordinates system for the loads applied in each BC, each entry should be a 'global' string or a 'local', or an empty array if no load is applied in that BC setting [].","category":"page"},{"location":"howtouse/creatingModels/#boundaryConds.loadsTimeFact","page":"Creating Models","title":"boundaryConds.loadsTimeFact","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with the inline function definitions of load factors of the loads applied of an empty array.","category":"page"},{"location":"howtouse/creatingModels/#boundaryConds.loadsBaseVals","page":"Creating Models","title":"boundaryConds.loadsBaseVals","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with the (row) vector of the components of the load case","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":" f_x   m_x  f_y  m_y  f_z  m_z ","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"where f_i are the components of forces and m_i are the moments. Both forces or moments are considered per unit of length in the case of truss/frame/edge elements, or per unit of area in the case of triangle.","category":"page"},{"location":"howtouse/creatingModels/#boundaryConds.userLoadsFileName","page":"Creating Models","title":"boundaryConds.userLoadsFileName","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with filenames of .m function file provided by the user that can be used to apply other forces.","category":"page"},{"location":"howtouse/creatingModels/#boundaryConds.imposDispDofs","page":"Creating Models","title":"boundaryConds.imposDispDofs","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with vectors of the local degrees of freedom imposed (integers from 1 to 6)","category":"page"},{"location":"howtouse/creatingModels/#boundaryConds.imposDispVals","page":"Creating Models","title":"boundaryConds.imposDispVals","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with vectors of the values of displacements imposed.","category":"page"},{"location":"howtouse/creatingModels/#boundaryConds.springsDofs","page":"Creating Models","title":"boundaryConds.springsDofs","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with vectors of the local degrees of freedom with springs (integers from 1 to 6)","category":"page"},{"location":"howtouse/creatingModels/#boundaryConds.springsVals","page":"Creating Models","title":"boundaryConds.springsVals","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell with vectors of the values of the springs stiffnesses.","category":"page"},{"location":"howtouse/creatingModels/#The-initialConds-struct","page":"Creating Models","title":"The initialConds struct","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"It initial conditions are homogeneous, then an empty struct should be defined initialConds = struct() ;.","category":"page"},{"location":"howtouse/creatingModels/#initialConds.nonHomogeneousInitialCondU0","page":"Creating Models","title":"initialConds.nonHomogeneousInitialCondU0","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"matrix to set  the value of displacements at the time step t=0. [default: []]","category":"page"},{"location":"howtouse/creatingModels/#initialConds.nonHomogeneousInitialCondUdot0","page":"Creating Models","title":"initialConds.nonHomogeneousInitialCondUdot0","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"matrix to prescribe the value of velocities at the time step t=0. [default: []]","category":"page"},{"location":"howtouse/creatingModels/#The-mesh-struct","page":"Creating Models","title":"The mesh struct","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"The mesh struct contains the finite element mesh information.","category":"page"},{"location":"howtouse/creatingModels/#mesh.nodesCoords","page":"Creating Models","title":"mesh.nodesCoords","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"matrix with the coordinates of all the nodes of the mesh. The i-th row contains the three coordinates of the node i: x_i   y_i  z_i,","category":"page"},{"location":"howtouse/creatingModels/#mesh.conecCell","page":"Creating Models","title":"mesh.conecCell","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"cell array with the elements and node-connectivity information. The i1 entry contains the vector with the MEBI (Material, Element, boundaryConds and initialConds) indexes and the nodes of the i-th element. The structure of the vector at each entry of the cell is:","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"  materialInd  elementInd  boundaryCondInd  initialCondInd  node_1 dots node_n ","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"where the five indexes are natural numbers and n is the number of nodes required by the type of element. If noproperty is assigned the 0 index can be used, for instance, nodes used to introduced loads should be defined with materialIndex = 0.","category":"page"},{"location":"howtouse/creatingModels/#The-analysisSettings-struct","page":"Creating Models","title":"The analysisSettings struct","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"This struct contains the parameters required to apply the numerical method for the resolution of the nonlinear equations:","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"methodName: string with the name of the method used: 'newtonRaphson','arcLength','newmark','alphaHHT'.\nstopTolDeltau: float with tolerance for convergence in relative norm of displacements increment\nstopTolForces: float with tolerance for convergence in relative norm of residual loads\nstopTolIts: integer with maximum number of iterations per time step\ndeltaT: time step\nfinalTime: final time of simulation\nincremArcLen: with of cylinder for arcLength method\ndeltaNM: delta parameter of newmark method\nalphaNM: alpha parameter of newmark method\nalphaHHT: alpha parameter of alpha-HHT method\nposVariableLoadBC: (parameter used by the arcLength method) this parameter is an integer with the entry of the boundaryConds cell corresponding with the loads vector affected by the load factor\niniDeltaLamb: (parameter used by the arcLength method) this parameter sets the initial increment for the load factor lambda.","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"another additional optional parameters are:","category":"page"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"booleanSelfWeight: a boolean indicating if self weight loads are considered or not. The loads are computed using the density of the material and in the -z global direction.\niniMatUs: a matrix with initial solutions for each time step.","category":"page"},{"location":"howtouse/creatingModels/#The-otherParams-struct","page":"Creating Models","title":"The otherParams struct","text":"","category":"section"},{"location":"howtouse/creatingModels/","page":"Creating Models","title":"Creating Models","text":"problemName: string with the name of the problem, to be used in outputs.\nplotsFormat: strint indicating the format of the output. Use 'vtk' for vtk output.\ncontrolDofs: matrix with information of the degrees of freedom to compute and control. Each row should contain this form: [ node localdof ].\nstoreBoolean: boolean to store the results of the current iteration such as the displacements, tangent matrices, normal forces and stresses. [default: 1]\nnodalDispDamping: scalar value of a linear viscous damping factor applied for all the displacement degrees of freedom [default: 0]","category":"page"},{"location":"howtouse/install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"howtouse/install/#Running-ONSAS.m","page":"Installation","title":"Running ONSAS.m","text":"","category":"section"},{"location":"howtouse/install/","page":"Installation","title":"Installation","text":"The user should follow these steps to install and run ONSAS:","category":"page"},{"location":"howtouse/install/","page":"Installation","title":"Installation","text":"Download and install the latest version of GNU-Octave.\nDownload the zip file of the latest ONSAS release from these site.\nOpen GNU-Octave and run one of the example scripts from the examples folder (or create yours!).","category":"page"},{"location":"howtouse/install/#Visualizing-results","page":"Installation","title":"Visualizing results","text":"","category":"section"},{"location":"howtouse/install/","page":"Installation","title":"Installation","text":"You can process the outputs using Octave, however, the open-source software ParaView can be used to visualize the results produced by ONSAS.","category":"page"},{"location":"howtouse/install/#Generation-of-geometries/meshes","page":"Installation","title":"Generation of geometries/meshes","text":"","category":"section"},{"location":"howtouse/install/","page":"Installation","title":"Installation","text":"The user can provide the geometry of the structure using two optional formats: .msh or .dxf.  GMSH is an open-source tool that allows to generate high-quality meshes. The dxf files can be used using any CAD tool.","category":"page"},{"location":"theory/references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"theory/references/","page":"References","title":"References","text":"(Bathe, 2014) Klaus-Jurgen Bathe.  Finite Element Procedures . 2014.\n(Bazzano and Pérez Zerpa, 2017) J. B. Bazzano and J. Perez Zerpa.  Introducción al Análisis No Lineal de Estructuras. 2017.\n(Battini and Pacoste, 2002) Co-rotational beam elements with warping effects in instability problems, Computer Methods in Applied Mechanics and Engineering, 191 (17-18). 2020.\n(Holzapfel, 2000) Nonlinear Solid Mechanics, A continuum approach for Engineering, 2000, Wiley.","category":"page"},{"location":"examples/staticAeroLinearCantilever/#Aerodynamic-linear-static-cantilever-beam-example","page":"Linear static aerodynamic cantilever beam","title":"Aerodynamic linear static cantilever beam example","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"In this tutorial, the linear static cantilever aero example and how to address the problem using ONSAS is described. The aim of this example is to validate aerodynamic steady and uniform wind loads applied to a cantilever beam undergoing small displacements and strains. The aerodynamic force variation due to the beam deformation is not considered. Under this hypothesis a symbolic solution is available. ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The beam is submitted to a uniform air wind velocity field v_a at 20 degrees and atmospheric pressure along axis z, and because of an ice accretion on the frame cross section, lift and drag forces are induced. The lift and drag forces are characterized with their respective aerodynamic coefficients c_d and c_l are based on this reference.  The beam has a length L and a hollow cylindrical cross section with d_ext and a thickness b as it is shown in Fig.1. ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"<img src=\"../../assets/linearStaticCantileverAero/ilusLinearStaticCantileverAero.svg\" alt=\"plot check angular displacements\" width=\"700\"/>","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The Octave script of this example is available at : (Image: Octave script)","category":"page"},{"location":"examples/staticAeroLinearCantilever/#Analytic-solution","page":"Linear static aerodynamic cantilever beam","title":"Analytic solution","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The static solution is obtained within the static Euler-Bernoulli beam theory,thus the angular rotations field are: ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"theta_z(x)= fracqy6 EI_zz left( (x-L)^3 +L^3 right)","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"and","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"theta_y(x)= fracqz6 EI_yy left( (x-L)^3 +L^3 right)","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"in which q = 12 rho v_a^2 d_ext, q_z = q c_d and q_y = q c_l.","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Integrating respect to x the angular rotations stated above derives to the following expressions: ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"u_y(x)= -fracqy24 EI_zz left( 6L^2x^2 - 4Lx^3 + x^4 right)","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"and","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"u_z(x)= -fracqz24 EI_yy left( 6L^2x^2 - 4Lx^3 + x^4 right)","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"in which q = 12 rho v_a^2 d_ext, q_z = q c_d and q_y = q c_l.","category":"page"},{"location":"examples/staticAeroLinearCantilever/#Numerical-solution","page":"Linear static aerodynamic cantilever beam","title":"Numerical solution","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The Octave script of this example is available at this url.  Before defining the structs, the workspace is cleaned and the ONSAS directory is added:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"close all, clear all ; addpath( genpath( [ pwd '/../../src'] ) );","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The material linear E and shear G Elastic modulus and the Poisson's ratio nu are:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"E = 70e9 ;  nu = 0.3 ; G = E / (2 * (1+nu)) ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Geometrical dimensions sketched in Fig 1 are:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"l = 20 ; dext = .5 ;  b = 1e-3  ; dint  = dext - 2*b    ;\nA = pi * (dext^2 - dint^2) / 4  ;\nJ = pi * (dext^4 - dint^4) / 32 ; Iyy = J/2 ; Izz = Iyy ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"the number of elements employed to discriteze the beam is:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"numElements = 10 ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/#MEBI-parameters","page":"Linear static aerodynamic cantilever beam","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/#materials","page":"Linear static aerodynamic cantilever beam","title":"materials","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Since the example contains only one linear Euler Bernoulli element the fields of the materials struct will have only one entry. Although, the constitutive behavior law selected is Saint-Venant-Kirchhoff:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"materials.hyperElasModel  = 'linearElastic' ;\nmaterials.hyperElasParams = [ E nu ]        ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/#elements","page":"Linear static aerodynamic cantilever beam","title":"elements","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Two different types of elements are considered, node and frames. The nodes will be assigned in the first entry (index 1) and the beam at the index 2. The elemType field is then:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"elements(1).elemType = 'node'  ;\nelements(2).elemType = 'frame' ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The node has not cross section geometry to assign (an empty array is automatically set). Since the frame element has no implemented a hollow cylindrical cross section, then a 'generic' cross-section dimensions in y and z directions is used. Thus the elemCrossSecParams field is:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"elements(2).elemCrossSecParams{1,1} = 'generic' ;\nelements(2).elemCrossSecParams{2,1} = [ A J Iyy Izz ] ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Now the parameters to include aerodynamic forces automatically on the frame element are defined. First the drag and lift cross section functions are set in concordance with the function names located at the same example folder. Thus the userDragCoef_  userLiftCoef_ momentCoefFunction fields are:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"elements(2).userDragCoef   = 'dragCoefFunction'   ;\nelements(2).userLiftCoef   = 'liftCoefFunction'   ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Next the elemTypeAero field contain the information of the chord vector. This vector is defined first considering the orientation of the cross section set up in lift, drag and moment experiments, and then how that cross section is located for the example. In this case the orientation of the chord vector is along y. In general note that the chord vector t_ch must be given in reference (non canonical configurations). In this example the cable is oriented along y so the direction will be 010 as it is shown in Fig 1. Also the length of the chord is added to the norm of the chord vector, for cylindrical cantilever beams is d_ext. All this information is added into elemTypeAero field of elements struct such that:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"numGaussPoints  = 4 ; \nelements(2).elemTypeAero   = [0 dext 0 numGaussPoints];","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"in which 4 Gauss integration points are employed to compute the aerodynamic force. This value is enough in most cases. ","category":"page"},{"location":"examples/staticAeroLinearCantilever/#boundaryConds","page":"Linear static aerodynamic cantilever beam","title":"boundaryConds","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Only one welded (6 degrees of freedom are set to zero) boundary condition (BC) is considered:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"boundaryConds(1).imposDispDofs = [ 1 2 3 4 5 6 ] ;\nboundaryConds(1).imposDispVals = [ 0 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/#initial-Conditions","page":"Linear static aerodynamic cantilever beam","title":"initial Conditions","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Any non-homogeneous initial condition (IC) are set for this case, then an empty struct is used:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"initialConds = struct() ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/#mesh-parameters","page":"Linear static aerodynamic cantilever beam","title":"mesh parameters","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The coordinates of the mesh nodes are given by the matrix:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"mesh.nodesCoords = [ (0:(numElements))'*l/numElements  zeros(numElements+1,2) ] ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The connectivity is introduced using the conecCell. Each entry of the cell contains a vector with the four indexes of the MEBI parameters, followed by the indexes of nodes that compose the element (node connectivity). For didactical purposes each element entry is commented. First the cell is initialized:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"mesh.conecCell = { } ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"then the first welded node is defined with material (M) zero since nodes don't have material, the first element (E) type (the first entry of the elements struct), and (B) is the first entry of the the boundaryConds struct. For (I) no non-homogeneous initial condition is considered (then zero is used) and finally the node is assigned:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"mesh.conecCell{ 1, 1 } = [ 0 1 1 0  1 ] ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Next the frame elements MEBI parameters are set. The frame material is the first material of materials struct, then 1 is assigned. The second entry of the elements struct correspond to the frame element employed, so 2 is set. Finally no BC and no IC is required for this element, then 0 is used.  Consecutive nodes build the element so then the mesh.conecCell is:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"for i=1:numElements,\n  mesh.conecCell{ i+1,1 } = [ 1 2 0 0  i i+1 ] ;\nend","category":"page"},{"location":"examples/staticAeroLinearCantilever/#analysisSettings","page":"Linear static aerodynamic cantilever beam","title":"analysisSettings","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"First the wind velocity function name is set into userWindVel field of analysisSettings struct. This will apply a external wind loads for each element with elemTypeAero field into the elements struct. The name of the wind velocity function located on the same example path is: ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"analysisSettings.userWindVel = 'windVel' ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The geometrical non-linear effects are not considered in this case to compute the aerodynamic force. As consequence the wind load forces are computed on the reference configuration, and remains constant during the beam deformation. The field  geometricNonLinearAero into  analysisSettings struct is then set to:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"analysisSettings.geometricNonLinearAero = false;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"since this problem is static, then a N-R method is employed. The convergence of the method is accomplish with ten equal load steps. The time variable for static cases is a load factor parameter that must be configured into the windVel.m function. A linear profile is considered for ten equal velocity load steps as:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"analysisSettings.deltaT        =   0.1           ;\nanalysisSettings.finalTime     =   1             ;\nanalysisSettings.methodName    = 'newtonRaphson' ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Next the maximum number of iterations per load(time) step, the residual force and the displacements tolerances are set to: ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"analysisSettings.stopTolDeltau =   1e-6          ;\nanalysisSettings.stopTolForces =   1e-6          ;\nanalysisSettings.stopTolIts    =   10            ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/#otherParams","page":"Linear static aerodynamic cantilever beam","title":"otherParams","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The name of the problem and vtk format output are selected: ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"otherParams.problemName = 'aeroLinStaticCantilever';\notherParams.plotsFormat = 'vtk' ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The ONSAS software is executed for the parameters above defined and the displacement solution of each load(time) step is saved as:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"[matUs, ~] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/#Verification","page":"Linear static aerodynamic cantilever beam","title":"Verification","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"This example validation is ascertained comparing analytical and numerical solutions.","category":"page"},{"location":"examples/staticAeroLinearCantilever/#Symbolic-solution","page":"Linear static aerodynamic cantilever beam","title":"Symbolic solution","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"For such propose the angle of incidence and the wind properties are computed as:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"% air density is:\nrhoAire = 1.2 ;\n% then characteristic dimension is extracted executing: \ndimCaracteristic = norm(elements(2).elemTypeAero (1:3) ) ;\n% the angle of attack is: \nbetaRel = acos(dot(elements(2).elemTypeAero( 1:3 ) , [0 0 1] ));\n% the wind velocity is:\nwindVel = feval(analysisSettings.userWindVel, betaRel, analysisSettings.finalTime) ;\n% the drag, lift and eventually moment coef are:\nif isfield(elements(2), 'userDragCoef')\n  c_d = feval(elements(2).userDragCoef, betaRel);\nelse\n  c_d = 0;\nend\nif isfield(elements(2), 'userLiftCoef')\n  c_l = feval(elements(2).userLiftCoef, betaRel);\nelse\n  c_l = 0;\nend","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"Then the dynamic pressures q_0 defined above are expressed such that: ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"q = 1/2 * rhoAire * (windVel(3)^2 + windVel(2)^2) ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"next the loads per unit of length are  ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"qz = q * c_d * dimCaracteristic ; qy = q * c_l * dimCaracteristic ; ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"then an analytic x vector to evaluate the deformed analytic solution is build as ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"sizeAnalyticX = 100 ;\nxAnalytic = linspace(0,l,sizeAnalyticX)' ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The linear displacements symbolic solutions are:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"ydefAnalytic = @(x) -qy / (24*E*Izz) * (6*l^2*x.^2 -4*l*x.^3+x.^4) ;\nzdefAnalytic = @(x) qz  / (24*E*Izz) * (6*l^2*x.^2 -4*l*x.^3+x.^4) ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"then the angular displacements symbolic solutions are:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"thetaYAnalytic = @(x) -qz  / (6*E*Iyy) * (3* l^2 * x -3*l*x.^2+x.^3) ;\nthetaZAnalytic = @(x) -qy  / (6*E*Izz) * (3* l^2 * x -3*l*x.^2+x.^3) ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/#Numeric-solution","page":"Linear static aerodynamic cantilever beam","title":"Numeric solution","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The numerical solution is extracted:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"xref    = mesh.nodesCoords(:,1)     ;\nyref    = mesh.nodesCoords(:,2)     ;\nzref    = mesh.nodesCoords(:,3)     ;\nydefNum = yref + matUs(3:6:end,end) ;\nzdefNum = zref + matUs(5:6:end,end) ;\nthetaYdefNum = matUs(4:6:end,end)   ;\nthetaZdefNum = matUs(6:6:end,end)   ;","category":"page"},{"location":"examples/staticAeroLinearCantilever/#Verification-boolean","page":"Linear static aerodynamic cantilever beam","title":"Verification boolean","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The verification boolean is computed as U_n - U_a    U_a   10^-1","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"verifBoolean = norm( [ ydefNum - ydefAnalytic(xref); thetaYdefNum - thetaYAnalytic(xref); zdefNum - zdefAnalytic(xref); thetaZdefNum - thetaZAnalytic(xref) ] ) ...\n                <  1e-1 * norm( [ ydefAnalytic(xref);  thetaYAnalytic(xref);  zdefAnalytic(xref); thetaZAnalytic(xref) ] )  ;      ","category":"page"},{"location":"examples/staticAeroLinearCantilever/#Plot-verification","page":"Linear static aerodynamic cantilever beam","title":"Plot verification","text":"","category":"section"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The plot parameters are:","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"lw = 5 ; ms = 8 ;\nlabelTitle= [' Validating solution with ' num2str(numElements) ' elements' ];\naxislw = 2 ; axisFontSize = 20 ; legendFontSize = 15 ; curveFontSize = 15 ;       ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The linear displacements verification is plotted using:  ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"figure(1)\nhold on, grid on\nplot(xref      , zdefNum                ,'ro' , 'linewidth', lw, 'markersize' , ms) ;\nplot(xAnalytic , zdefAnalytic(xAnalytic),'r-' , 'linewidth', lw, 'markersize' , ms) ;\nplot(xref      , ydefNum                ,'bo' , 'linewidth', lw,'markersize'  , ms) ;\nplot(xAnalytic , ydefAnalytic(xAnalytic),'b-' , 'linewidth', lw, 'markersize' , ms) ;\nlegend('z_n', 'z_a',  'y_n', 'y_a', 'location', 'north')\nlabx=xlabel(' x (m)');    laby=ylabel('Displacements (m)');\ntitle (labelTitle)\nset(legend, 'linewidth', axislw, 'fontsize', legendFontSize ) ;\nset(gca, 'linewidth', axislw, 'fontsize', curveFontSize ) ;\nset(labx, 'FontSize', axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nprint('./output/linearDisp.png')","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"<img src=\"../../assets/linearStaticCantileverAero/verifLinearStaticCantileverAero1.png\" alt=\"plot check linear displacements\" width=\"500\"/>","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The angular displacements verification is plotted using:  ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"figure(2)\nhold on, grid on\nplot(xref      , rad2deg(thetaYdefNum)              , 'ro' , 'linewidth', lw, 'markersize', ms) ;\nplot(xAnalytic , rad2deg(thetaYAnalytic(xAnalytic)) , 'r-' , 'linewidth', lw, 'markersize', ms) ;\nplot(xref      , rad2deg(thetaZdefNum)              , 'bo' , 'linewidth', lw, 'markersize', ms) ;\nplot(xAnalytic , rad2deg(thetaZAnalytic(xAnalytic)) , 'b-' , 'linewidth', lw, 'markersize', ms) ;\nlegend('\\theta y_n', '\\theta y_a', '\\theta z_n', '\\theta z_a',  'location', 'eastoutside' )\nlabx=xlabel(' x (m)'); laby=ylabel('Angle (º)');\ntitle (labelTitle)\nset(legend, 'linewidth' , axislw, 'fontsize', legendFontSize) ;\nset(gca   , 'linewidth' , axislw, 'fontsize', curveFontSize ) ;\nset(labx  , 'FontSize'  , axisFontSize); set(laby, 'FontSize', axisFontSize) ;\nprint('./output/angDisp.png')","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"<img src=\"../../assets/linearStaticCantileverAero/verifLinearStaticCantileverAero2.png\" alt=\"plot check angular displacements\" width=\"500\"/>","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"The 3D deformed configuration is plotted executing:  ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"figure\nhold on, grid on\nplot3(xref     , yref                    , zref                   ,'k-' , 'linewidth', lw + 300, 'markersize', ms+200 );\nplot3(xAnalytic, ydefAnalytic(xAnalytic) , zdefAnalytic(xAnalytic),'r-' , 'linewidth', lw      , 'markersize', ms     );\nplot3(xref     , ydefNum                 , zdefNum                ,'bo' , 'linewidth', lw      , 'markersize', ms     );\nlegend('Reference config'   , 'Analytic def config' , 'Numerical def config', 'location','northEast')\nlabx=xlabel( 'x (m)' )      ; laby=ylabel('y(m)')   ; labz=zlabel('z(m)')  ;\nset(legend, 'linewidth', axislw       , 'fontsize'  , legendFontSize )     ;\nset(gca   , 'linewidth', axislw       , 'fontsize'  , curveFontSize  )     ;\nset(labx  , 'FontSize' , axisFontSize); set(laby, 'FontSize', axisFontSize); set(labz, 'FontSize', axisFontSize) ;\nview([0.5 +0.5 -1])\nprint('./output/def.png','-dpng')    ","category":"page"},{"location":"examples/staticAeroLinearCantilever/","page":"Linear static aerodynamic cantilever beam","title":"Linear static aerodynamic cantilever beam","text":"<img src=\"../../assets/linearStaticCantileverAero/verifLinearStaticCantileverAero3.png\" alt=\"plot check deformed configurations\" width=\"500\"/>","category":"page"},{"location":"examples/uniaxialExtension/#Uniaxial-Extension-Solid-example","page":"Uniaxial extension","title":"Uniaxial Extension Solid example","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"(Image: Octave script)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"In this tutorial example an elastic solid is submitted to a uniaxial extension test. The problem is inspired by Exercise 4 from section 6.5 in (Holzapfel,2000). The geometry and tension applied are shown in the figure, where the Lx, Ly and Lz are the dimensions and the tension p is applied on the face x=Lx, as nominal traction (see (Holzapfel,2000)).","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"<img src=\"../../assets/diagramSolidUniaxial.svg\" alt=\"structure diagram\" width=\"500\"/>","category":"page"},{"location":"examples/uniaxialExtension/#Analytic-solution","page":"Uniaxial extension","title":"Analytic solution","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"Let us consider that a uniform deformation is produced, with a nonzero axial stretch alpha and nonzero transversal stretch beta. The corresponding deformation gradient and Green-Lagrange strain tensor are given by:","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"textbfF = left beginmatrix alpha  0  0  0  beta  0  0  0  beta endmatrix right\nqquad\ntextbfE = left  beginmatrix frac12 left(alpha^2 -1right)  0  0  0   frac12 left(beta^2 -1right)  0  0  0   frac12 left(beta^2 -1right) endmatrix\nright","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The second Piola-Kirchhoff tensor textbfS is given by","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"textbfS( textbfE ) = p_1 tr(textbfE) textbfI + 2 p_2 textbfE","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"then, using the relation textbfP=textbfFtextbfS, the P_yy component is computed and set to zero (using the boundary conditions)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"P_yy( textbfE ) =\np_1 beta left(\n             frac12 left(alpha^2 -1 right) + left( beta^2 -1right)\n right) + 2 p_2 beta (frac12 left(beta^2 -1 right)) = 0","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"then, using that betaneq0 (since textdet( textbfF ) neq0), we obtain","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":" p_1 frac12 left(alpha^2 -1 right)\n = - (p_1+p_2) left(beta^2 -1 right)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"then using the relation between the Lamé parameters p_2 and p_1 and the Young modulus and Poisson ratio, we obtain:","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":" left(beta^2 -1 right) = -nu left(alpha^2 -1 right)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The axial component of the nominal stress is","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"P_xx( textbfE ) =\np_1 alpha left(\n             frac12 left(alpha^2 -1 right) + left( beta^2 -1right)\n right) + 2 p_2 alpha (frac12 left(alpha^2 -1 right)) = 0","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"and substituting we obtain","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"P_xx( alpha ) =\np_1 alpha frac1-2nu2 left(alpha^2 -1 right) + p_2 alpha left(alpha^2 -1 right) =\n left( fracE nu(1+nu)2  + fracE(1+nu)2 right)  alpha left(alpha^2 -1 right)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"thus, considering the axial displacement u and using the stretch definition alpha = (1+uLx), we obtain","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"P_xx( u ) =\n fracE2  left( left( 1+fracuLx right)^3 - left( 1+ fracuLx right) right)","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"where u is the x displacement of the points located on face x=Lx.","category":"page"},{"location":"examples/uniaxialExtension/#Numerical-solution:-case-1","page":"Uniaxial extension","title":"Numerical solution: case 1","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"Before defining the structs, the workspace is cleaned, the ONSAS directory is added to the path and scalar geometry and material parameters are defined.","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"clear all, close all\n% add path\naddpath( genpath( [ pwd '/../../src'] ) ) ;\n% scalar parameters\nE = 1 ; nu = 0.3 ; p = 2 ; Lx = 2 ; Ly = 1 ; Lz = 1 ;","category":"page"},{"location":"examples/uniaxialExtension/#MEBI-parameters","page":"Uniaxial extension","title":"MEBI parameters","text":"","category":"section"},{"location":"examples/uniaxialExtension/#materials","page":"Uniaxial extension","title":"materials","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The material of the solid considered is the Saint-Venant-Kirchhoff with Lamé parameters computed as","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"lambda = E*nu/((1+nu)*(1-2*nu)) ; mu = E/(2*(1+nu)) ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"since only one material is considered, a scalar struct is defined as follows","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"materials.hyperElasModel = 'SVK' ;\nmaterials.hyperElasParams = [ lambda mu ] ;","category":"page"},{"location":"examples/uniaxialExtension/#elements","page":"Uniaxial extension","title":"elements","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"In this model two kinds of elements are used: tetrahedron for the solid and triangle for introducing the external loads. Since two kinds of elements are used, the struct have length 2:","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"elements(1).elemType = 'triangle' ;\nelements(2).elemType = 'tetrahedron' ;","category":"page"},{"location":"examples/uniaxialExtension/#boundaryConds","page":"Uniaxial extension","title":"boundaryConds","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"in this case four BCs are considered, one corresponding to a load and three to displacements.  the first BC introduced is a load, then the coordinate system, loadfactor time function and base load vector are defined","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"boundaryConds(1).loadsCoordSys = 'global';\nboundaryConds(1).loadsTimeFact = @(t) p*t ;\nboundaryConds(1).loadsBaseVals = [ 1 0 0 0 0 0 ] ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"the other BCs have imposed displacements","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"boundaryConds(2).imposDispDofs = [1] ;\nboundaryConds(2).imposDispVals =  0  ;\n%\nboundaryConds(3).imposDispDofs = [3] ;\nboundaryConds(3).imposDispVals =  0  ;\n%\nboundaryConds(4).imposDispDofs = [5] ;\nboundaryConds(4).imposDispVals =  0  ;\n%","category":"page"},{"location":"examples/uniaxialExtension/#initialConds","page":"Uniaxial extension","title":"initialConds","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"since no initial non-homogeneous initial conditions are used, an empty struct is used .","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"initialConds = struct();","category":"page"},{"location":"examples/uniaxialExtension/#Mesh","page":"Uniaxial extension","title":"Mesh","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"A simple hand-made 8-node mesh, with 6 tetrahedrons is considered","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"<img src=\"https://raw.githubusercontent.com/ONSAS/ONSAS_docs/master/docs/src/solidCubeMeshHTML.svg\" alt=\"mesh diagram\" width=\"500\"/>","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"\\begin{center}\n\\def\\svgwidth{0.6\\textwidth}\n\\input{solidCubeMeshPDF.pdf_tex}\n\\end{center}","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The node coordinates matrix is given by the following","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"mesh.nodesCoords = [ 0    0    0 ; ...\n                     0    0   Lz ; ...\n                     0   Ly   Lz ; ...\n                     0   Ly    0 ; ...\n                     Lx   0    0 ; ...\n                     Lx   0   Lz ; ...\n                     Lx  Ly   Lz ; ...\n                     Lx  Ly    0 ] ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"and the connectivity cell is defined as follows with the four MEBI parameters for each element followed by the indexes of the nodes of each element. All the eight triangle elements are considered with no material (since they are used only to include load) and the following six elements are solid SVK material tetrahedrons.","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"mesh.conecCell = {[ 0 1 1 0    5 8 6   ]; ... % loaded face\n                  [ 0 1 1 0    6 8 7   ]; ... % loaded face\n                  [ 0 1 2 0    4 1 2   ]; ... % x=0 supp face\n                  [ 0 1 2 0    4 2 3   ]; ... % x=0 supp face\n                  [ 0 1 3 0    6 2 1   ]; ... % y=0 supp face\n                  [ 0 1 3 0    6 1 5   ]; ... % y=0 supp face\n                  [ 0 1 4 0    1 4 5   ]; ... % z=0 supp face\n                  [ 0 1 4 0    4 8 5   ]; ... % z=0 supp face\n                  [ 1 2 0 0    1 4 2 6 ]; ... % tetrahedron\n                  [ 1 2 0 0    6 2 3 4 ]; ... % tetrahedron\n                  [ 1 2 0 0    4 3 6 7 ]; ... % tetrahedron\n                  [ 1 2 0 0    4 1 5 6 ]; ... % tetrahedron\n                  [ 1 2 0 0    4 6 5 8 ]; ... % tetrahedron\n                  [ 1 2 0 0    4 7 6 8 ]  ... % tetrahedron\n                } ;","category":"page"},{"location":"examples/uniaxialExtension/#Analysis-parameters","page":"Uniaxial extension","title":"Analysis parameters","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"analysisSettings.methodName    = 'newtonRaphson' ;\nanalysisSettings.stopTolIts    = 30     ;\nanalysisSettings.stopTolDeltau = 1.0e-8 ;\nanalysisSettings.stopTolForces = 1.0e-8 ;\nanalysisSettings.finalTime      = 1      ;\nanalysisSettings.deltaT        = .125   ;","category":"page"},{"location":"examples/uniaxialExtension/#Output-parameters","page":"Uniaxial extension","title":"Output parameters","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"otherParams.plotsFormat = 'vtk' ;\notherParams.problemName = 'uniaxialExtension_HandMadeMesh' ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;","category":"page"},{"location":"examples/uniaxialExtension/#Analytic-solution-computation","page":"Uniaxial extension","title":"Analytic solution computation","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"analyticFunc = @(w) 1/p *E * 0.5 * ( ( 1 + w/Lx ).^3 - ( 1 + w/Lx) ) ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"analyticCheckTolerance = 1e-6 ;\nanalyticFunc           = @(w) E * 0.5 * ( (1 + w/Lx).^3 - (1+w/Lx) ) ;\ncontrolDisps = matUs(6*6+1,:) ;\nanalyticVals = analyticFunc( controlDisps ) ;\ncontrolDispsValsCase1         = controlDisps  ;\nloadFactorAnalyticalValsCase1 = analyticVals  ;\nloadFactorNumericalValsCase1  = loadFactorsMat ;","category":"page"},{"location":"examples/uniaxialExtension/#Numerical-solution:-case-2","page":"Uniaxial extension","title":"Numerical solution: case 2","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"In this analysis case, the mesh information is read from a gmsh-generated mesh file, the pressure is applied using local coordinates and the stiffness  matrix is computed using the complex-step method.","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"otherParams.problemName = 'uniaxialExtension_GMSH_ComplexStep' ;\n\n[ mesh.nodesCoords, mesh.conecCell ] = meshFileReader( 'geometry_uniaxialExtension.msh' ) ;\nboundaryConds(1).loadsCoordSys = 'local';\nboundaryConds(1).loadsBaseVals = [0 0 0 0 1 0 ] ;\nelements(2).elemTypeParams = [ 2 ] ;\n\n[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\n\ncontrolDisps = matUs(6*6+1,:) ;\nanalyticVals = analyticFunc( controlDisps ) ;\ncontrolDispsValsCase2         = controlDisps  ;\nloadFactorAnalyticalValsCase2 = analyticVals  ;\nloadFactorNumericalValsCase2  = loadFactorsMat ;\n\naux1 = loadFactorNumericalValsCase1' - loadFactorAnalyticalValsCase1 ;\naux2 = loadFactorNumericalValsCase2' - loadFactorAnalyticalValsCase1 ;\n\nverifBoolean = ...\n     ( norm( aux1 ) / norm( loadFactorNumericalValsCase1 ) < analyticCheckTolerance ) ...\n  && ( norm( aux2 ) / norm( loadFactorNumericalValsCase1 ) < analyticCheckTolerance ) ;","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"\notherParams.problemName = 'uniaxialExtension_NHC' ;\nmaterials.hyperElasModel = 'NHC' ;\nbulk = E / ( 3*(1-2*nu) ) ;\nmaterials.hyperElasParams = [ mu bulk ] ;\n\n[matUs, loadFactorsMat] = ONSAS( materials, elements, boundaryConds, initialConds, mesh, analysisSettings, otherParams ) ;\n\ncontrolDispsValsCase4         = matUs(6*6+1,:) ;\nloadFactorNumericalValsCase4  = loadFactorsMat ;\n\nanalyticFunc           = @(w) mu * (1 + w/Lx)    - mu * 1 ./ (1 + w/Lx).^2 + (mu^2)/bulk * (1 + w/Lx).^3 ;\nanalyticValsCase5 = analyticFunc( controlDispsValsCase4 ) ;\n\n\n","category":"page"},{"location":"examples/uniaxialExtension/#Plot","page":"Uniaxial extension","title":"Plot","text":"","category":"section"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"The numerical and analytic solutions are plotted.","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"lw = 2.0 ; ms = 11 ; plotfontsize = 18 ;\nfigure, hold on, grid on\nplot( controlDispsValsCase1, loadFactorAnalyticalValsCase1, 'r-x' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsValsCase1, loadFactorNumericalValsCase1,  'k-o' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsValsCase2, loadFactorNumericalValsCase2,  'g-s' , 'linewidth', lw,'markersize',ms )\nplot( controlDispsValsCase4, loadFactorNumericalValsCase4,  'c-^' , 'linewidth', lw,'markersize',ms )\n%plot( controlDispsValsCase4, analyticValsCase5,  'y-.' , 'linewidth', lw,'markersize',ms )\nlabx = xlabel('Displacement');   laby = ylabel('\\lambda(t)') ;\nlegend( 'Analytic', 'Numeric-1', 'Numeric-2', 'location', 'North' )\nset(gca, 'linewidth', 1.0, 'fontsize', plotfontsize )\nset(labx, 'FontSize', plotfontsize); set(laby, 'FontSize', plotfontsize) ;\nprint('output/verifUniaxial.png','-dpng')","category":"page"},{"location":"examples/uniaxialExtension/","page":"Uniaxial extension","title":"Uniaxial extension","text":"<img src=\"https://raw.githubusercontent.com/ONSAS/ONSAS.docs/master/docs/src/verifUniaxial.png\" alt=\"plot check\" width=\"500\"/>","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: tests) (Image: License) (Image: Join the chat at https://gitter.im/onsas_/community)","category":"page"},{"location":"#What-is-ONSAS.m?","page":"Home","title":"What is ONSAS.m?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ONSAS.m is an Open Nonlinear Structural Analysis Solver for GNU-Octave/Matlab. It consists in a set of implementations of numerical methods for static/dynamic and linear/non-linear analysis of structures. The first version was developed for educational purposes and published in a Structural Analysis handbook.","category":"page"},{"location":"#What-can-ONSAS.m-be-used-for?","page":"Home","title":"What can ONSAS.m be used for?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The current version allows to perform dynamic/static nonlinear analyses of beam/truss/solid 3D structures. A reduced list of features is listed at next:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Elements 2-node truss, 2-node Bernoulli co-rotational frame, 4-node tetrahedron, 3-node triangle.\nStatic analysis methods Newton-Raphson Method and Cylindrical Arc-Length Method.\nDynamic analysis methods Newmark Method and alpha-HHT.","category":"page"},{"location":"#Some-examples","page":"Home","title":"Some examples","text":"","category":"section"},{"location":"#A-simple-wind-turbine-model","page":"Home","title":"A simple wind turbine model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://github.com/ONSAS/ONSAS_docs/blob/master/gifs/wind.gif?raw=true\" alt=\"wind turbine animation\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"wind turbine animation","category":"page"},{"location":"#A-tower-model","page":"Home","title":"A tower model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://github.com/ONSAS/ONSAS_docs/blob/master/gifs/tower.gif?raw=true\" alt=\"tower animation\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"tower","category":"page"},{"location":"#A-uniaxial-extension-test","page":"Home","title":"A uniaxial extension test","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://github.com/ONSAS/ONSAS_docs/blob/master/gifs/uniaxial.gif?raw=true\" alt=\"uniaxial animation\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"uniaxial animation","category":"page"},{"location":"#A-beam/truss-pendulum","page":"Home","title":"A beam/truss pendulum","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://raw.githubusercontent.com/mvanzulli/Tex_CorrotationalDynamicTL_TesisMV/main/Presentacion/Videos/3.gif\" alt=\"beam truss pendulum\">","category":"page"},{"location":"#A-chain-model","page":"Home","title":"A chain model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://user-images.githubusercontent.com/42485529/90902313-a6bf8d80-e3a2-11ea-8369-a9be639552f9.gif?raw=true\" alt=\"chain animation\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"chain","category":"page"},{"location":"#A-transmission-line-tower-model","page":"Home","title":"A transmission line tower model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"https://raw.githubusercontent.com/mvanzulli/Tex_CorrotationalDynamicTL_TesisMV/main/Presentacion/Videos/4.gif\" alt=\"transmission line\">","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can send an e-mail to jorgepz[AT]fing.edu.uy or @raw html <a href=\"https://gitter.im/onsas_/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\"><img src=\"https://badges.gitter.im/onsas_/community.svg\" alt=\"Join the chat at https://gitter.im/onsas_/community\"> </a> .","category":"page"},{"location":"#Contributors-and-License","page":"Home","title":"Contributors and License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The code is distributed under a GNU-GPL 3.0 license.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following authors collaborated in various tasks including: design, development and testing of the code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Jorge M. Pérez Zerpa (1), leaded and managed the design and development of the code, developed the assembly functions, nonlinear truss element formulation, nonlinear static analysis function, designed and co-authored Newmark's method function, input and output functions, leaded the generation of the documentation.\nJ. Bruno Bazzano (1,2), leaded the development of the nonlinear/linear buckling analysis modules, co-designed the code, developed and implemented validation examples, validated the HHT implementation.\nJoaquín Viera (1), leaded the development of the Linear Analysis module and input files, collaborated in the design and development of the input reading and output generation modules, leaded the development of GUI.\nMauricio Vanzulli (3) co-developed the Newmark's method functions and scripts, developed input files for the dynamic analysis examples.\nMarcelo Forets (4) developed the Neo-Hookean solid model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following authors contributed specific relevant functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Jean-Marc Battini (5), contributed functions associated with the computation of static internal forces of the nonlinear frame element.\nSebastian Toro (6), provided the functions: fLectDxf.m, fValGrCode.m and f_XData.m, used in the dxf import function.","category":"page"},{"location":"#Affiliations","page":"Home","title":"Affiliations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Instituto de Estructuras y Transporte, Facultad de Ingeniería, Universidad de la República, Montevideo, Uruguay\nBazzano & Scelza Ingenieros, Montevideo, Uruguay\nInstituto de Ingeniería Mecánica y Producción Industrial, Facultad de Ingeniería, Universidad de la República, Montevideo, Uruguay.\nCentro Universitario Regional Este, Universidad de la República, Maldonado, Uruguay\nDepartment of Civil and Architectural Engineering, KTH Royal Institute of Technology, Stockholm, Sweden\nCIMEC Santa Fe, Argentina","category":"page"},{"location":"#Contributions-and-Acknowledgments","page":"Home","title":"Contributions and Acknowledgments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The functions in linearStiffMatPlate3D.m and assemblyUniform.m use part of the femplateexample.m code developed by Jorge Pérez Zerpa and Pablo Castrillo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"J. M. Pérez Zerpa would like to thank: Pablo Blanco,  Gonzalo Ares and Gonzalo Maso Talou for their numerous and valuable comments and suggestions during early stages of the design of the code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The development of ONSAS has been partially supported by funds provided by the following agencies/projects:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Comisión de Investigación Científica (CSIC) (project: Definición de estrategias para la aplicación de métodos de identificación de material al diagnóstico no invasivo de Cáncer de mama, manager, Prof. Pérez Zerpa),\nComisión Sectorial de Enseñanza (project: Rediseño de prácticas de enseñanza y evaluación en Resistencia de Materiales, manager, Prof. Pérez Zerpa),\nAgencia Nacional de Investigación e Innovación (project VIOLETA, code FSE_1_2016_1_131837, manager, Prof. Gabriel Usera).","category":"page"},{"location":"theory/prinMechWork/#Principle-of-Virtual-Mechanical-Work","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"","category":"section"},{"location":"theory/prinMechWork/#Variational-formulation-of-the-principle","page":"Principle of Virtual Mechanical Work","title":"Variational formulation of the principle","text":"","category":"section"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"ONSAS can be used to solve the set of nonlynear equations given by the Principle of Virtual Work (PVW). The PVW can be defined in terms of the following set of nonlinear equations:","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"left(\n     mathbff_mas(mathbfu_t dotmathbfu_t ddotmathbfu_t)\n  +  mathbff_vis(dotmathbfu_t)\n  +  mathbff_int(mathbfu_t)\n  -  mathbff_ext(t)\nright) cdot delta mathbfu\n=\n0 qquad forall delta mathbfu in tildemathcalU","category":"page"},{"location":"theory/prinMechWork/#Solid-Elements-Implementation","page":"Principle of Virtual Mechanical Work","title":"Solid Elements Implementation","text":"","category":"section"},{"location":"theory/prinMechWork/#Tetrahedron-Solid-Element","page":"Principle of Virtual Mechanical Work","title":"Tetrahedron Solid Element","text":"","category":"section"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"The tetrahedron element considered is a four-node linear element. The isoparametric coordinates reference element is shown in the following figure","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"(Image: )","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"and the linear shape functions are given by","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"N_1(xi) = xi_1 quad\nN_2(xi) = 1-xi_1-xi_2-xi_3 quad\nN_3(xi) = xi_3 quad\nN_4(xi) = xi_2","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"The functions can be expressed in vector form","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"  textbf N  =\n  left\nbeginmatrix\nN_1 \nN_2 \nN_3 \nN_4\nendmatrix\n  right","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"and the linear interpolation of the coordinates of any point within an element can be written as","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"textbfX = eleCoordMat  textbfN(xi)","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"where eleCoordMat is a matrix with the reference configuration coordinates (or material coordinates) of the nodes:","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"eleCoordMat =\nleft\nbeginmatrix\nX_11    X_12  X_13  X_14 \nX_21    X_22  X_23  X_24 \nX_31    X_32  X_33  X_34 \nendmatrix\nright","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"where X_ij represents the coordinate in the i-th dimension of the j-th node.","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"The displacements gradient tensor is defined as","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"  textbf H  =\n    frac partial textbf u  \n\t  partial textbf X  \n\t qquad\n  H_ij =  frac partial u_i   partial X_j ","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"and using the displacement interpolation can be written in matrix form as","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"textbf H  = eleDispsMat  fracpartial textbfN partial textbfX","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"The material-isoparametric coordinates relation is given by:","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"textbfX = eleCoordMat   textbf N (xi)","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"and using the chain rule we obtain:","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"fracpartial textbfN partial textbfX =\nfracpartial textbfN partial xi   fracpartial xi  partial textbfX ","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"Then using the inverse theorem we obtain:","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"fracpartial xi partial textbfX = left( eleCoordMat   fracpartial textbfN partial xi  right)^-1","category":"page"},{"location":"theory/prinMechWork/","page":"Principle of Virtual Mechanical Work","title":"Principle of Virtual Mechanical Work","text":"nabla textbfu = eleDispsMat  left( eleCoordMat   fracpartial textbfN partial xi  right)^-1","category":"page"}]
}
